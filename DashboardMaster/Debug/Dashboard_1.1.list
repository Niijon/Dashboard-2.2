
Dashboard_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008430  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000435c  08008618  08008618  00018618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c978  0800c978  0001c978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000021c  20000000  0800c97c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004d0  20000220  0800cb98  00020220  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200006f0  0800cb98  000206f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002cd43  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000057be  00000000  00000000  0004cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00017c1e  00000000  00000000  00052746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a30  00000000  00000000  0006a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c8  00000000  00000000  0006bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001d039  00000000  00000000  0006d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025402  00000000  00000000  0008a699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a2e31  00000000  00000000  000afa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001528cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c9c  00000000  00000000  00152920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  001585bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  00158688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000220 	.word	0x20000220
 8000204:	00000000 	.word	0x00000000
 8000208:	08008600 	.word	0x08008600

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000224 	.word	0x20000224
 8000224:	08008600 	.word	0x08008600

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_InitTick+0x40>)
 8000ba6:	7818      	ldrb	r0, [r3, #0]
 8000ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bac:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_InitTick+0x44>)
 8000bb2:	6810      	ldr	r0, [r2, #0]
 8000bb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb8:	f000 fbdc 	bl	8001374 <HAL_SYSTICK_Config>
 8000bbc:	b968      	cbnz	r0, 8000bda <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	2c0f      	cmp	r4, #15
 8000bc0:	d901      	bls.n	8000bc6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	e00a      	b.n	8000bdc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4621      	mov	r1, r4
 8000bca:	f04f 30ff 	mov.w	r0, #4294967295
 8000bce:	f000 fb8f 	bl	80012f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_InitTick+0x48>)
 8000bd4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
}
 8000bdc:	bd10      	pop	{r4, pc}
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000048 	.word	0x20000048
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_Init>:
{
 8000bec:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x20>)
 8000bf0:	6813      	ldr	r3, [r2, #0]
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 fb67 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ffce 	bl	8000ba0 <HAL_InitTick>
  HAL_MspInit();
 8000c04:	f004 fb2a 	bl	800525c <HAL_MspInit>
}
 8000c08:	2000      	movs	r0, #0
 8000c0a:	bd08      	pop	{r3, pc}
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_IncTick+0x10>)
 8000c12:	6811      	ldr	r1, [r2, #0]
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_IncTick+0x14>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	440b      	add	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200003f8 	.word	0x200003f8
 8000c24:	20000000 	.word	0x20000000

08000c28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <HAL_GetTick+0x8>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200003f8 	.word	0x200003f8

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff6 	bl	8000c28 <HAL_GetTick>
 8000c3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c42:	d002      	beq.n	8000c4a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_Delay+0x24>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4a:	f7ff ffed 	bl	8000c28 <HAL_GetTick>
 8000c4e:	1b40      	subs	r0, r0, r5
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	d3fa      	bcc.n	8000c4a <HAL_Delay+0x16>
  {
  }
}
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop
 8000c58:	20000000 	.word	0x20000000

08000c5c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	f000 80a1 	beq.w	8000da4 <HAL_CAN_Init+0x148>
{
 8000c62:	b538      	push	{r3, r4, r5, lr}
 8000c64:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c66:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c6a:	b1d3      	cbz	r3, 8000ca2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c76:	f7ff ffd7 	bl	8000c28 <HAL_GetTick>
 8000c7a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	f012 0f01 	tst.w	r2, #1
 8000c84:	d110      	bne.n	8000ca8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c86:	f7ff ffcf 	bl	8000c28 <HAL_GetTick>
 8000c8a:	1b40      	subs	r0, r0, r5
 8000c8c:	280a      	cmp	r0, #10
 8000c8e:	d9f5      	bls.n	8000c7c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c96:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c98:	2305      	movs	r3, #5
 8000c9a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000c9e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000ca2:	f004 f85d 	bl	8004d60 <HAL_CAN_MspInit>
 8000ca6:	e7e1      	b.n	8000c6c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f022 0202 	bic.w	r2, r2, #2
 8000cae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cb0:	f7ff ffba 	bl	8000c28 <HAL_GetTick>
 8000cb4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	f012 0f02 	tst.w	r2, #2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc0:	f7ff ffb2 	bl	8000c28 <HAL_GetTick>
 8000cc4:	1b40      	subs	r0, r0, r5
 8000cc6:	280a      	cmp	r0, #10
 8000cc8:	d9f5      	bls.n	8000cb6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000cd8:	2001      	movs	r0, #1
 8000cda:	e7e1      	b.n	8000ca0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cdc:	7e22      	ldrb	r2, [r4, #24]
 8000cde:	2a01      	cmp	r2, #1
 8000ce0:	d03d      	beq.n	8000d5e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cea:	7e63      	ldrb	r3, [r4, #25]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d03b      	beq.n	8000d68 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cf8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cfa:	7ea3      	ldrb	r3, [r4, #26]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d039      	beq.n	8000d74 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	f023 0320 	bic.w	r3, r3, #32
 8000d08:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d0a:	7ee3      	ldrb	r3, [r4, #27]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d037      	beq.n	8000d80 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d1a:	7f23      	ldrb	r3, [r4, #28]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d035      	beq.n	8000d8c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	f023 0308 	bic.w	r3, r3, #8
 8000d28:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d2a:	7f63      	ldrb	r3, [r4, #29]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d033      	beq.n	8000d98 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d3a:	68a3      	ldr	r3, [r4, #8]
 8000d3c:	68e2      	ldr	r2, [r4, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	6922      	ldr	r2, [r4, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	6962      	ldr	r2, [r4, #20]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	6862      	ldr	r2, [r4, #4]
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	6821      	ldr	r1, [r4, #0]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d52:	2000      	movs	r0, #0
 8000d54:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000d5c:	e7a0      	b.n	8000ca0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e7c0      	b.n	8000cea <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d68:	6822      	ldr	r2, [r4, #0]
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e7c2      	b.n	8000cfa <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e7c4      	b.n	8000d0a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d80:	6822      	ldr	r2, [r4, #0]
 8000d82:	6813      	ldr	r3, [r2, #0]
 8000d84:	f023 0310 	bic.w	r3, r3, #16
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e7c6      	b.n	8000d1a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d8c:	6822      	ldr	r2, [r4, #0]
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e7c8      	b.n	8000d2a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e7ca      	b.n	8000d3a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
}
 8000da6:	4770      	bx	lr

08000da8 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000da8:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000daa:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d905      	bls.n	8000dc2 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000db6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
  }
}
 8000dc0:	4770      	bx	lr
{
 8000dc2:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dc4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dd0:	694b      	ldr	r3, [r1, #20]
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ddc:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000de0:	43dc      	mvns	r4, r3
 8000de2:	ea20 0003 	bic.w	r0, r0, r3
 8000de6:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dea:	69c8      	ldr	r0, [r1, #28]
 8000dec:	b9a8      	cbnz	r0, 8000e1a <HAL_CAN_ConfigFilter+0x72>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dee:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000df2:	4020      	ands	r0, r4
 8000df4:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000df8:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dfa:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfc:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dfe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e02:	3048      	adds	r0, #72	; 0x48
 8000e04:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e08:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e0a:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e0c:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e0e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e12:	3048      	adds	r0, #72	; 0x48
 8000e14:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000e18:	6045      	str	r5, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e1a:	69c8      	ldr	r0, [r1, #28]
 8000e1c:	2801      	cmp	r0, #1
 8000e1e:	d019      	beq.n	8000e54 <HAL_CAN_ConfigFilter+0xac>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e20:	6988      	ldr	r0, [r1, #24]
 8000e22:	bb70      	cbnz	r0, 8000e82 <HAL_CAN_ConfigFilter+0xda>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000e28:	4020      	ands	r0, r4
 8000e2a:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e2e:	6908      	ldr	r0, [r1, #16]
 8000e30:	bb68      	cbnz	r0, 8000e8e <HAL_CAN_ConfigFilter+0xe6>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e32:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000e36:	4004      	ands	r4, r0
 8000e38:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e3c:	6a09      	ldr	r1, [r1, #32]
 8000e3e:	2901      	cmp	r1, #1
 8000e40:	d02b      	beq.n	8000e9a <HAL_CAN_ConfigFilter+0xf2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e42:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000e4e:	2000      	movs	r0, #0
}
 8000e50:	bc70      	pop	{r4, r5, r6}
 8000e52:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e54:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000e58:	4318      	orrs	r0, r3
 8000e5a:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e5e:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e60:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e62:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e64:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e68:	3048      	adds	r0, #72	; 0x48
 8000e6a:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e6e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e70:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e72:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e74:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e78:	3048      	adds	r0, #72	; 0x48
 8000e7a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000e7e:	6045      	str	r5, [r0, #4]
 8000e80:	e7ce      	b.n	8000e20 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000e86:	4318      	orrs	r0, r3
 8000e88:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000e8c:	e7cf      	b.n	8000e2e <HAL_CAN_ConfigFilter+0x86>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e8e:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000e92:	4318      	orrs	r0, r3
 8000e94:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8000e98:	e7d0      	b.n	8000e3c <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e9a:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8000ea4:	e7cd      	b.n	8000e42 <HAL_CAN_ConfigFilter+0x9a>

08000ea6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ea6:	b570      	push	{r4, r5, r6, lr}
 8000ea8:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000eaa:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000eae:	b2ed      	uxtb	r5, r5
 8000eb0:	2d01      	cmp	r5, #1
 8000eb2:	d006      	beq.n	8000ec2 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000eb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000eba:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000ebc:	2501      	movs	r5, #1
  }
}
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ec8:	6802      	ldr	r2, [r0, #0]
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000ed2:	f7ff fea9 	bl	8000c28 <HAL_GetTick>
 8000ed6:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f013 0f01 	tst.w	r3, #1
 8000ee0:	d00c      	beq.n	8000efc <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee2:	f7ff fea1 	bl	8000c28 <HAL_GetTick>
 8000ee6:	1b83      	subs	r3, r0, r6
 8000ee8:	2b0a      	cmp	r3, #10
 8000eea:	d9f5      	bls.n	8000ed8 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef2:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000efa:	e7e0      	b.n	8000ebe <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000efc:	2500      	movs	r5, #0
 8000efe:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8000f00:	e7dd      	b.n	8000ebe <HAL_CAN_Start+0x18>

08000f02 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f02:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f04:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f08:	3c01      	subs	r4, #1
 8000f0a:	b2e4      	uxtb	r4, r4
 8000f0c:	2c01      	cmp	r4, #1
 8000f0e:	f200 8091 	bhi.w	8001034 <HAL_CAN_GetRxMessage+0x132>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f12:	b951      	cbnz	r1, 8000f2a <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f14:	6804      	ldr	r4, [r0, #0]
 8000f16:	68e4      	ldr	r4, [r4, #12]
 8000f18:	f014 0f03 	tst.w	r4, #3
 8000f1c:	d110      	bne.n	8000f40 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f24:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
 8000f28:	e089      	b.n	800103e <HAL_CAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f2a:	6804      	ldr	r4, [r0, #0]
 8000f2c:	6924      	ldr	r4, [r4, #16]
 8000f2e:	f014 0f03 	tst.w	r4, #3
 8000f32:	d105      	bne.n	8000f40 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	e07e      	b.n	800103e <HAL_CAN_GetRxMessage+0x13c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f40:	6805      	ldr	r5, [r0, #0]
 8000f42:	f101 041b 	add.w	r4, r1, #27
 8000f46:	0124      	lsls	r4, r4, #4
 8000f48:	592c      	ldr	r4, [r5, r4]
 8000f4a:	f004 0404 	and.w	r4, r4, #4
 8000f4e:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d161      	bne.n	8001018 <HAL_CAN_GetRxMessage+0x116>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f54:	6805      	ldr	r5, [r0, #0]
 8000f56:	f101 041b 	add.w	r4, r1, #27
 8000f5a:	0124      	lsls	r4, r4, #4
 8000f5c:	592c      	ldr	r4, [r5, r4]
 8000f5e:	0d64      	lsrs	r4, r4, #21
 8000f60:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f62:	6805      	ldr	r5, [r0, #0]
 8000f64:	f101 041b 	add.w	r4, r1, #27
 8000f68:	0124      	lsls	r4, r4, #4
 8000f6a:	592d      	ldr	r5, [r5, r4]
 8000f6c:	f005 0502 	and.w	r5, r5, #2
 8000f70:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f72:	6805      	ldr	r5, [r0, #0]
 8000f74:	4425      	add	r5, r4
 8000f76:	686d      	ldr	r5, [r5, #4]
 8000f78:	f005 050f 	and.w	r5, r5, #15
 8000f7c:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f7e:	6805      	ldr	r5, [r0, #0]
 8000f80:	4425      	add	r5, r4
 8000f82:	686d      	ldr	r5, [r5, #4]
 8000f84:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000f88:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f8a:	6805      	ldr	r5, [r0, #0]
 8000f8c:	442c      	add	r4, r5
 8000f8e:	6864      	ldr	r4, [r4, #4]
 8000f90:	0c24      	lsrs	r4, r4, #16
 8000f92:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f94:	6802      	ldr	r2, [r0, #0]
 8000f96:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f9a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f9e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fa0:	6802      	ldr	r2, [r0, #0]
 8000fa2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fa6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000faa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fae:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fb0:	6802      	ldr	r2, [r0, #0]
 8000fb2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fb6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000fba:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000fbe:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fc0:	6802      	ldr	r2, [r0, #0]
 8000fc2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fc6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000fca:	0e12      	lsrs	r2, r2, #24
 8000fcc:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fce:	6802      	ldr	r2, [r0, #0]
 8000fd0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fd4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fd8:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fda:	6802      	ldr	r2, [r0, #0]
 8000fdc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fe0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fe4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fe8:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fea:	6802      	ldr	r2, [r0, #0]
 8000fec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000ff0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000ff4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000ff8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ffa:	6802      	ldr	r2, [r0, #0]
 8000ffc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001000:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001004:	0e12      	lsrs	r2, r2, #24
 8001006:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001008:	b971      	cbnz	r1, 8001028 <HAL_CAN_GetRxMessage+0x126>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800100a:	6802      	ldr	r2, [r0, #0]
 800100c:	68d3      	ldr	r3, [r2, #12]
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8001014:	2000      	movs	r0, #0
 8001016:	e012      	b.n	800103e <HAL_CAN_GetRxMessage+0x13c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001018:	6805      	ldr	r5, [r0, #0]
 800101a:	f101 041b 	add.w	r4, r1, #27
 800101e:	0124      	lsls	r4, r4, #4
 8001020:	592c      	ldr	r4, [r5, r4]
 8001022:	08e4      	lsrs	r4, r4, #3
 8001024:	6054      	str	r4, [r2, #4]
 8001026:	e79c      	b.n	8000f62 <HAL_CAN_GetRxMessage+0x60>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001028:	6802      	ldr	r2, [r0, #0]
 800102a:	6913      	ldr	r3, [r2, #16]
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	6113      	str	r3, [r2, #16]
 8001032:	e7ef      	b.n	8001014 <HAL_CAN_GetRxMessage+0x112>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001034:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800103c:	2001      	movs	r0, #1
  }
}
 800103e:	bc30      	pop	{r4, r5}
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001042:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001046:	3b01      	subs	r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d905      	bls.n	800105a <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001056:	2001      	movs	r0, #1
  }
}
 8001058:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800105a:	6802      	ldr	r2, [r0, #0]
 800105c:	6953      	ldr	r3, [r2, #20]
 800105e:	4319      	orrs	r1, r3
 8001060:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	4770      	bx	lr

08001066 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001066:	4770      	bx	lr

08001068 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001068:	4770      	bx	lr

0800106a <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800106a:	4770      	bx	lr

0800106c <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800106c:	4770      	bx	lr

0800106e <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800106e:	4770      	bx	lr

08001070 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001070:	4770      	bx	lr

08001072 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001072:	4770      	bx	lr

08001074 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001074:	4770      	bx	lr

08001076 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001076:	4770      	bx	lr

08001078 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001078:	4770      	bx	lr

0800107a <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800107a:	4770      	bx	lr

0800107c <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800107c:	4770      	bx	lr

0800107e <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800107e:	4770      	bx	lr

08001080 <HAL_CAN_IRQHandler>:
{
 8001080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001086:	6803      	ldr	r3, [r0, #0]
 8001088:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800108a:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800108e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001090:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001094:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001098:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800109c:	f014 0601 	ands.w	r6, r4, #1
 80010a0:	d03b      	beq.n	800111a <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010a2:	f017 0601 	ands.w	r6, r7, #1
 80010a6:	d016      	beq.n	80010d6 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010a8:	2201      	movs	r2, #1
 80010aa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010ac:	f017 0f02 	tst.w	r7, #2
 80010b0:	d108      	bne.n	80010c4 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010b2:	f017 0f04 	tst.w	r7, #4
 80010b6:	d10c      	bne.n	80010d2 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010b8:	f017 0608 	ands.w	r6, r7, #8
 80010bc:	d006      	beq.n	80010cc <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010be:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80010c2:	e008      	b.n	80010d6 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010c4:	f7ff ffcf 	bl	8001066 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010c8:	2600      	movs	r6, #0
 80010ca:	e004      	b.n	80010d6 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010cc:	f7ff ffce 	bl	800106c <HAL_CAN_TxMailbox0AbortCallback>
 80010d0:	e001      	b.n	80010d6 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010d2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010d6:	f417 7f80 	tst.w	r7, #256	; 0x100
 80010da:	d00d      	beq.n	80010f8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010e4:	f417 7f00 	tst.w	r7, #512	; 0x200
 80010e8:	f040 8086 	bne.w	80011f8 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010ec:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80010f0:	f000 8086 	beq.w	8001200 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010f4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010f8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80010fc:	d00d      	beq.n	800111a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001104:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001106:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800110a:	f040 8083 	bne.w	8001214 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800110e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8001112:	f000 8083 	beq.w	800121c <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001116:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800111a:	f014 0f08 	tst.w	r4, #8
 800111e:	d007      	beq.n	8001130 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001120:	f01b 0f10 	tst.w	fp, #16
 8001124:	d004      	beq.n	8001130 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001126:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800112a:	682b      	ldr	r3, [r5, #0]
 800112c:	2210      	movs	r2, #16
 800112e:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001130:	f014 0f04 	tst.w	r4, #4
 8001134:	d002      	beq.n	800113c <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001136:	f01b 0f08 	tst.w	fp, #8
 800113a:	d179      	bne.n	8001230 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800113c:	f014 0f02 	tst.w	r4, #2
 8001140:	d004      	beq.n	800114c <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f013 0f03 	tst.w	r3, #3
 800114a:	d178      	bne.n	800123e <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800114c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001150:	d007      	beq.n	8001162 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001152:	f01a 0f10 	tst.w	sl, #16
 8001156:	d004      	beq.n	8001162 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001158:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	2210      	movs	r2, #16
 8001160:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001162:	f014 0f20 	tst.w	r4, #32
 8001166:	d002      	beq.n	800116e <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001168:	f01a 0f08 	tst.w	sl, #8
 800116c:	d16b      	bne.n	8001246 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800116e:	f014 0f10 	tst.w	r4, #16
 8001172:	d004      	beq.n	800117e <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	f013 0f03 	tst.w	r3, #3
 800117c:	d16a      	bne.n	8001254 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800117e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001182:	d002      	beq.n	800118a <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001184:	f018 0f10 	tst.w	r8, #16
 8001188:	d168      	bne.n	800125c <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800118a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800118e:	d002      	beq.n	8001196 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001190:	f018 0f08 	tst.w	r8, #8
 8001194:	d169      	bne.n	800126a <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001196:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800119a:	d07a      	beq.n	8001292 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800119c:	f018 0f04 	tst.w	r8, #4
 80011a0:	d074      	beq.n	800128c <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011a2:	f414 7f80 	tst.w	r4, #256	; 0x100
 80011a6:	d004      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x132>
 80011a8:	f019 0f01 	tst.w	r9, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 80011ae:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011b2:	f414 7f00 	tst.w	r4, #512	; 0x200
 80011b6:	d004      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x142>
 80011b8:	f019 0f02 	tst.w	r9, #2
 80011bc:	d001      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 80011be:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011c2:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80011c6:	d004      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x152>
 80011c8:	f019 0f04 	tst.w	r9, #4
 80011cc:	d001      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 80011ce:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011d2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80011d6:	d059      	beq.n	800128c <HAL_CAN_IRQHandler+0x20c>
 80011d8:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80011dc:	d056      	beq.n	800128c <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 80011de:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80011e2:	d065      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x230>
 80011e4:	d858      	bhi.n	8001298 <HAL_CAN_IRQHandler+0x218>
 80011e6:	f1b9 0f20 	cmp.w	r9, #32
 80011ea:	d05e      	beq.n	80012aa <HAL_CAN_IRQHandler+0x22a>
 80011ec:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80011f0:	d142      	bne.n	8001278 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011f2:	f046 0620 	orr.w	r6, r6, #32
            break;
 80011f6:	e044      	b.n	8001282 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011f8:	4628      	mov	r0, r5
 80011fa:	f7ff ff35 	bl	8001068 <HAL_CAN_TxMailbox1CompleteCallback>
 80011fe:	e77b      	b.n	80010f8 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001200:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8001204:	d002      	beq.n	800120c <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001206:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800120a:	e775      	b.n	80010f8 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800120c:	4628      	mov	r0, r5
 800120e:	f7ff ff2e 	bl	800106e <HAL_CAN_TxMailbox1AbortCallback>
 8001212:	e771      	b.n	80010f8 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff ff28 	bl	800106a <HAL_CAN_TxMailbox2CompleteCallback>
 800121a:	e77e      	b.n	800111a <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800121c:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8001220:	d002      	beq.n	8001228 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001222:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8001226:	e778      	b.n	800111a <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001228:	4628      	mov	r0, r5
 800122a:	f7ff ff21 	bl	8001070 <HAL_CAN_TxMailbox2AbortCallback>
 800122e:	e774      	b.n	800111a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	2208      	movs	r2, #8
 8001234:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001236:	4628      	mov	r0, r5
 8001238:	f7ff ff1c 	bl	8001074 <HAL_CAN_RxFifo0FullCallback>
 800123c:	e77e      	b.n	800113c <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800123e:	4628      	mov	r0, r5
 8001240:	f7ff ff17 	bl	8001072 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001244:	e782      	b.n	800114c <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	2208      	movs	r2, #8
 800124a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800124c:	4628      	mov	r0, r5
 800124e:	f7ff ff13 	bl	8001078 <HAL_CAN_RxFifo1FullCallback>
 8001252:	e78c      	b.n	800116e <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001254:	4628      	mov	r0, r5
 8001256:	f7ff ff0e 	bl	8001076 <HAL_CAN_RxFifo1MsgPendingCallback>
 800125a:	e790      	b.n	800117e <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	2210      	movs	r2, #16
 8001260:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001262:	4628      	mov	r0, r5
 8001264:	f7ff ff09 	bl	800107a <HAL_CAN_SleepCallback>
 8001268:	e78f      	b.n	800118a <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	2208      	movs	r2, #8
 800126e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001270:	4628      	mov	r0, r5
 8001272:	f7ff ff03 	bl	800107c <HAL_CAN_WakeUpFromRxMsgCallback>
 8001276:	e78e      	b.n	8001196 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8001278:	f1b9 0f10 	cmp.w	r9, #16
 800127c:	d101      	bne.n	8001282 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 800127e:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001282:	682a      	ldr	r2, [r5, #0]
 8001284:	6993      	ldr	r3, [r2, #24]
 8001286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800128a:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	2204      	movs	r2, #4
 8001290:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001292:	b99e      	cbnz	r6, 80012bc <HAL_CAN_IRQHandler+0x23c>
}
 8001294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8001298:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800129c:	d00b      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x236>
 800129e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 80012a2:	d1ee      	bne.n	8001282 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012a4:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 80012a8:	e7eb      	b.n	8001282 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012aa:	f046 0610 	orr.w	r6, r6, #16
            break;
 80012ae:	e7e8      	b.n	8001282 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 80012b0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80012b4:	e7e5      	b.n	8001282 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 80012b6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80012ba:	e7e2      	b.n	8001282 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 80012bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012be:	431e      	orrs	r6, r3
 80012c0:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff fedb 	bl	800107e <HAL_CAN_ErrorCallback>
}
 80012c8:	e7e4      	b.n	8001294 <HAL_CAN_IRQHandler+0x214>
	...

080012cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d8:	0200      	lsls	r0, r0, #8
 80012da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012de:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012e8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_NVIC_SetPriority+0x60>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fa:	f1c3 0407 	rsb	r4, r3, #7
 80012fe:	2c04      	cmp	r4, #4
 8001300:	bf28      	it	cs
 8001302:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001304:	1d1d      	adds	r5, r3, #4
 8001306:	2d06      	cmp	r5, #6
 8001308:	d918      	bls.n	800133c <HAL_NVIC_SetPriority+0x4c>
 800130a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 35ff 	mov.w	r5, #4294967295
 8001310:	fa05 f404 	lsl.w	r4, r5, r4
 8001314:	ea21 0104 	bic.w	r1, r1, r4
 8001318:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131a:	fa05 f303 	lsl.w	r3, r5, r3
 800131e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001322:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001324:	2800      	cmp	r0, #0
 8001326:	db0b      	blt.n	8001340 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	0109      	lsls	r1, r1, #4
 800132a:	b2c9      	uxtb	r1, r1
 800132c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001330:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001334:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001338:	bc30      	pop	{r4, r5}
 800133a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133c:	2300      	movs	r3, #0
 800133e:	e7e5      	b.n	800130c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	f000 000f 	and.w	r0, r0, #15
 8001344:	0109      	lsls	r1, r1, #4
 8001346:	b2c9      	uxtb	r1, r1
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <HAL_NVIC_SetPriority+0x64>)
 800134a:	5419      	strb	r1, [r3, r0]
 800134c:	e7f4      	b.n	8001338 <HAL_NVIC_SetPriority+0x48>
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00
 8001354:	e000ed14 	.word	0xe000ed14

08001358 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001358:	2800      	cmp	r0, #0
 800135a:	db07      	blt.n	800136c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135c:	f000 021f 	and.w	r2, r0, #31
 8001360:	0940      	lsrs	r0, r0, #5
 8001362:	2301      	movs	r3, #1
 8001364:	4093      	lsls	r3, r2
 8001366:	4a02      	ldr	r2, [pc, #8]	; (8001370 <HAL_NVIC_EnableIRQ+0x18>)
 8001368:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	3801      	subs	r0, #1
 8001376:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800137a:	d20a      	bcs.n	8001392 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_SYSTICK_Config+0x24>)
 800137e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_SYSTICK_Config+0x28>)
 8001382:	21f0      	movs	r1, #240	; 0xf0
 8001384:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	2000      	movs	r0, #0
 800138a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b4f0      	push	{r4, r5, r6, r7}
 80013a2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a4:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 80013a6:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	e0ab      	b.n	8001502 <HAL_GPIO_Init+0x162>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013aa:	4f85      	ldr	r7, [pc, #532]	; (80015c0 <HAL_GPIO_Init+0x220>)
 80013ac:	42bb      	cmp	r3, r7
 80013ae:	d010      	beq.n	80013d2 <HAL_GPIO_Init+0x32>
 80013b0:	d907      	bls.n	80013c2 <HAL_GPIO_Init+0x22>
 80013b2:	4f84      	ldr	r7, [pc, #528]	; (80015c4 <HAL_GPIO_Init+0x224>)
 80013b4:	42bb      	cmp	r3, r7
 80013b6:	d00c      	beq.n	80013d2 <HAL_GPIO_Init+0x32>
 80013b8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80013bc:	42bb      	cmp	r3, r7
 80013be:	d008      	beq.n	80013d2 <HAL_GPIO_Init+0x32>
 80013c0:	e013      	b.n	80013ea <HAL_GPIO_Init+0x4a>
 80013c2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80013c6:	42bb      	cmp	r3, r7
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x32>
 80013ca:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80013ce:	42bb      	cmp	r3, r7
 80013d0:	d107      	bne.n	80013e2 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d2:	688b      	ldr	r3, [r1, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d060      	beq.n	800149a <HAL_GPIO_Init+0xfa>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d059      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80013dc:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013de:	2508      	movs	r5, #8
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80013e2:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80013e6:	42bb      	cmp	r3, r7
 80013e8:	d0f3      	beq.n	80013d2 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ea:	2eff      	cmp	r6, #255	; 0xff
 80013ec:	d857      	bhi.n	800149e <HAL_GPIO_Init+0xfe>
 80013ee:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f0:	2eff      	cmp	r6, #255	; 0xff
 80013f2:	d857      	bhi.n	80014a4 <HAL_GPIO_Init+0x104>
 80013f4:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f6:	f8dc 3000 	ldr.w	r3, [ip]
 80013fa:	270f      	movs	r7, #15
 80013fc:	4097      	lsls	r7, r2
 80013fe:	ea23 0307 	bic.w	r3, r3, r7
 8001402:	fa05 f202 	lsl.w	r2, r5, r2
 8001406:	4313      	orrs	r3, r2
 8001408:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140c:	684b      	ldr	r3, [r1, #4]
 800140e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001412:	d075      	beq.n	8001500 <HAL_GPIO_Init+0x160>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <HAL_GPIO_Init+0x228>)
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001428:	08a2      	lsrs	r2, r4, #2
 800142a:	1c97      	adds	r7, r2, #2
 800142c:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_GPIO_Init+0x22c>)
 800142e:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001432:	f004 0303 	and.w	r3, r4, #3
 8001436:	009f      	lsls	r7, r3, #2
 8001438:	230f      	movs	r3, #15
 800143a:	40bb      	lsls	r3, r7
 800143c:	ea2c 0c03 	bic.w	ip, ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001440:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_GPIO_Init+0x230>)
 8001442:	4298      	cmp	r0, r3
 8001444:	d034      	beq.n	80014b0 <HAL_GPIO_Init+0x110>
 8001446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800144a:	4298      	cmp	r0, r3
 800144c:	f000 8094 	beq.w	8001578 <HAL_GPIO_Init+0x1d8>
 8001450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001454:	4298      	cmp	r0, r3
 8001456:	f000 8091 	beq.w	800157c <HAL_GPIO_Init+0x1dc>
 800145a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800145e:	4298      	cmp	r0, r3
 8001460:	f000 808e 	beq.w	8001580 <HAL_GPIO_Init+0x1e0>
 8001464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001468:	4298      	cmp	r0, r3
 800146a:	f000 808b 	beq.w	8001584 <HAL_GPIO_Init+0x1e4>
 800146e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001472:	4298      	cmp	r0, r3
 8001474:	d01a      	beq.n	80014ac <HAL_GPIO_Init+0x10c>
 8001476:	2306      	movs	r3, #6
 8001478:	e01b      	b.n	80014b2 <HAL_GPIO_Init+0x112>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147a:	68cd      	ldr	r5, [r1, #12]
          break;
 800147c:	e7b5      	b.n	80013ea <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800147e:	68cd      	ldr	r5, [r1, #12]
 8001480:	3504      	adds	r5, #4
          break;
 8001482:	e7b2      	b.n	80013ea <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001484:	68cd      	ldr	r5, [r1, #12]
 8001486:	3508      	adds	r5, #8
          break;
 8001488:	e7af      	b.n	80013ea <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800148a:	68cd      	ldr	r5, [r1, #12]
 800148c:	350c      	adds	r5, #12
          break;
 800148e:	e7ac      	b.n	80013ea <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001490:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001492:	2508      	movs	r5, #8
 8001494:	e7a9      	b.n	80013ea <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001496:	2500      	movs	r5, #0
 8001498:	e7a7      	b.n	80013ea <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149a:	2504      	movs	r5, #4
 800149c:	e7a5      	b.n	80013ea <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149e:	f100 0c04 	add.w	ip, r0, #4
 80014a2:	e7a5      	b.n	80013f0 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a4:	f1a4 0208 	sub.w	r2, r4, #8
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	e7a4      	b.n	80013f6 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ac:	2305      	movs	r3, #5
 80014ae:	e000      	b.n	80014b2 <HAL_GPIO_Init+0x112>
 80014b0:	2300      	movs	r3, #0
 80014b2:	40bb      	lsls	r3, r7
 80014b4:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80014b8:	3202      	adds	r2, #2
 80014ba:	4f44      	ldr	r7, [pc, #272]	; (80015cc <HAL_GPIO_Init+0x22c>)
 80014bc:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c0:	684b      	ldr	r3, [r1, #4]
 80014c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014c6:	d05f      	beq.n	8001588 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <HAL_GPIO_Init+0x234>)
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	4333      	orrs	r3, r6
 80014ce:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d0:	684b      	ldr	r3, [r1, #4]
 80014d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014d6:	d05d      	beq.n	8001594 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d8:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <HAL_GPIO_Init+0x234>)
 80014da:	6853      	ldr	r3, [r2, #4]
 80014dc:	4333      	orrs	r3, r6
 80014de:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e0:	684b      	ldr	r3, [r1, #4]
 80014e2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80014e6:	d05b      	beq.n	80015a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e8:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <HAL_GPIO_Init+0x234>)
 80014ea:	6893      	ldr	r3, [r2, #8]
 80014ec:	4333      	orrs	r3, r6
 80014ee:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f0:	684b      	ldr	r3, [r1, #4]
 80014f2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80014f6:	d059      	beq.n	80015ac <HAL_GPIO_Init+0x20c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f8:	4a36      	ldr	r2, [pc, #216]	; (80015d4 <HAL_GPIO_Init+0x234>)
 80014fa:	68d3      	ldr	r3, [r2, #12]
 80014fc:	431e      	orrs	r6, r3
 80014fe:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001500:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	680b      	ldr	r3, [r1, #0]
 8001504:	fa33 f204 	lsrs.w	r2, r3, r4
 8001508:	d056      	beq.n	80015b8 <HAL_GPIO_Init+0x218>
    ioposition = (0x01uL << position);
 800150a:	2201      	movs	r2, #1
 800150c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8001512:	ea32 0303 	bics.w	r3, r2, r3
 8001516:	d1f3      	bne.n	8001500 <HAL_GPIO_Init+0x160>
      switch (GPIO_Init->Mode)
 8001518:	684b      	ldr	r3, [r1, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	f63f af45 	bhi.w	80013aa <HAL_GPIO_Init+0xa>
 8001520:	2b12      	cmp	r3, #18
 8001522:	f63f af62 	bhi.w	80013ea <HAL_GPIO_Init+0x4a>
 8001526:	a701      	add	r7, pc, #4	; (adr r7, 800152c <HAL_GPIO_Init+0x18c>)
 8001528:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 800152c:	080013d3 	.word	0x080013d3
 8001530:	0800147b 	.word	0x0800147b
 8001534:	08001485 	.word	0x08001485
 8001538:	08001497 	.word	0x08001497
 800153c:	080013eb 	.word	0x080013eb
 8001540:	080013eb 	.word	0x080013eb
 8001544:	080013eb 	.word	0x080013eb
 8001548:	080013eb 	.word	0x080013eb
 800154c:	080013eb 	.word	0x080013eb
 8001550:	080013eb 	.word	0x080013eb
 8001554:	080013eb 	.word	0x080013eb
 8001558:	080013eb 	.word	0x080013eb
 800155c:	080013eb 	.word	0x080013eb
 8001560:	080013eb 	.word	0x080013eb
 8001564:	080013eb 	.word	0x080013eb
 8001568:	080013eb 	.word	0x080013eb
 800156c:	080013eb 	.word	0x080013eb
 8001570:	0800147f 	.word	0x0800147f
 8001574:	0800148b 	.word	0x0800148b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001578:	2301      	movs	r3, #1
 800157a:	e79a      	b.n	80014b2 <HAL_GPIO_Init+0x112>
 800157c:	2302      	movs	r3, #2
 800157e:	e798      	b.n	80014b2 <HAL_GPIO_Init+0x112>
 8001580:	2303      	movs	r3, #3
 8001582:	e796      	b.n	80014b2 <HAL_GPIO_Init+0x112>
 8001584:	2304      	movs	r3, #4
 8001586:	e794      	b.n	80014b2 <HAL_GPIO_Init+0x112>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_GPIO_Init+0x234>)
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	ea23 0306 	bic.w	r3, r3, r6
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e79d      	b.n	80014d0 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_GPIO_Init+0x234>)
 8001596:	6853      	ldr	r3, [r2, #4]
 8001598:	ea23 0306 	bic.w	r3, r3, r6
 800159c:	6053      	str	r3, [r2, #4]
 800159e:	e79f      	b.n	80014e0 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_GPIO_Init+0x234>)
 80015a2:	6893      	ldr	r3, [r2, #8]
 80015a4:	ea23 0306 	bic.w	r3, r3, r6
 80015a8:	6093      	str	r3, [r2, #8]
 80015aa:	e7a1      	b.n	80014f0 <HAL_GPIO_Init+0x150>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_GPIO_Init+0x234>)
 80015ae:	68d3      	ldr	r3, [r2, #12]
 80015b0:	ea23 0606 	bic.w	r6, r3, r6
 80015b4:	60d6      	str	r6, [r2, #12]
 80015b6:	e7a3      	b.n	8001500 <HAL_GPIO_Init+0x160>
  }
}
 80015b8:	b002      	add	sp, #8
 80015ba:	bcf0      	pop	{r4, r5, r6, r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10310000 	.word	0x10310000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	40010800 	.word	0x40010800
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d8:	b10a      	cbz	r2, 80015de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015da:	6101      	str	r1, [r0, #16]
 80015dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015de:	0409      	lsls	r1, r1, #16
 80015e0:	6101      	str	r1, [r0, #16]
  }
}
 80015e2:	4770      	bx	lr

080015e4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e4:	6803      	ldr	r3, [r0, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80015ec:	d101      	bne.n	80015f2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80015ee:	2000      	movs	r0, #0
}
 80015f0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015f6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015fc:	2220      	movs	r2, #32
 80015fe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001602:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001606:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001608:	f042 0204 	orr.w	r2, r2, #4
 800160c:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800160e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001612:	2001      	movs	r0, #1
 8001614:	4770      	bx	lr

08001616 <I2C_WaitOnFlagUntilTimeout>:
{
 8001616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161a:	4607      	mov	r7, r0
 800161c:	460d      	mov	r5, r1
 800161e:	4690      	mov	r8, r2
 8001620:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001622:	e022      	b.n	800166a <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001624:	f7ff fb00 	bl	8000c28 <HAL_GetTick>
 8001628:	9b06      	ldr	r3, [sp, #24]
 800162a:	1ac0      	subs	r0, r0, r3
 800162c:	42b0      	cmp	r0, r6
 800162e:	d800      	bhi.n	8001632 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001630:	b9de      	cbnz	r6, 800166a <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001636:	2220      	movs	r2, #32
 8001638:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800163c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001648:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
 800164e:	e01a      	b.n	8001686 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	699c      	ldr	r4, [r3, #24]
 8001654:	ea25 0404 	bic.w	r4, r5, r4
 8001658:	b2a4      	uxth	r4, r4
 800165a:	fab4 f484 	clz	r4, r4
 800165e:	0964      	lsrs	r4, r4, #5
 8001660:	45a0      	cmp	r8, r4
 8001662:	d10f      	bne.n	8001684 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8001664:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001668:	d1dc      	bne.n	8001624 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800166a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800166e:	2b01      	cmp	r3, #1
 8001670:	d1ee      	bne.n	8001650 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	695c      	ldr	r4, [r3, #20]
 8001676:	ea25 0404 	bic.w	r4, r5, r4
 800167a:	b2a4      	uxth	r4, r4
 800167c:	fab4 f484 	clz	r4, r4
 8001680:	0964      	lsrs	r4, r4, #5
 8001682:	e7ed      	b.n	8001660 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8001684:	2000      	movs	r0, #0
}
 8001686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800168a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800168a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168e:	4605      	mov	r5, r0
 8001690:	460e      	mov	r6, r1
 8001692:	4617      	mov	r7, r2
 8001694:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001696:	e03d      	b.n	8001714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016a6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016ac:	2220      	movs	r2, #32
 80016ae:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016b2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80016b8:	f042 0204 	orr.w	r2, r2, #4
 80016bc:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80016be:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	e034      	b.n	8001730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c6:	f7ff faaf 	bl	8000c28 <HAL_GetTick>
 80016ca:	eba0 0008 	sub.w	r0, r0, r8
 80016ce:	42b8      	cmp	r0, r7
 80016d0:	d800      	bhi.n	80016d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80016d2:	b9ff      	cbnz	r7, 8001714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016d8:	2220      	movs	r2, #32
 80016da:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016de:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016e2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80016e4:	f042 0220 	orr.w	r2, r2, #32
 80016e8:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
 80016f0:	e01e      	b.n	8001730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	699c      	ldr	r4, [r3, #24]
 80016f6:	ea26 0404 	bic.w	r4, r6, r4
 80016fa:	b2a4      	uxth	r4, r4
 80016fc:	3c00      	subs	r4, #0
 80016fe:	bf18      	it	ne
 8001700:	2401      	movne	r4, #1
 8001702:	b1a4      	cbz	r4, 800172e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800170c:	d1c4      	bne.n	8001698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800170e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001712:	d1d8      	bne.n	80016c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001714:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8001718:	2b01      	cmp	r3, #1
 800171a:	d1ea      	bne.n	80016f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	695c      	ldr	r4, [r3, #20]
 8001720:	ea26 0404 	bic.w	r4, r6, r4
 8001724:	b2a4      	uxth	r4, r4
 8001726:	3c00      	subs	r4, #0
 8001728:	bf18      	it	ne
 800172a:	2401      	movne	r4, #1
 800172c:	e7e9      	b.n	8001702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800172e:	2000      	movs	r0, #0
}
 8001730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001734 <I2C_MasterRequestWrite>:
{
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	4616      	mov	r6, r2
 800173e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001740:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001742:	2b08      	cmp	r3, #8
 8001744:	d00d      	beq.n	8001762 <I2C_MasterRequestWrite+0x2e>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d00b      	beq.n	8001762 <I2C_MasterRequestWrite+0x2e>
 800174a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800174e:	d008      	beq.n	8001762 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001750:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001752:	2b12      	cmp	r3, #18
 8001754:	d10a      	bne.n	800176c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001756:	6802      	ldr	r2, [r0, #0]
 8001758:	6813      	ldr	r3, [r2, #0]
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e004      	b.n	800176c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001762:	6822      	ldr	r2, [r4, #0]
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800176c:	9700      	str	r7, [sp, #0]
 800176e:	4633      	mov	r3, r6
 8001770:	2200      	movs	r2, #0
 8001772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff ff4d 	bl	8001616 <I2C_WaitOnFlagUntilTimeout>
 800177c:	b980      	cbnz	r0, 80017a0 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800177e:	6923      	ldr	r3, [r4, #16]
 8001780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001784:	d116      	bne.n	80017b4 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800178c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800178e:	463b      	mov	r3, r7
 8001790:	4632      	mov	r2, r6
 8001792:	4913      	ldr	r1, [pc, #76]	; (80017e0 <I2C_MasterRequestWrite+0xac>)
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff ff78 	bl	800168a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800179a:	b9f8      	cbnz	r0, 80017dc <I2C_MasterRequestWrite+0xa8>
}
 800179c:	b003      	add	sp, #12
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017a8:	d002      	beq.n	80017b0 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ae:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80017b0:	2003      	movs	r0, #3
 80017b2:	e7f3      	b.n	800179c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017b4:	11eb      	asrs	r3, r5, #7
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	f003 0306 	and.w	r3, r3, #6
 80017bc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80017c0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4632      	mov	r2, r6
 80017c6:	4907      	ldr	r1, [pc, #28]	; (80017e4 <I2C_MasterRequestWrite+0xb0>)
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff ff5e 	bl	800168a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017ce:	b918      	cbnz	r0, 80017d8 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	b2ed      	uxtb	r5, r5
 80017d4:	611d      	str	r5, [r3, #16]
 80017d6:	e7da      	b.n	800178e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	e7df      	b.n	800179c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
 80017de:	e7dd      	b.n	800179c <I2C_MasterRequestWrite+0x68>
 80017e0:	00010002 	.word	0x00010002
 80017e4:	00010008 	.word	0x00010008

080017e8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017f8:	d11c      	bne.n	8001834 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff fef2 	bl	80015e4 <I2C_IsAcknowledgeFailed>
 8001800:	b9d0      	cbnz	r0, 8001838 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001802:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001806:	d0f3      	beq.n	80017f0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001808:	f7ff fa0e 	bl	8000c28 <HAL_GetTick>
 800180c:	1b80      	subs	r0, r0, r6
 800180e:	42a8      	cmp	r0, r5
 8001810:	d801      	bhi.n	8001816 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001812:	2d00      	cmp	r5, #0
 8001814:	d1ec      	bne.n	80017f0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001816:	2300      	movs	r3, #0
 8001818:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800181a:	2220      	movs	r2, #32
 800181c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001820:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001824:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001826:	f042 0220 	orr.w	r2, r2, #32
 800182a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800182c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
 8001832:	e000      	b.n	8001836 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001834:	2000      	movs	r0, #0
}
 8001836:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001838:	2001      	movs	r0, #1
 800183a:	e7fc      	b.n	8001836 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800183c <I2C_RequestMemoryWrite>:
{
 800183c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001840:	b085      	sub	sp, #20
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	4691      	mov	r9, r2
 8001848:	461f      	mov	r7, r3
 800184a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800184e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001850:	6803      	ldr	r3, [r0, #0]
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001858:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800185a:	9600      	str	r6, [sp, #0]
 800185c:	4643      	mov	r3, r8
 800185e:	2200      	movs	r2, #0
 8001860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001864:	f7ff fed7 	bl	8001616 <I2C_WaitOnFlagUntilTimeout>
 8001868:	b960      	cbnz	r0, 8001884 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001870:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001872:	4633      	mov	r3, r6
 8001874:	4642      	mov	r2, r8
 8001876:	4926      	ldr	r1, [pc, #152]	; (8001910 <I2C_RequestMemoryWrite+0xd4>)
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff ff06 	bl	800168a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800187e:	b168      	cbz	r0, 800189c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001880:	2001      	movs	r0, #1
 8001882:	e008      	b.n	8001896 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f413 7f80 	tst.w	r3, #256	; 0x100
 800188c:	d002      	beq.n	8001894 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001894:	2003      	movs	r0, #3
}
 8001896:	b005      	add	sp, #20
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189c:	2300      	movs	r3, #0
 800189e:	9303      	str	r3, [sp, #12]
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	9203      	str	r2, [sp, #12]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	9303      	str	r3, [sp, #12]
 80018aa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ac:	4632      	mov	r2, r6
 80018ae:	4641      	mov	r1, r8
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff ff99 	bl	80017e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b6:	b930      	cbnz	r0, 80018c6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018b8:	2f01      	cmp	r7, #1
 80018ba:	d10f      	bne.n	80018dc <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	fa5f f689 	uxtb.w	r6, r9
 80018c2:	611e      	str	r6, [r3, #16]
 80018c4:	e7e7      	b.n	8001896 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d001      	beq.n	80018d0 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80018cc:	2001      	movs	r0, #1
 80018ce:	e7e2      	b.n	8001896 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	6813      	ldr	r3, [r2, #0]
 80018d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e7f7      	b.n	80018cc <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80018e2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e4:	4632      	mov	r2, r6
 80018e6:	4641      	mov	r1, r8
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff ff7d 	bl	80017e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ee:	b920      	cbnz	r0, 80018fa <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	fa5f f689 	uxtb.w	r6, r9
 80018f6:	611e      	str	r6, [r3, #16]
 80018f8:	e7cd      	b.n	8001896 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d001      	beq.n	8001904 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e7c8      	b.n	8001896 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e7f7      	b.n	8001900 <I2C_RequestMemoryWrite+0xc4>
 8001910:	00010002 	.word	0x00010002

08001914 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
 800191a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f013 0f04 	tst.w	r3, #4
 8001924:	d11c      	bne.n	8001960 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff fe5c 	bl	80015e4 <I2C_IsAcknowledgeFailed>
 800192c:	b9d0      	cbnz	r0, 8001964 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800192e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001932:	d0f3      	beq.n	800191c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001934:	f7ff f978 	bl	8000c28 <HAL_GetTick>
 8001938:	1b80      	subs	r0, r0, r6
 800193a:	42a8      	cmp	r0, r5
 800193c:	d801      	bhi.n	8001942 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800193e:	2d00      	cmp	r5, #0
 8001940:	d1ec      	bne.n	800191c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001946:	2220      	movs	r2, #32
 8001948:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800194c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001950:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001958:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800195c:	2001      	movs	r0, #1
 800195e:	e000      	b.n	8001962 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001960:	2000      	movs	r0, #0
}
 8001962:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001964:	2001      	movs	r0, #1
 8001966:	e7fc      	b.n	8001962 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001968 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001968:	2800      	cmp	r0, #0
 800196a:	f000 80cc 	beq.w	8001b06 <HAL_I2C_Init+0x19e>
{
 800196e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001970:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001972:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001976:	2b00      	cmp	r3, #0
 8001978:	d077      	beq.n	8001a6a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800197a:	2324      	movs	r3, #36	; 0x24
 800197c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001992:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800199c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800199e:	f000 fd45 	bl	800242c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a2:	6862      	ldr	r2, [r4, #4]
 80019a4:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <HAL_I2C_Init+0x1a8>)
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d864      	bhi.n	8001a74 <HAL_I2C_Init+0x10c>
 80019aa:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <HAL_I2C_Init+0x1ac>)
 80019ac:	4298      	cmp	r0, r3
 80019ae:	bf8c      	ite	hi
 80019b0:	2300      	movhi	r3, #0
 80019b2:	2301      	movls	r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 80a8 	bne.w	8001b0a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80019ba:	4d57      	ldr	r5, [pc, #348]	; (8001b18 <HAL_I2C_Init+0x1b0>)
 80019bc:	fba5 3500 	umull	r3, r5, r5, r0
 80019c0:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c2:	6826      	ldr	r6, [r4, #0]
 80019c4:	6871      	ldr	r1, [r6, #4]
 80019c6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80019ca:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80019ce:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d0:	6821      	ldr	r1, [r4, #0]
 80019d2:	6a0b      	ldr	r3, [r1, #32]
 80019d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d8:	6865      	ldr	r5, [r4, #4]
 80019da:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <HAL_I2C_Init+0x1a8>)
 80019dc:	4295      	cmp	r5, r2
 80019de:	d84f      	bhi.n	8001a80 <HAL_I2C_Init+0x118>
 80019e0:	1c7a      	adds	r2, r7, #1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e6:	6825      	ldr	r5, [r4, #0]
 80019e8:	69e9      	ldr	r1, [r5, #28]
 80019ea:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80019ee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	4a46      	ldr	r2, [pc, #280]	; (8001b10 <HAL_I2C_Init+0x1a8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d84c      	bhi.n	8001a94 <HAL_I2C_Init+0x12c>
 80019fa:	3801      	subs	r0, #1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a02:	3001      	adds	r0, #1
 8001a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a08:	4218      	tst	r0, r3
 8001a0a:	d078      	beq.n	8001afe <HAL_I2C_Init+0x196>
 8001a0c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a10:	430b      	orrs	r3, r1
 8001a12:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a14:	6821      	ldr	r1, [r4, #0]
 8001a16:	680b      	ldr	r3, [r1, #0]
 8001a18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a1c:	69e2      	ldr	r2, [r4, #28]
 8001a1e:	6a20      	ldr	r0, [r4, #32]
 8001a20:	4302      	orrs	r2, r0
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a26:	6821      	ldr	r1, [r4, #0]
 8001a28:	688b      	ldr	r3, [r1, #8]
 8001a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a32:	6922      	ldr	r2, [r4, #16]
 8001a34:	68e0      	ldr	r0, [r4, #12]
 8001a36:	4302      	orrs	r2, r0
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a3c:	6821      	ldr	r1, [r4, #0]
 8001a3e:	68cb      	ldr	r3, [r1, #12]
 8001a40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a44:	6962      	ldr	r2, [r4, #20]
 8001a46:	69a0      	ldr	r0, [r4, #24]
 8001a48:	4302      	orrs	r2, r0
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	6813      	ldr	r3, [r2, #0]
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	2000      	movs	r0, #0
 8001a5a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a62:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a64:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001a6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001a6e:	f003 fabf 	bl	8004ff0 <HAL_I2C_MspInit>
 8001a72:	e782      	b.n	800197a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <HAL_I2C_Init+0x1b4>)
 8001a76:	4298      	cmp	r0, r3
 8001a78:	bf8c      	ite	hi
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	e799      	b.n	80019b4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a84:	fb02 f207 	mul.w	r2, r2, r7
 8001a88:	4d25      	ldr	r5, [pc, #148]	; (8001b20 <HAL_I2C_Init+0x1b8>)
 8001a8a:	fba5 5202 	umull	r5, r2, r5, r2
 8001a8e:	0992      	lsrs	r2, r2, #6
 8001a90:	3201      	adds	r2, #1
 8001a92:	e7a6      	b.n	80019e2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a94:	68a2      	ldr	r2, [r4, #8]
 8001a96:	b9ba      	cbnz	r2, 8001ac8 <HAL_I2C_Init+0x160>
 8001a98:	1e46      	subs	r6, r0, #1
 8001a9a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001a9e:	fbb6 f6f7 	udiv	r6, r6, r7
 8001aa2:	3601      	adds	r6, #1
 8001aa4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001aa8:	fab6 f686 	clz	r6, r6
 8001aac:	0976      	lsrs	r6, r6, #5
 8001aae:	bb46      	cbnz	r6, 8001b02 <HAL_I2C_Init+0x19a>
 8001ab0:	b9c2      	cbnz	r2, 8001ae4 <HAL_I2C_Init+0x17c>
 8001ab2:	1e42      	subs	r2, r0, #1
 8001ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001abc:	3201      	adds	r2, #1
 8001abe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ac2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001ac6:	e7a3      	b.n	8001a10 <HAL_I2C_Init+0xa8>
 8001ac8:	1e46      	subs	r6, r0, #1
 8001aca:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001ace:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001ad2:	fbb6 f6f7 	udiv	r6, r6, r7
 8001ad6:	3601      	adds	r6, #1
 8001ad8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001adc:	fab6 f686 	clz	r6, r6
 8001ae0:	0976      	lsrs	r6, r6, #5
 8001ae2:	e7e4      	b.n	8001aae <HAL_I2C_Init+0x146>
 8001ae4:	1e42      	subs	r2, r0, #1
 8001ae6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aee:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af2:	3201      	adds	r2, #1
 8001af4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001af8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001afc:	e788      	b.n	8001a10 <HAL_I2C_Init+0xa8>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e786      	b.n	8001a10 <HAL_I2C_Init+0xa8>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e784      	b.n	8001a10 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
}
 8001b08:	4770      	bx	lr
    return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e7ac      	b.n	8001a68 <HAL_I2C_Init+0x100>
 8001b0e:	bf00      	nop
 8001b10:	000186a0 	.word	0x000186a0
 8001b14:	001e847f 	.word	0x001e847f
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	003d08ff 	.word	0x003d08ff
 8001b20:	10624dd3 	.word	0x10624dd3

08001b24 <HAL_I2C_Master_Transmit>:
{
 8001b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	460f      	mov	r7, r1
 8001b2e:	4691      	mov	r9, r2
 8001b30:	4698      	mov	r8, r3
 8001b32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff f878 	bl	8000c28 <HAL_GetTick>
 8001b38:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001b3e:	b2c0      	uxtb	r0, r0
 8001b40:	2820      	cmp	r0, #32
 8001b42:	d004      	beq.n	8001b4e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001b44:	2702      	movs	r7, #2
}
 8001b46:	4638      	mov	r0, r7
 8001b48:	b005      	add	sp, #20
 8001b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4e:	9500      	str	r5, [sp, #0]
 8001b50:	2319      	movs	r3, #25
 8001b52:	2201      	movs	r2, #1
 8001b54:	494f      	ldr	r1, [pc, #316]	; (8001c94 <HAL_I2C_Master_Transmit+0x170>)
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fd5d 	bl	8001616 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	f040 8092 	bne.w	8001c86 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001b62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	f000 808f 	beq.w	8001c8a <HAL_I2C_Master_Transmit+0x166>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f012 0f01 	tst.w	r2, #1
 8001b7a:	d103      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b8c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b8e:	2321      	movs	r3, #33	; 0x21
 8001b90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b94:	2310      	movs	r3, #16
 8001b96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001b9e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ba2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ba6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ba8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_I2C_Master_Transmit+0x174>)
 8001bac:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bae:	462b      	mov	r3, r5
 8001bb0:	4632      	mov	r2, r6
 8001bb2:	4639      	mov	r1, r7
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff fdbd 	bl	8001734 <I2C_MasterRequestWrite>
 8001bba:	4607      	mov	r7, r0
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d166      	bne.n	8001c8e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9303      	str	r3, [sp, #12]
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	9203      	str	r2, [sp, #12]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001bd0:	e011      	b.n	8001bf6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001bd8:	2701      	movs	r7, #1
 8001bda:	e7b4      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e7f7      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be8:	462a      	mov	r2, r5
 8001bea:	4631      	mov	r1, r6
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7ff fe91 	bl	8001914 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d12e      	bne.n	8001c54 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001bf6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d036      	beq.n	8001c6a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4631      	mov	r1, r6
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff fdf1 	bl	80017e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d1e3      	bne.n	8001bd2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c14:	1c4b      	adds	r3, r1, #1
 8001c16:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c2a:	6822      	ldr	r2, [r4, #0]
 8001c2c:	6950      	ldr	r0, [r2, #20]
 8001c2e:	f010 0f04 	tst.w	r0, #4
 8001c32:	d0d9      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0xc4>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0d7      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c38:	784b      	ldrb	r3, [r1, #1]
 8001c3a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c3e:	3301      	adds	r3, #1
 8001c40:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001c4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	8523      	strh	r3, [r4, #40]	; 0x28
 8001c52:	e7c9      	b.n	8001be8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001c5a:	2701      	movs	r7, #1
 8001c5c:	e773      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e7f7      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6a:	6822      	ldr	r2, [r4, #0]
 8001c6c:	6813      	ldr	r3, [r2, #0]
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c72:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	2320      	movs	r3, #32
 8001c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001c80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001c84:	e75f      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001c86:	2702      	movs	r7, #2
 8001c88:	e75d      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001c8a:	2702      	movs	r7, #2
 8001c8c:	e75b      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001c8e:	2701      	movs	r7, #1
 8001c90:	e759      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x22>
 8001c92:	bf00      	nop
 8001c94:	00100002 	.word	0x00100002
 8001c98:	ffff0000 	.word	0xffff0000

08001c9c <HAL_I2C_Mem_Write>:
{
 8001c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460f      	mov	r7, r1
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7fe ffbc 	bl	8000c28 <HAL_GetTick>
 8001cb0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001cb6:	b2c0      	uxtb	r0, r0
 8001cb8:	2820      	cmp	r0, #32
 8001cba:	d003      	beq.n	8001cc4 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001cbc:	2002      	movs	r0, #2
}
 8001cbe:	b003      	add	sp, #12
 8001cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cc4:	9500      	str	r5, [sp, #0]
 8001cc6:	2319      	movs	r3, #25
 8001cc8:	2201      	movs	r2, #1
 8001cca:	494b      	ldr	r1, [pc, #300]	; (8001df8 <HAL_I2C_Mem_Write+0x15c>)
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff fca2 	bl	8001616 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	f040 8089 	bne.w	8001dea <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001cd8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f000 8086 	beq.w	8001dee <HAL_I2C_Mem_Write+0x152>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f012 0f01 	tst.w	r2, #1
 8001cf0:	d103      	bne.n	8001cfa <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cfa:	6822      	ldr	r2, [r4, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d02:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d04:	2321      	movs	r3, #33	; 0x21
 8001d06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d0a:	2340      	movs	r3, #64	; 0x40
 8001d0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d16:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d18:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001d1c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d20:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_I2C_Mem_Write+0x160>)
 8001d24:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d26:	9501      	str	r5, [sp, #4]
 8001d28:	9600      	str	r6, [sp, #0]
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	4639      	mov	r1, r7
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff fd83 	bl	800183c <I2C_RequestMemoryWrite>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d15b      	bne.n	8001df2 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8001d3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d035      	beq.n	8001dac <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	462a      	mov	r2, r5
 8001d42:	4631      	mov	r1, r6
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7ff fd4f 	bl	80017e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4a:	bb20      	cbnz	r0, 8001d96 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d56:	1c4b      	adds	r3, r1, #1
 8001d58:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001d5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001d62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	6958      	ldr	r0, [r3, #20]
 8001d70:	f010 0f04 	tst.w	r0, #4
 8001d74:	d0e1      	beq.n	8001d3a <HAL_I2C_Mem_Write+0x9e>
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d0df      	beq.n	8001d3a <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7a:	784a      	ldrb	r2, [r1, #1]
 8001d7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001d84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001d94:	e7d1      	b.n	8001d3a <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	e78e      	b.n	8001cbe <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e7f7      	b.n	8001d9c <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	462a      	mov	r2, r5
 8001dae:	4631      	mov	r1, r6
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fdaf 	bl	8001914 <I2C_WaitOnBTFFlagUntilTimeout>
 8001db6:	b150      	cbz	r0, 8001dce <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	e77d      	b.n	8001cbe <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	6822      	ldr	r2, [r4, #0]
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e7f7      	b.n	8001dbe <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	6822      	ldr	r2, [r4, #0]
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001de4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001de8:	e769      	b.n	8001cbe <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8001dea:	2002      	movs	r0, #2
 8001dec:	e767      	b.n	8001cbe <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001dee:	2002      	movs	r0, #2
 8001df0:	e765      	b.n	8001cbe <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001df2:	2001      	movs	r0, #1
 8001df4:	e763      	b.n	8001cbe <HAL_I2C_Mem_Write+0x22>
 8001df6:	bf00      	nop
 8001df8:	00100002 	.word	0x00100002
 8001dfc:	ffff0000 	.word	0xffff0000

08001e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e00:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <RCC_Delay+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <RCC_Delay+0x28>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	fb00 f303 	mul.w	r3, r0, r3
 8001e12:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e14:	bf00      	nop
  }
  while (Delay --);
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	9201      	str	r2, [sp, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <RCC_Delay+0x14>
}
 8001e20:	b002      	add	sp, #8
 8001e22:	4770      	bx	lr
 8001e24:	20000048 	.word	0x20000048
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	f000 81f1 	beq.w	8002214 <HAL_RCC_OscConfig+0x3e8>
{
 8001e32:	b570      	push	{r4, r5, r6, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e38:	6803      	ldr	r3, [r0, #0]
 8001e3a:	f013 0f01 	tst.w	r3, #1
 8001e3e:	d02c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4baa      	ldr	r3, [pc, #680]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d01d      	beq.n	8001e88 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	4ba7      	ldr	r3, [pc, #668]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d012      	beq.n	8001e7e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	6863      	ldr	r3, [r4, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d041      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xb8>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d155      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe4>
 8001e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e037      	b.n	8001eee <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7e:	4b9b      	ldr	r3, [pc, #620]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e86:	d0e7      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	4b98      	ldr	r3, [pc, #608]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_OscConfig+0x6e>
 8001e92:	6863      	ldr	r3, [r4, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 81bf 	beq.w	8002218 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	f013 0f02 	tst.w	r3, #2
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea2:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f013 0f0c 	tst.w	r3, #12
 8001eaa:	d05f      	beq.n	8001f6c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d054      	beq.n	8001f62 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb8:	6923      	ldr	r3, [r4, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8089 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b8b      	ldr	r3, [pc, #556]	; (80020f0 <HAL_RCC_OscConfig+0x2c4>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ec6:	f7fe feaf 	bl	8000c28 <HAL_GetTick>
 8001eca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b87      	ldr	r3, [pc, #540]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f013 0f02 	tst.w	r3, #2
 8001ed4:	d174      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7fe fea7 	bl	8000c28 <HAL_GetTick>
 8001eda:	1b40      	subs	r0, r0, r5
 8001edc:	2802      	cmp	r0, #2
 8001ede:	d9f5      	bls.n	8001ecc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	e19e      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	4a81      	ldr	r2, [pc, #516]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eee:	6863      	ldr	r3, [r4, #4]
 8001ef0:	b343      	cbz	r3, 8001f44 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fe99 	bl	8000c28 <HAL_GetTick>
 8001ef6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef8:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f00:	d1cb      	bne.n	8001e9a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f02:	f7fe fe91 	bl	8000c28 <HAL_GetTick>
 8001f06:	1b40      	subs	r0, r0, r5
 8001f08:	2864      	cmp	r0, #100	; 0x64
 8001f0a:	d9f5      	bls.n	8001ef8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	e188      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_OscConfig+0xfe>
 8001f16:	4b75      	ldr	r3, [pc, #468]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e7e1      	b.n	8001eee <HAL_RCC_OscConfig+0xc2>
 8001f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f2e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e7d4      	b.n	8001eee <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001f44:	f7fe fe70 	bl	8000c28 <HAL_GetTick>
 8001f48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f52:	d0a2      	beq.n	8001e9a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe fe68 	bl	8000c28 <HAL_GetTick>
 8001f58:	1b40      	subs	r0, r0, r5
 8001f5a:	2864      	cmp	r0, #100	; 0x64
 8001f5c:	d9f5      	bls.n	8001f4a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001f5e:	2003      	movs	r0, #3
 8001f60:	e15f      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f62:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f6a:	d1a5      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6c:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f013 0f02 	tst.w	r3, #2
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
 8001f76:	6923      	ldr	r3, [r4, #16]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	f040 814f 	bne.w	800221c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f86:	6961      	ldr	r1, [r4, #20]
 8001f88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f8c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f013 0f08 	tst.w	r3, #8
 8001f94:	d032      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	69a3      	ldr	r3, [r4, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d045      	beq.n	8002028 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCC_OscConfig+0x2c8>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fe41 	bl	8000c28 <HAL_GetTick>
 8001fa6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f013 0f02 	tst.w	r3, #2
 8001fb0:	d121      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7fe fe39 	bl	8000c28 <HAL_GetTick>
 8001fb6:	1b40      	subs	r0, r0, r5
 8001fb8:	2802      	cmp	r0, #2
 8001fba:	d9f5      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	e130      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fc8:	6961      	ldr	r1, [r4, #20]
 8001fca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e7dd      	b.n	8001f8e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_OscConfig+0x2c4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fe26 	bl	8000c28 <HAL_GetTick>
 8001fdc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f013 0f02 	tst.w	r3, #2
 8001fe6:	d0d2      	beq.n	8001f8e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fe1e 	bl	8000c28 <HAL_GetTick>
 8001fec:	1b40      	subs	r0, r0, r5
 8001fee:	2802      	cmp	r0, #2
 8001ff0:	d9f5      	bls.n	8001fde <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	e115      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff ff02 	bl	8001e00 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	f013 0f04 	tst.w	r3, #4
 8002002:	f000 8097 	beq.w	8002134 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800200e:	d11d      	bne.n	800204c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002018:	61da      	str	r2, [r3, #28]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002024:	2501      	movs	r5, #1
 8002026:	e012      	b.n	800204e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8002028:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_RCC_OscConfig+0x2c8>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800202e:	f7fe fdfb 	bl	8000c28 <HAL_GetTick>
 8002032:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f013 0f02 	tst.w	r3, #2
 800203c:	d0de      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe fdf3 	bl	8000c28 <HAL_GetTick>
 8002042:	1b40      	subs	r0, r0, r5
 8002044:	2802      	cmp	r0, #2
 8002046:	d9f5      	bls.n	8002034 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8002048:	2003      	movs	r0, #3
 800204a:	e0ea      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 800204c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_OscConfig+0x2cc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002056:	d011      	beq.n	800207c <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	68e3      	ldr	r3, [r4, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d022      	beq.n	80020a4 <HAL_RCC_OscConfig+0x278>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d138      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2a8>
 8002062:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002066:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	621a      	str	r2, [r3, #32]
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	f022 0204 	bic.w	r2, r2, #4
 8002078:	621a      	str	r2, [r3, #32]
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_RCC_OscConfig+0x2cc>)
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002086:	f7fe fdcf 	bl	8000c28 <HAL_GetTick>
 800208a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_OscConfig+0x2cc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002094:	d1e0      	bne.n	8002058 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe fdc7 	bl	8000c28 <HAL_GetTick>
 800209a:	1b80      	subs	r0, r0, r6
 800209c:	2864      	cmp	r0, #100	; 0x64
 800209e:	d9f5      	bls.n	800208c <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 80020a0:	2003      	movs	r0, #3
 80020a2:	e0be      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 80020a6:	6a13      	ldr	r3, [r2, #32]
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ae:	68e3      	ldr	r3, [r4, #12]
 80020b0:	b373      	cbz	r3, 8002110 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80020b2:	f7fe fdb9 	bl	8000c28 <HAL_GetTick>
 80020b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f013 0f02 	tst.w	r3, #2
 80020c0:	d137      	bne.n	8002132 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe fdb1 	bl	8000c28 <HAL_GetTick>
 80020c6:	1b80      	subs	r0, r0, r6
 80020c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80020cc:	4298      	cmp	r0, r3
 80020ce:	d9f3      	bls.n	80020b8 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 80020d0:	2003      	movs	r0, #3
 80020d2:	e0a6      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d011      	beq.n	80020fc <HAL_RCC_OscConfig+0x2d0>
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCC_OscConfig+0x2c0>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	621a      	str	r2, [r3, #32]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	f022 0204 	bic.w	r2, r2, #4
 80020e8:	621a      	str	r2, [r3, #32]
 80020ea:	e7e0      	b.n	80020ae <HAL_RCC_OscConfig+0x282>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42420000 	.word	0x42420000
 80020f4:	42420480 	.word	0x42420480
 80020f8:	40007000 	.word	0x40007000
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	f042 0204 	orr.w	r2, r2, #4
 8002104:	621a      	str	r2, [r3, #32]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	621a      	str	r2, [r3, #32]
 800210e:	e7ce      	b.n	80020ae <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8002110:	f7fe fd8a 	bl	8000c28 <HAL_GetTick>
 8002114:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f013 0f02 	tst.w	r3, #2
 800211e:	d008      	beq.n	8002132 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe fd82 	bl	8000c28 <HAL_GetTick>
 8002124:	1b80      	subs	r0, r0, r6
 8002126:	f241 3388 	movw	r3, #5000	; 0x1388
 800212a:	4298      	cmp	r0, r3
 800212c:	d9f3      	bls.n	8002116 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800212e:	2003      	movs	r0, #3
 8002130:	e077      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002132:	b9e5      	cbnz	r5, 800216e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002134:	69e3      	ldr	r3, [r4, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d072      	beq.n	8002220 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 800213c:	6852      	ldr	r2, [r2, #4]
 800213e:	f002 020c 	and.w	r2, r2, #12
 8002142:	2a08      	cmp	r2, #8
 8002144:	d056      	beq.n	80021f4 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	2b02      	cmp	r3, #2
 8002148:	d017      	beq.n	800217a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCC_OscConfig+0x40c>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002150:	f7fe fd6a 	bl	8000c28 <HAL_GetTick>
 8002154:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800215e:	d047      	beq.n	80021f0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fd62 	bl	8000c28 <HAL_GetTick>
 8002164:	1b00      	subs	r0, r0, r4
 8002166:	2802      	cmp	r0, #2
 8002168:	d9f5      	bls.n	8002156 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
 800216c:	e059      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 8002170:	69d3      	ldr	r3, [r2, #28]
 8002172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002176:	61d3      	str	r3, [r2, #28]
 8002178:	e7dc      	b.n	8002134 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCC_OscConfig+0x40c>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002180:	f7fe fd52 	bl	8000c28 <HAL_GetTick>
 8002184:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800218e:	d006      	beq.n	800219e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fd4a 	bl	8000c28 <HAL_GetTick>
 8002194:	1b40      	subs	r0, r0, r5
 8002196:	2802      	cmp	r0, #2
 8002198:	d9f5      	bls.n	8002186 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800219a:	2003      	movs	r0, #3
 800219c:	e041      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800219e:	6a23      	ldr	r3, [r4, #32]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d01a      	beq.n	80021dc <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a6:	4923      	ldr	r1, [pc, #140]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 80021a8:	684b      	ldr	r3, [r1, #4]
 80021aa:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80021ae:	6a22      	ldr	r2, [r4, #32]
 80021b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80021b2:	4302      	orrs	r2, r0
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <HAL_RCC_OscConfig+0x40c>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021be:	f7fe fd33 	bl	8000c28 <HAL_GetTick>
 80021c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021cc:	d10e      	bne.n	80021ec <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fd2b 	bl	8000c28 <HAL_GetTick>
 80021d2:	1b00      	subs	r0, r0, r4
 80021d4:	2802      	cmp	r0, #2
 80021d6:	d9f5      	bls.n	80021c4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80021d8:	2003      	movs	r0, #3
 80021da:	e022      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 80021de:	6853      	ldr	r3, [r2, #4]
 80021e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80021e4:	68a1      	ldr	r1, [r4, #8]
 80021e6:	430b      	orrs	r3, r1
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	e7dc      	b.n	80021a6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80021ec:	2000      	movs	r0, #0
 80021ee:	e018      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
 80021f0:	2000      	movs	r0, #0
 80021f2:	e016      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d016      	beq.n	8002226 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_RCC_OscConfig+0x408>)
 80021fa:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002200:	6a22      	ldr	r2, [r4, #32]
 8002202:	4291      	cmp	r1, r2
 8002204:	d111      	bne.n	800222a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002206:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800220a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d10e      	bne.n	800222e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002210:	2000      	movs	r0, #0
 8002212:	e006      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002214:	2001      	movs	r0, #1
}
 8002216:	4770      	bx	lr
        return HAL_ERROR;
 8002218:	2001      	movs	r0, #1
 800221a:	e002      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800221c:	2001      	movs	r0, #1
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002220:	2000      	movs	r0, #0
}
 8002222:	b002      	add	sp, #8
 8002224:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002226:	2001      	movs	r0, #1
 8002228:	e7fb      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
 800222c:	e7f9      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
 800222e:	2001      	movs	r0, #1
 8002230:	e7f7      	b.n	8002222 <HAL_RCC_OscConfig+0x3f6>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	42420060 	.word	0x42420060

0800223c <HAL_RCC_GetSysClockFreq>:
{
 800223c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x64>)
 8002240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002242:	f10d 0c18 	add.w	ip, sp, #24
 8002246:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800224a:	f240 2301 	movw	r3, #513	; 0x201
 800224e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x68>)
 8002254:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002256:	f002 030c 	and.w	r3, r2, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d01a      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x58>
 800225e:	2b08      	cmp	r3, #8
 8002260:	d11a      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x5c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002262:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002266:	4463      	add	r3, ip
 8002268:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002270:	d00c      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x50>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x68>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800227a:	4463      	add	r3, ip
 800227c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002280:	4809      	ldr	r0, [pc, #36]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002282:	fb00 f001 	mul.w	r0, r0, r1
 8002286:	fbb0 f0f3 	udiv	r0, r0, r3
 800228a:	e006      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x5e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <HAL_RCC_GetSysClockFreq+0x70>)
 800228e:	fb00 f001 	mul.w	r0, r0, r1
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x5e>
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002296:	e000      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x5e>
      sysclockfreq = HSI_VALUE;
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x74>)
}
 800229a:	b006      	add	sp, #24
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	08008618 	.word	0x08008618
 80022a4:	40021000 	.word	0x40021000
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	003d0900 	.word	0x003d0900
 80022b0:	007a1200 	.word	0x007a1200

080022b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80022b4:	2800      	cmp	r0, #0
 80022b6:	f000 80a0 	beq.w	80023fa <HAL_RCC_ClockConfig+0x146>
{
 80022ba:	b570      	push	{r4, r5, r6, lr}
 80022bc:	460d      	mov	r5, r1
 80022be:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b52      	ldr	r3, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x158>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	428b      	cmp	r3, r1
 80022ca:	d20b      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022cc:	4a4f      	ldr	r2, [pc, #316]	; (800240c <HAL_RCC_ClockConfig+0x158>)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f023 0307 	bic.w	r3, r3, #7
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d8:	6813      	ldr	r3, [r2, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	428b      	cmp	r3, r1
 80022e0:	f040 808d 	bne.w	80023fe <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	f013 0f02 	tst.w	r3, #2
 80022ea:	d017      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	f013 0f04 	tst.w	r3, #4
 80022f0:	d004      	beq.n	80022fc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f2:	4a47      	ldr	r2, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 80022f4:	6853      	ldr	r3, [r2, #4]
 80022f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022fa:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	f013 0f08 	tst.w	r3, #8
 8002302:	d004      	beq.n	800230e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 8002306:	6853      	ldr	r3, [r2, #4]
 8002308:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800230c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230e:	4a40      	ldr	r2, [pc, #256]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 8002310:	6853      	ldr	r3, [r2, #4]
 8002312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002316:	68a1      	ldr	r1, [r4, #8]
 8002318:	430b      	orrs	r3, r1
 800231a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	f013 0f01 	tst.w	r3, #1
 8002322:	d031      	beq.n	8002388 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d020      	beq.n	800236c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232a:	2b02      	cmp	r3, #2
 800232c:	d025      	beq.n	800237a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4a38      	ldr	r2, [pc, #224]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	f012 0f02 	tst.w	r2, #2
 8002336:	d064      	beq.n	8002402 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002338:	4935      	ldr	r1, [pc, #212]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 800233a:	684a      	ldr	r2, [r1, #4]
 800233c:	f022 0203 	bic.w	r2, r2, #3
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002344:	f7fe fc70 	bl	8000c28 <HAL_GetTick>
 8002348:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	6862      	ldr	r2, [r4, #4]
 8002354:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002358:	d016      	beq.n	8002388 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fe fc65 	bl	8000c28 <HAL_GetTick>
 800235e:	1b80      	subs	r0, r0, r6
 8002360:	f241 3388 	movw	r3, #5000	; 0x1388
 8002364:	4298      	cmp	r0, r3
 8002366:	d9f0      	bls.n	800234a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002368:	2003      	movs	r0, #3
 800236a:	e045      	b.n	80023f8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236c:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002374:	d1e0      	bne.n	8002338 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002376:	2001      	movs	r0, #1
 8002378:	e03e      	b.n	80023f8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002382:	d1d9      	bne.n	8002338 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
 8002386:	e037      	b.n	80023f8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x158>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	42ab      	cmp	r3, r5
 8002392:	d90a      	bls.n	80023aa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_RCC_ClockConfig+0x158>)
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	f023 0307 	bic.w	r3, r3, #7
 800239c:	432b      	orrs	r3, r5
 800239e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a0:	6813      	ldr	r3, [r2, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	42ab      	cmp	r3, r5
 80023a8:	d12d      	bne.n	8002406 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	f013 0f04 	tst.w	r3, #4
 80023b0:	d006      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 80023b4:	6853      	ldr	r3, [r2, #4]
 80023b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023ba:	68e1      	ldr	r1, [r4, #12]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f013 0f08 	tst.w	r3, #8
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 80023ca:	6853      	ldr	r3, [r2, #4]
 80023cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023d0:	6921      	ldr	r1, [r4, #16]
 80023d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023d6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d8:	f7ff ff30 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_ClockConfig+0x15c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023e4:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x160>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	40d8      	lsrs	r0, r3
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_ClockConfig+0x164>)
 80023ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x168>)
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f7fe fbd5 	bl	8000ba0 <HAL_InitTick>
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
}
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
}
 80023fc:	4770      	bx	lr
    return HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
 8002400:	e7fa      	b.n	80023f8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002402:	2001      	movs	r0, #1
 8002404:	e7f8      	b.n	80023f8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002406:	2001      	movs	r0, #1
 8002408:	e7f6      	b.n	80023f8 <HAL_RCC_ClockConfig+0x144>
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	0800c578 	.word	0x0800c578
 8002418:	20000048 	.word	0x20000048
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetHCLKFreq>:
}
 8002420:	4b01      	ldr	r3, [pc, #4]	; (8002428 <HAL_RCC_GetHCLKFreq+0x8>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000048 	.word	0x20000048

0800242c <HAL_RCC_GetPCLK1Freq>:
{
 800242c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800242e:	f7ff fff7 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800243a:	4a03      	ldr	r2, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
}
 800243e:	40d8      	lsrs	r0, r3
 8002440:	bd08      	pop	{r3, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	0800c588 	.word	0x0800c588

0800244c <HAL_RCC_GetPCLK2Freq>:
{
 800244c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800244e:	f7ff ffe7 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800245a:	4a03      	ldr	r2, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
}
 800245e:	40d8      	lsrs	r0, r3
 8002460:	bd08      	pop	{r3, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	0800c588 	.word	0x0800c588

0800246c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	4605      	mov	r5, r0
 8002474:	4688      	mov	r8, r1
 8002476:	4617      	mov	r7, r2
 8002478:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800247a:	f7fe fbd5 	bl	8000c28 <HAL_GetTick>
 800247e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002486:	f7fe fbcf 	bl	8000c28 <HAL_GetTick>
 800248a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002494:	fb09 f303 	mul.w	r3, r9, r3
 8002498:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249a:	682b      	ldr	r3, [r5, #0]
 800249c:	689c      	ldr	r4, [r3, #8]
 800249e:	ea38 0304 	bics.w	r3, r8, r4
 80024a2:	bf0c      	ite	eq
 80024a4:	2401      	moveq	r4, #1
 80024a6:	2400      	movne	r4, #0
 80024a8:	42bc      	cmp	r4, r7
 80024aa:	d040      	beq.n	800252e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80024b0:	d0f3      	beq.n	800249a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024b2:	f7fe fbb9 	bl	8000c28 <HAL_GetTick>
 80024b6:	eba0 000a 	sub.w	r0, r0, sl
 80024ba:	4548      	cmp	r0, r9
 80024bc:	d20a      	bcs.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x68>
 80024be:	f1b9 0f00 	cmp.w	r9, #0
 80024c2:	d007      	beq.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024c4:	9a01      	ldr	r2, [sp, #4]
 80024c6:	b102      	cbz	r2, 80024ca <SPI_WaitFlagStateUntilTimeout+0x5e>
 80024c8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80024ca:	9b01      	ldr	r3, [sp, #4]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	4691      	mov	r9, r2
 80024d2:	e7e2      	b.n	800249a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024d4:	682a      	ldr	r2, [r5, #0]
 80024d6:	6853      	ldr	r3, [r2, #4]
 80024d8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80024dc:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024de:	686b      	ldr	r3, [r5, #4]
 80024e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e4:	d00b      	beq.n	80024fe <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80024e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ec:	d014      	beq.n	8002518 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80024f4:	2300      	movs	r3, #0
 80024f6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80024fa:	2003      	movs	r0, #3
 80024fc:	e018      	b.n	8002530 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024fe:	68ab      	ldr	r3, [r5, #8]
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002504:	d002      	beq.n	800250c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250a:	d1ec      	bne.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800250c:	682a      	ldr	r2, [r5, #0]
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e7e6      	b.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8002518:	682a      	ldr	r2, [r5, #0]
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	682a      	ldr	r2, [r5, #0]
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e7df      	b.n	80024ee <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800252e:	2000      	movs	r0, #0
}
 8002530:	b002      	add	sp, #8
 8002532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002536:	bf00      	nop
 8002538:	20000048 	.word	0x20000048

0800253c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b510      	push	{r4, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	4604      	mov	r4, r0
 8002542:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	f7ff ff8f 	bl	800246c <SPI_WaitFlagStateUntilTimeout>
 800254e:	b908      	cbnz	r0, 8002554 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002550:	b002      	add	sp, #8
 8002552:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002554:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002556:	f043 0320 	orr.w	r3, r3, #32
 800255a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800255c:	2003      	movs	r0, #3
 800255e:	e7f7      	b.n	8002550 <SPI_EndRxTxTransaction+0x14>

08002560 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002560:	2800      	cmp	r0, #0
 8002562:	d056      	beq.n	8002612 <HAL_SPI_Init+0xb2>
{
 8002564:	b510      	push	{r4, lr}
 8002566:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002568:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800256a:	b933      	cbnz	r3, 800257a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800256c:	6843      	ldr	r3, [r0, #4]
 800256e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002572:	d005      	beq.n	8002580 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002574:	2300      	movs	r3, #0
 8002576:	61c3      	str	r3, [r0, #28]
 8002578:	e002      	b.n	8002580 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800257e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002584:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002588:	2b00      	cmp	r3, #0
 800258a:	d03c      	beq.n	8002606 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800259a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80025a2:	68a2      	ldr	r2, [r4, #8]
 80025a4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80025a8:	4313      	orrs	r3, r2
 80025aa:	68e2      	ldr	r2, [r4, #12]
 80025ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025b0:	4313      	orrs	r3, r2
 80025b2:	6922      	ldr	r2, [r4, #16]
 80025b4:	f002 0202 	and.w	r2, r2, #2
 80025b8:	4313      	orrs	r3, r2
 80025ba:	6962      	ldr	r2, [r4, #20]
 80025bc:	f002 0201 	and.w	r2, r2, #1
 80025c0:	4313      	orrs	r3, r2
 80025c2:	69a2      	ldr	r2, [r4, #24]
 80025c4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80025c8:	4313      	orrs	r3, r2
 80025ca:	69e2      	ldr	r2, [r4, #28]
 80025cc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80025d0:	4313      	orrs	r3, r2
 80025d2:	6a22      	ldr	r2, [r4, #32]
 80025d4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80025d8:	4313      	orrs	r3, r2
 80025da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025e0:	6821      	ldr	r1, [r4, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025e6:	8b63      	ldrh	r3, [r4, #26]
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025f0:	6822      	ldr	r2, [r4, #0]
 80025f2:	69d3      	ldr	r3, [r2, #28]
 80025f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025fa:	2000      	movs	r0, #0
 80025fc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025fe:	2301      	movs	r3, #1
 8002600:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002604:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002606:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800260a:	4620      	mov	r0, r4
 800260c:	f002 fdd0 	bl	80051b0 <HAL_SPI_MspInit>
 8002610:	e7bc      	b.n	800258c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
}
 8002614:	4770      	bx	lr

08002616 <HAL_SPI_Transmit>:
{
 8002616:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800261a:	b083      	sub	sp, #12
 800261c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800261e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002622:	2b01      	cmp	r3, #1
 8002624:	f000 80cc 	beq.w	80027c0 <HAL_SPI_Transmit+0x1aa>
 8002628:	4604      	mov	r4, r0
 800262a:	4688      	mov	r8, r1
 800262c:	4691      	mov	r9, r2
 800262e:	2301      	movs	r3, #1
 8002630:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002634:	f7fe faf8 	bl	8000c28 <HAL_GetTick>
 8002638:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800263a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800263e:	b2f6      	uxtb	r6, r6
 8002640:	2e01      	cmp	r6, #1
 8002642:	f040 80aa 	bne.w	800279a <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 8002646:	f1b8 0f00 	cmp.w	r8, #0
 800264a:	f000 80a7 	beq.w	800279c <HAL_SPI_Transmit+0x186>
 800264e:	f1b9 0f00 	cmp.w	r9, #0
 8002652:	f000 80a3 	beq.w	800279c <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002656:	2303      	movs	r3, #3
 8002658:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002660:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002664:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002668:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800266c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800266e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002670:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002672:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002674:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002676:	68a3      	ldr	r3, [r4, #8]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	d01e      	beq.n	80026bc <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002686:	d103      	bne.n	8002690 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002690:	68e3      	ldr	r3, [r4, #12]
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002696:	d01c      	beq.n	80026d2 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002698:	6863      	ldr	r3, [r4, #4]
 800269a:	b113      	cbz	r3, 80026a2 <HAL_SPI_Transmit+0x8c>
 800269c:	f1b9 0f01 	cmp.w	r9, #1
 80026a0:	d152      	bne.n	8002748 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ac:	3301      	adds	r3, #1
 80026ae:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80026b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80026ba:	e045      	b.n	8002748 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e7d5      	b.n	800267e <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	b113      	cbz	r3, 80026dc <HAL_SPI_Transmit+0xc6>
 80026d6:	f1b9 0f01 	cmp.w	r9, #1
 80026da:	d116      	bne.n	800270a <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026e6:	3302      	adds	r3, #2
 80026e8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80026ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80026f4:	e009      	b.n	800270a <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f6:	f7fe fa97 	bl	8000c28 <HAL_GetTick>
 80026fa:	1bc0      	subs	r0, r0, r7
 80026fc:	42a8      	cmp	r0, r5
 80026fe:	d302      	bcc.n	8002706 <HAL_SPI_Transmit+0xf0>
 8002700:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002704:	d154      	bne.n	80027b0 <HAL_SPI_Transmit+0x19a>
 8002706:	2d00      	cmp	r5, #0
 8002708:	d054      	beq.n	80027b4 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 800270a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02e      	beq.n	8002770 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	f012 0f02 	tst.w	r2, #2
 800271a:	d0ec      	beq.n	80026f6 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800271e:	8812      	ldrh	r2, [r2, #0]
 8002720:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002722:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002724:	3302      	adds	r3, #2
 8002726:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002728:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002732:	e7ea      	b.n	800270a <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002734:	f7fe fa78 	bl	8000c28 <HAL_GetTick>
 8002738:	1bc0      	subs	r0, r0, r7
 800273a:	42a8      	cmp	r0, r5
 800273c:	d302      	bcc.n	8002744 <HAL_SPI_Transmit+0x12e>
 800273e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002742:	d139      	bne.n	80027b8 <HAL_SPI_Transmit+0x1a2>
 8002744:	2d00      	cmp	r5, #0
 8002746:	d039      	beq.n	80027bc <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8002748:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	b183      	cbz	r3, 8002770 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	f012 0f02 	tst.w	r2, #2
 8002756:	d0ed      	beq.n	8002734 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002758:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800275a:	7812      	ldrb	r2, [r2, #0]
 800275c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800275e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002760:	3301      	adds	r3, #1
 8002762:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002764:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002766:	b292      	uxth	r2, r2
 8002768:	3a01      	subs	r2, #1
 800276a:	b292      	uxth	r2, r2
 800276c:	86e2      	strh	r2, [r4, #54]	; 0x36
 800276e:	e7eb      	b.n	8002748 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002770:	463a      	mov	r2, r7
 8002772:	4629      	mov	r1, r5
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff fee1 	bl	800253c <SPI_EndRxTxTransaction>
 800277a:	b108      	cbz	r0, 8002780 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800277c:	2320      	movs	r3, #32
 800277e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002780:	68a3      	ldr	r3, [r4, #8]
 8002782:	b933      	cbnz	r3, 8002792 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	9201      	str	r2, [sp, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002792:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002794:	b913      	cbnz	r3, 800279c <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002796:	2600      	movs	r6, #0
 8002798:	e000      	b.n	800279c <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 800279a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800279c:	2301      	movs	r3, #1
 800279e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027a2:	2300      	movs	r3, #0
 80027a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80027a8:	4630      	mov	r0, r6
 80027aa:	b003      	add	sp, #12
 80027ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80027b0:	2603      	movs	r6, #3
 80027b2:	e7f3      	b.n	800279c <HAL_SPI_Transmit+0x186>
 80027b4:	2603      	movs	r6, #3
 80027b6:	e7f1      	b.n	800279c <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 80027b8:	2603      	movs	r6, #3
 80027ba:	e7ef      	b.n	800279c <HAL_SPI_Transmit+0x186>
 80027bc:	2603      	movs	r6, #3
 80027be:	e7ed      	b.n	800279c <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 80027c0:	2602      	movs	r6, #2
 80027c2:	e7f1      	b.n	80027a8 <HAL_SPI_Transmit+0x192>

080027c4 <HAL_SPI_GetState>:
  return hspi->State;
 80027c4:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80027c8:	4770      	bx	lr
	...

080027cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ce:	6a03      	ldr	r3, [r0, #32]
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027da:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027dc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e0:	680b      	ldr	r3, [r1, #0]
 80027e2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027e4:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027e8:	688b      	ldr	r3, [r1, #8]
 80027ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ec:	4d10      	ldr	r5, [pc, #64]	; (8002830 <TIM_OC1_SetConfig+0x64>)
 80027ee:	42a8      	cmp	r0, r5
 80027f0:	d003      	beq.n	80027fa <TIM_OC1_SetConfig+0x2e>
 80027f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80027f6:	42a8      	cmp	r0, r5
 80027f8:	d105      	bne.n	8002806 <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027fa:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027fe:	68cd      	ldr	r5, [r1, #12]
 8002800:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002802:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002806:	4d0a      	ldr	r5, [pc, #40]	; (8002830 <TIM_OC1_SetConfig+0x64>)
 8002808:	42a8      	cmp	r0, r5
 800280a:	d003      	beq.n	8002814 <TIM_OC1_SetConfig+0x48>
 800280c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002810:	42a8      	cmp	r0, r5
 8002812:	d105      	bne.n	8002820 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002814:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002818:	694d      	ldr	r5, [r1, #20]
 800281a:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800281c:	698a      	ldr	r2, [r1, #24]
 800281e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002820:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002822:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002824:	684a      	ldr	r2, [r1, #4]
 8002826:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002828:	6203      	str	r3, [r0, #32]
}
 800282a:	bc30      	pop	{r4, r5}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40012c00 	.word	0x40012c00

08002834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002836:	6a03      	ldr	r3, [r0, #32]
 8002838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800283c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002842:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002844:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002848:	680d      	ldr	r5, [r1, #0]
 800284a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800284c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002850:	688d      	ldr	r5, [r1, #8]
 8002852:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002856:	4d12      	ldr	r5, [pc, #72]	; (80028a0 <TIM_OC3_SetConfig+0x6c>)
 8002858:	42a8      	cmp	r0, r5
 800285a:	d003      	beq.n	8002864 <TIM_OC3_SetConfig+0x30>
 800285c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002860:	42a8      	cmp	r0, r5
 8002862:	d106      	bne.n	8002872 <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002868:	68cd      	ldr	r5, [r1, #12]
 800286a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800286e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002872:	4d0b      	ldr	r5, [pc, #44]	; (80028a0 <TIM_OC3_SetConfig+0x6c>)
 8002874:	42a8      	cmp	r0, r5
 8002876:	d003      	beq.n	8002880 <TIM_OC3_SetConfig+0x4c>
 8002878:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800287c:	42a8      	cmp	r0, r5
 800287e:	d107      	bne.n	8002890 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002880:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002884:	694d      	ldr	r5, [r1, #20]
 8002886:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800288a:	698d      	ldr	r5, [r1, #24]
 800288c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002890:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002892:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002894:	684a      	ldr	r2, [r1, #4]
 8002896:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002898:	6203      	str	r3, [r0, #32]
}
 800289a:	bc30      	pop	{r4, r5}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40012c00 	.word	0x40012c00

080028a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028a6:	6a03      	ldr	r3, [r0, #32]
 80028a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b8:	680d      	ldr	r5, [r1, #0]
 80028ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028c2:	688d      	ldr	r5, [r1, #8]
 80028c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c8:	4d09      	ldr	r5, [pc, #36]	; (80028f0 <TIM_OC4_SetConfig+0x4c>)
 80028ca:	42a8      	cmp	r0, r5
 80028cc:	d003      	beq.n	80028d6 <TIM_OC4_SetConfig+0x32>
 80028ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80028d2:	42a8      	cmp	r0, r5
 80028d4:	d104      	bne.n	80028e0 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028d6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028da:	694d      	ldr	r5, [r1, #20]
 80028dc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028e4:	684a      	ldr	r2, [r1, #4]
 80028e6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e8:	6203      	str	r3, [r0, #32]
}
 80028ea:	bc30      	pop	{r4, r5}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40012c00 	.word	0x40012c00

080028f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028f6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f8:	6a05      	ldr	r5, [r0, #32]
 80028fa:	f025 0501 	bic.w	r5, r5, #1
 80028fe:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002900:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002902:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002906:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800290e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002910:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002912:	6203      	str	r3, [r0, #32]
}
 8002914:	bc30      	pop	{r4, r5}
 8002916:	4770      	bx	lr

08002918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002918:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291a:	6a05      	ldr	r5, [r0, #32]
 800291c:	f025 0510 	bic.w	r5, r5, #16
 8002920:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002922:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002924:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002926:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292a:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800292e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002932:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002936:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002938:	6203      	str	r3, [r0, #32]
}
 800293a:	bc30      	pop	{r4, r5}
 800293c:	4770      	bx	lr

0800293e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800293e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002944:	430b      	orrs	r3, r1
 8002946:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294a:	6083      	str	r3, [r0, #8]
}
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_PWM_MspInit>:
}
 800294e:	4770      	bx	lr

08002950 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002950:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <TIM_Base_SetConfig+0x94>)
 8002954:	4290      	cmp	r0, r2
 8002956:	d012      	beq.n	800297e <TIM_Base_SetConfig+0x2e>
 8002958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295c:	4290      	cmp	r0, r2
 800295e:	d00e      	beq.n	800297e <TIM_Base_SetConfig+0x2e>
 8002960:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002964:	d00b      	beq.n	800297e <TIM_Base_SetConfig+0x2e>
 8002966:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800296a:	4290      	cmp	r0, r2
 800296c:	d007      	beq.n	800297e <TIM_Base_SetConfig+0x2e>
 800296e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002972:	4290      	cmp	r0, r2
 8002974:	d003      	beq.n	800297e <TIM_Base_SetConfig+0x2e>
 8002976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800297a:	4290      	cmp	r0, r2
 800297c:	d103      	bne.n	8002986 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002982:	684a      	ldr	r2, [r1, #4]
 8002984:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <TIM_Base_SetConfig+0x94>)
 8002988:	4290      	cmp	r0, r2
 800298a:	d012      	beq.n	80029b2 <TIM_Base_SetConfig+0x62>
 800298c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002990:	4290      	cmp	r0, r2
 8002992:	d00e      	beq.n	80029b2 <TIM_Base_SetConfig+0x62>
 8002994:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002998:	d00b      	beq.n	80029b2 <TIM_Base_SetConfig+0x62>
 800299a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800299e:	4290      	cmp	r0, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0x62>
 80029a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a6:	4290      	cmp	r0, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0x62>
 80029aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ae:	4290      	cmp	r0, r2
 80029b0:	d103      	bne.n	80029ba <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	68ca      	ldr	r2, [r1, #12]
 80029b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029be:	694a      	ldr	r2, [r1, #20]
 80029c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c4:	688b      	ldr	r3, [r1, #8]
 80029c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029c8:	680b      	ldr	r3, [r1, #0]
 80029ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <TIM_Base_SetConfig+0x94>)
 80029ce:	4298      	cmp	r0, r3
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0x8a>
 80029d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d6:	4298      	cmp	r0, r3
 80029d8:	d101      	bne.n	80029de <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 80029da:	690b      	ldr	r3, [r1, #16]
 80029dc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80029de:	2301      	movs	r3, #1
 80029e0:	6143      	str	r3, [r0, #20]
}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00

080029e8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80029e8:	b340      	cbz	r0, 8002a3c <HAL_TIM_Base_Init+0x54>
{
 80029ea:	b510      	push	{r4, lr}
 80029ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029f2:	b1f3      	cbz	r3, 8002a32 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fa:	4621      	mov	r1, r4
 80029fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a00:	f7ff ffa6 	bl	8002950 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a2e:	2000      	movs	r0, #0
}
 8002a30:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a36:	f002 fc81 	bl	800533c <HAL_TIM_Base_MspInit>
 8002a3a:	e7db      	b.n	80029f4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002a3c:	2001      	movs	r0, #1
}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002a40:	b340      	cbz	r0, 8002a94 <HAL_TIM_PWM_Init+0x54>
{
 8002a42:	b510      	push	{r4, lr}
 8002a44:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a4a:	b1f3      	cbz	r3, 8002a8a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a52:	4621      	mov	r1, r4
 8002a54:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a58:	f7ff ff7a 	bl	8002950 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
}
 8002a88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002a8e:	f7ff ff5e 	bl	800294e <HAL_TIM_PWM_MspInit>
 8002a92:	e7db      	b.n	8002a4c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
}
 8002a96:	4770      	bx	lr

08002a98 <TIM_OC2_SetConfig>:
{
 8002a98:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9a:	6a03      	ldr	r3, [r0, #32]
 8002a9c:	f023 0310 	bic.w	r3, r3, #16
 8002aa0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002aa2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002aa4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002aa6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aac:	680d      	ldr	r5, [r1, #0]
 8002aae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002ab2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab6:	688d      	ldr	r5, [r1, #8]
 8002ab8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002abc:	4d11      	ldr	r5, [pc, #68]	; (8002b04 <TIM_OC2_SetConfig+0x6c>)
 8002abe:	42a8      	cmp	r0, r5
 8002ac0:	d003      	beq.n	8002aca <TIM_OC2_SetConfig+0x32>
 8002ac2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ac6:	42a8      	cmp	r0, r5
 8002ac8:	d106      	bne.n	8002ad8 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ace:	68cd      	ldr	r5, [r1, #12]
 8002ad0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad8:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <TIM_OC2_SetConfig+0x6c>)
 8002ada:	42a8      	cmp	r0, r5
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC2_SetConfig+0x4e>
 8002ade:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ae2:	42a8      	cmp	r0, r5
 8002ae4:	d107      	bne.n	8002af6 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aea:	694d      	ldr	r5, [r1, #20]
 8002aec:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002af0:	698d      	ldr	r5, [r1, #24]
 8002af2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002af6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002af8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002afa:	684a      	ldr	r2, [r1, #4]
 8002afc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002afe:	6203      	str	r3, [r0, #32]
}
 8002b00:	bc30      	pop	{r4, r5}
 8002b02:	4770      	bx	lr
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <HAL_TIM_PWM_ConfigChannel>:
{
 8002b08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002b0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d060      	beq.n	8002bd4 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	2301      	movs	r3, #1
 8002b18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002b1c:	2a0c      	cmp	r2, #12
 8002b1e:	d81a      	bhi.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002b20:	e8df f002 	tbb	[pc, r2]
 8002b24:	19191907 	.word	0x19191907
 8002b28:	1919191d 	.word	0x1919191d
 8002b2c:	19191931 	.word	0x19191931
 8002b30:	44          	.byte	0x44
 8002b31:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b32:	6800      	ldr	r0, [r0, #0]
 8002b34:	f7ff fe4a 	bl	80027cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	6993      	ldr	r3, [r2, #24]
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	6993      	ldr	r3, [r2, #24]
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	6993      	ldr	r3, [r2, #24]
 8002b50:	6929      	ldr	r1, [r5, #16]
 8002b52:	430b      	orrs	r3, r1
 8002b54:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002b5c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b5e:	6800      	ldr	r0, [r0, #0]
 8002b60:	f7ff ff9a 	bl	8002a98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	6993      	ldr	r3, [r2, #24]
 8002b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b6c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b6e:	6822      	ldr	r2, [r4, #0]
 8002b70:	6993      	ldr	r3, [r2, #24]
 8002b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b76:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b78:	6822      	ldr	r2, [r4, #0]
 8002b7a:	6993      	ldr	r3, [r2, #24]
 8002b7c:	6929      	ldr	r1, [r5, #16]
 8002b7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b82:	6193      	str	r3, [r2, #24]
      break;
 8002b84:	e7e7      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	f7ff fe54 	bl	8002834 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b8c:	6822      	ldr	r2, [r4, #0]
 8002b8e:	69d3      	ldr	r3, [r2, #28]
 8002b90:	f043 0308 	orr.w	r3, r3, #8
 8002b94:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	69d3      	ldr	r3, [r2, #28]
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	69d3      	ldr	r3, [r2, #28]
 8002ba4:	6929      	ldr	r1, [r5, #16]
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	61d3      	str	r3, [r2, #28]
      break;
 8002baa:	e7d4      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bac:	6800      	ldr	r0, [r0, #0]
 8002bae:	f7ff fe79 	bl	80028a4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	69d3      	ldr	r3, [r2, #28]
 8002bb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	69d3      	ldr	r3, [r2, #28]
 8002bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	69d3      	ldr	r3, [r2, #28]
 8002bca:	6929      	ldr	r1, [r5, #16]
 8002bcc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bd0:	61d3      	str	r3, [r2, #28]
      break;
 8002bd2:	e7c0      	b.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	e7c1      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x54>

08002bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bda:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bdc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002be4:	430a      	orrs	r2, r1
 8002be6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be8:	6082      	str	r2, [r0, #8]
}
 8002bea:	bc10      	pop	{r4}
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002bee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d066      	beq.n	8002cc4 <HAL_TIM_ConfigClockSource+0xd6>
{
 8002bf6:	b510      	push	{r4, lr}
 8002bf8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002c06:	6802      	ldr	r2, [r0, #0]
 8002c08:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002c12:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c14:	680b      	ldr	r3, [r1, #0]
 8002c16:	2b60      	cmp	r3, #96	; 0x60
 8002c18:	d040      	beq.n	8002c9c <HAL_TIM_ConfigClockSource+0xae>
 8002c1a:	d822      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x74>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d047      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0xc2>
 8002c20:	d90b      	bls.n	8002c3a <HAL_TIM_ConfigClockSource+0x4c>
 8002c22:	2b50      	cmp	r3, #80	; 0x50
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c26:	68ca      	ldr	r2, [r1, #12]
 8002c28:	6849      	ldr	r1, [r1, #4]
 8002c2a:	6800      	ldr	r0, [r0, #0]
 8002c2c:	f7ff fe62 	bl	80028f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c30:	2150      	movs	r1, #80	; 0x50
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	f7ff fe83 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002c38:	e004      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d00c      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x6a>
 8002c3e:	d908      	bls.n	8002c52 <HAL_TIM_ConfigClockSource+0x64>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d009      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002c50:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c52:	b10b      	cbz	r3, 8002c58 <HAL_TIM_ConfigClockSource+0x6a>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d1f5      	bne.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	f7ff fe6f 	bl	800293e <TIM_ITRx_SetConfig>
        break;
 8002c60:	e7f0      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002c62:	2b70      	cmp	r3, #112	; 0x70
 8002c64:	d00e      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x96>
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	68cb      	ldr	r3, [r1, #12]
 8002c6e:	684a      	ldr	r2, [r1, #4]
 8002c70:	6889      	ldr	r1, [r1, #8]
 8002c72:	6800      	ldr	r0, [r0, #0]
 8002c74:	f7ff ffb0 	bl	8002bd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	6893      	ldr	r3, [r2, #8]
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c80:	6093      	str	r3, [r2, #8]
      break;
 8002c82:	e7df      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002c84:	68cb      	ldr	r3, [r1, #12]
 8002c86:	684a      	ldr	r2, [r1, #4]
 8002c88:	6889      	ldr	r1, [r1, #8]
 8002c8a:	6800      	ldr	r0, [r0, #0]
 8002c8c:	f7ff ffa4 	bl	8002bd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002c98:	6093      	str	r3, [r2, #8]
      break;
 8002c9a:	e7d3      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9c:	68ca      	ldr	r2, [r1, #12]
 8002c9e:	6849      	ldr	r1, [r1, #4]
 8002ca0:	6800      	ldr	r0, [r0, #0]
 8002ca2:	f7ff fe39 	bl	8002918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca6:	2160      	movs	r1, #96	; 0x60
 8002ca8:	6820      	ldr	r0, [r4, #0]
 8002caa:	f7ff fe48 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002cae:	e7c9      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb0:	68ca      	ldr	r2, [r1, #12]
 8002cb2:	6849      	ldr	r1, [r1, #4]
 8002cb4:	6800      	ldr	r0, [r0, #0]
 8002cb6:	f7ff fe1d 	bl	80028f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	f7ff fe3e 	bl	800293e <TIM_ITRx_SetConfig>
      break;
 8002cc2:	e7bf      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002cc4:	2002      	movs	r0, #2
}
 8002cc6:	4770      	bx	lr

08002cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cc8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cca:	f001 011f 	and.w	r1, r1, #31
 8002cce:	2301      	movs	r3, #1
 8002cd0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cd4:	6a03      	ldr	r3, [r0, #32]
 8002cd6:	ea23 0304 	bic.w	r3, r3, r4
 8002cda:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cdc:	6a03      	ldr	r3, [r0, #32]
 8002cde:	fa02 f101 	lsl.w	r1, r2, r1
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	6203      	str	r3, [r0, #32]
}
 8002ce6:	bc10      	pop	{r4}
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_TIM_PWM_Start>:
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	2900      	cmp	r1, #0
 8002cf4:	d13a      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x80>
 8002cf6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	bf18      	it	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d166      	bne.n	8002dd4 <HAL_TIM_PWM_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d149      	bne.n	8002d9e <HAL_TIM_PWM_Start+0xb2>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d10:	2201      	movs	r2, #1
 8002d12:	4601      	mov	r1, r0
 8002d14:	6820      	ldr	r0, [r4, #0]
 8002d16:	f7ff ffd7 	bl	8002cc8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <HAL_TIM_PWM_Start+0xf0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x3e>
 8002d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d103      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8002d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <HAL_TIM_PWM_Start+0xf0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d041      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xd2>
 8002d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d03d      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xd2>
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d03a      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xd2>
 8002d48:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xd2>
 8002d50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d032      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xd2>
 8002d58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d02e      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xd2>
    __HAL_TIM_ENABLE(htim);
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e032      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xe6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d6c:	2904      	cmp	r1, #4
 8002d6e:	d008      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x96>
 8002d70:	2908      	cmp	r1, #8
 8002d72:	d00d      	beq.n	8002d90 <HAL_TIM_PWM_Start+0xa4>
 8002d74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	bf18      	it	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	e7bf      	b.n	8002d02 <HAL_TIM_PWM_Start+0x16>
 8002d82:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	bf18      	it	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	e7b8      	b.n	8002d02 <HAL_TIM_PWM_Start+0x16>
 8002d90:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	bf18      	it	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	e7b1      	b.n	8002d02 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9e:	2804      	cmp	r0, #4
 8002da0:	d005      	beq.n	8002dae <HAL_TIM_PWM_Start+0xc2>
 8002da2:	2808      	cmp	r0, #8
 8002da4:	d007      	beq.n	8002db6 <HAL_TIM_PWM_Start+0xca>
 8002da6:	2302      	movs	r3, #2
 8002da8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002dac:	e7b0      	b.n	8002d10 <HAL_TIM_PWM_Start+0x24>
 8002dae:	2302      	movs	r3, #2
 8002db0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002db4:	e7ac      	b.n	8002d10 <HAL_TIM_PWM_Start+0x24>
 8002db6:	2302      	movs	r3, #2
 8002db8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002dbc:	e7a8      	b.n	8002d10 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc4:	2a06      	cmp	r2, #6
 8002dc6:	d007      	beq.n	8002dd8 <HAL_TIM_PWM_Start+0xec>
      __HAL_TIM_ENABLE(htim);
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002dd0:	2000      	movs	r0, #0
}
 8002dd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	e7fc      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xe6>
  return HAL_OK;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e7fa      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xe6>
 8002ddc:	40012c00 	.word	0x40012c00

08002de0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d033      	beq.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8002de8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002dea:	2301      	movs	r3, #1
 8002dec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df6:	6803      	ldr	r3, [r0, #0]
 8002df8:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dfa:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dfc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e00:	680a      	ldr	r2, [r1, #0]
 8002e02:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d012      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00e      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d00b      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002e1c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002e24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d104      	bne.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e34:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e38:	684a      	ldr	r2, [r1, #4]
 8002e3a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e44:	2300      	movs	r3, #0
 8002e46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002e4a:	4618      	mov	r0, r3
}
 8002e4c:	bc30      	pop	{r4, r5}
 8002e4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e50:	2002      	movs	r0, #2
}
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00

08002e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	6802      	ldr	r2, [r0, #0]
 8002e5e:	6913      	ldr	r3, [r2, #16]
 8002e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e64:	68c1      	ldr	r1, [r0, #12]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e6a:	6883      	ldr	r3, [r0, #8]
 8002e6c:	6902      	ldr	r2, [r0, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	6942      	ldr	r2, [r0, #20]
 8002e72:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	6801      	ldr	r1, [r0, #0]
 8002e76:	68cb      	ldr	r3, [r1, #12]
 8002e78:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e7c:	f023 030c 	bic.w	r3, r3, #12
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e84:	6802      	ldr	r2, [r0, #0]
 8002e86:	6953      	ldr	r3, [r2, #20]
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	6981      	ldr	r1, [r0, #24]
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002e92:	6802      	ldr	r2, [r0, #0]
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <UART_SetConfig+0x88>)
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d01f      	beq.n	8002eda <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e9a:	f7ff fac7 	bl	800242c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e9e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002ea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ea6:	6862      	ldr	r2, [r4, #4]
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <UART_SetConfig+0x8c>)
 8002eb0:	fba0 3102 	umull	r3, r1, r0, r2
 8002eb4:	0949      	lsrs	r1, r1, #5
 8002eb6:	2364      	movs	r3, #100	; 0x64
 8002eb8:	fb03 2311 	mls	r3, r3, r1, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	; 0x32
 8002ec0:	fba0 2303 	umull	r2, r3, r0, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eca:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	6821      	ldr	r1, [r4, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed8:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eda:	f7ff fab7 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8002ede:	e7de      	b.n	8002e9e <UART_SetConfig+0x46>
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	51eb851f 	.word	0x51eb851f

08002ee8 <UART_WaitOnFlagUntilTimeout>:
{
 8002ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eec:	4605      	mov	r5, r0
 8002eee:	460f      	mov	r7, r1
 8002ef0:	4616      	mov	r6, r2
 8002ef2:	4699      	mov	r9, r3
 8002ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef8:	682c      	ldr	r4, [r5, #0]
 8002efa:	6824      	ldr	r4, [r4, #0]
 8002efc:	ea37 0304 	bics.w	r3, r7, r4
 8002f00:	bf0c      	ite	eq
 8002f02:	2401      	moveq	r4, #1
 8002f04:	2400      	movne	r4, #0
 8002f06:	42b4      	cmp	r4, r6
 8002f08:	d11f      	bne.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002f0e:	d0f3      	beq.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f10:	f1b8 0f00 	cmp.w	r8, #0
 8002f14:	d005      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x3a>
 8002f16:	f7fd fe87 	bl	8000c28 <HAL_GetTick>
 8002f1a:	eba0 0009 	sub.w	r0, r0, r9
 8002f1e:	4540      	cmp	r0, r8
 8002f20:	d9ea      	bls.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f22:	682a      	ldr	r2, [r5, #0]
 8002f24:	68d3      	ldr	r3, [r2, #12]
 8002f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f2a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	682a      	ldr	r2, [r5, #0]
 8002f2e:	6953      	ldr	r3, [r2, #20]
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002f36:	2320      	movs	r3, #32
 8002f38:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002f40:	2300      	movs	r3, #0
 8002f42:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002f46:	2003      	movs	r0, #3
 8002f48:	e000      	b.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8002f4a:	2000      	movs	r0, #0
}
 8002f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002f50 <HAL_UART_Init>:
  if (huart == NULL)
 8002f50:	b358      	cbz	r0, 8002faa <HAL_UART_Init+0x5a>
{
 8002f52:	b510      	push	{r4, lr}
 8002f54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f5a:	b30b      	cbz	r3, 8002fa0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f5c:	2324      	movs	r3, #36	; 0x24
 8002f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	68d3      	ldr	r3, [r2, #12]
 8002f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f6a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff ff73 	bl	8002e58 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	6913      	ldr	r3, [r2, #16]
 8002f76:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002f7a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7c:	6822      	ldr	r2, [r4, #0]
 8002f7e:	6953      	ldr	r3, [r2, #20]
 8002f80:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002f84:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	68d3      	ldr	r3, [r2, #12]
 8002f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f8e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	2000      	movs	r0, #0
 8002f92:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f94:	2320      	movs	r3, #32
 8002f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002f9e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fa0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002fa4:	f002 fad2 	bl	800554c <HAL_UART_MspInit>
 8002fa8:	e7d8      	b.n	8002f5c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
}
 8002fac:	4770      	bx	lr

08002fae <HAL_UART_Transmit>:
{
 8002fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d154      	bne.n	800306a <HAL_UART_Transmit+0xbc>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	460d      	mov	r5, r1
 8002fc4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	d053      	beq.n	8003072 <HAL_UART_Transmit+0xc4>
 8002fca:	2a00      	cmp	r2, #0
 8002fcc:	d053      	beq.n	8003076 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002fce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d051      	beq.n	800307a <HAL_UART_Transmit+0xcc>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe0:	2321      	movs	r3, #33	; 0x21
 8002fe2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002fe6:	f7fd fe1f 	bl	8000c28 <HAL_GetTick>
 8002fea:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002fec:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ff0:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff4:	68a3      	ldr	r3, [r4, #8]
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d005      	beq.n	8003008 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8002ffc:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8003000:	2300      	movs	r3, #0
 8003002:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003006:	e012      	b.n	800302e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	b113      	cbz	r3, 8003012 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800300c:	f04f 0800 	mov.w	r8, #0
 8003010:	e7f6      	b.n	8003000 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8003012:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003014:	2500      	movs	r5, #0
 8003016:	e7f3      	b.n	8003000 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003018:	f838 3b02 	ldrh.w	r3, [r8], #2
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003024:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003026:	b292      	uxth	r2, r2
 8003028:	3a01      	subs	r2, #1
 800302a:	b292      	uxth	r2, r2
 800302c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800302e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	b173      	cbz	r3, 8003052 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003034:	9600      	str	r6, [sp, #0]
 8003036:	463b      	mov	r3, r7
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff ff53 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8003042:	b9e0      	cbnz	r0, 800307e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8003044:	2d00      	cmp	r5, #0
 8003046:	d0e7      	beq.n	8003018 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003048:	f815 2b01 	ldrb.w	r2, [r5], #1
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003050:	e7e8      	b.n	8003024 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	9600      	str	r6, [sp, #0]
 8003054:	463b      	mov	r3, r7
 8003056:	2200      	movs	r2, #0
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ff44 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8003060:	b978      	cbnz	r0, 8003082 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8003062:	2320      	movs	r3, #32
 8003064:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003068:	e000      	b.n	800306c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800306a:	2002      	movs	r0, #2
}
 800306c:	b002      	add	sp, #8
 800306e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003072:	2001      	movs	r0, #1
 8003074:	e7fa      	b.n	800306c <HAL_UART_Transmit+0xbe>
 8003076:	2001      	movs	r0, #1
 8003078:	e7f8      	b.n	800306c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800307a:	2002      	movs	r0, #2
 800307c:	e7f6      	b.n	800306c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800307e:	2003      	movs	r0, #3
 8003080:	e7f4      	b.n	800306c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8003082:	2003      	movs	r0, #3
 8003084:	e7f2      	b.n	800306c <HAL_UART_Transmit+0xbe>
	...

08003088 <u8g_Delay>:
 #include "../Drivers/u8glib/inc/u8g_arm.h"

 static uint8_t control = 0;

 void u8g_Delay(uint16_t val)  
 {  
 8003088:	b508      	push	{r3, lr}


	 HAL_Delay(val/25);
 800308a:	4b03      	ldr	r3, [pc, #12]	; (8003098 <u8g_Delay+0x10>)
 800308c:	fba3 3000 	umull	r3, r0, r3, r0
 8003090:	08c0      	lsrs	r0, r0, #3
 8003092:	f7fd fdcf 	bl	8000c34 <HAL_Delay>
 }  
 8003096:	bd08      	pop	{r3, pc}
 8003098:	51eb851f 	.word	0x51eb851f

0800309c <u8g_MicroDelay>:
 void u8g_MicroDelay(void)  
 {  
      asm("nop");
 800309c:	bf00      	nop
      asm("nop");
 800309e:	bf00      	nop
      asm("nop");
 80030a0:	bf00      	nop

	 //HAL_Delay(1);
 }  
 80030a2:	4770      	bx	lr

080030a4 <u8g_10MicroDelay>:
 void u8g_10MicroDelay(void)  
 {  
     asm("nop");
 80030a4:	bf00      	nop
     asm("nop");
 80030a6:	bf00      	nop
     asm("nop");
 80030a8:	bf00      	nop
     asm("nop");
 80030aa:	bf00      	nop
     asm("nop");
 80030ac:	bf00      	nop
     asm("nop");
 80030ae:	bf00      	nop

      //HAL_Delay(1);
 }  
 80030b0:	4770      	bx	lr
	...

080030b4 <u8g_com_hw_spi_fn>:
 uint8_t u8g_com_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
 {  
 80030b4:	b500      	push	{lr}
 80030b6:	b083      	sub	sp, #12
 80030b8:	4618      	mov	r0, r3
 80030ba:	f88d 2007 	strb.w	r2, [sp, #7]
  switch(msg)  
 80030be:	1e4a      	subs	r2, r1, #1
 80030c0:	2a06      	cmp	r2, #6
 80030c2:	d836      	bhi.n	8003132 <u8g_com_hw_spi_fn+0x7e>
 80030c4:	e8df f002 	tbb	[pc, r2]
 80030c8:	35120704 	.word	0x35120704
 80030cc:	3927      	.short	0x3927
 80030ce:	39          	.byte	0x39
 80030cf:	00          	.byte	0x00
  {  
   case U8G_COM_MSG_STOP:  
    break;  
   case U8G_COM_MSG_INIT:  
    u8g_MicroDelay();  
 80030d0:	f7ff ffe4 	bl	800309c <u8g_MicroDelay>
    break;  
 80030d4:	e02d      	b.n	8003132 <u8g_com_hw_spi_fn+0x7e>
   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
    u8g_10MicroDelay();  
 80030d6:	f7ff ffe5 	bl	80030a4 <u8g_10MicroDelay>
    HAL_GPIO_WritePin(PORT_DC, DC, arg_val);  
 80030da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80030de:	2104      	movs	r1, #4
 80030e0:	481b      	ldr	r0, [pc, #108]	; (8003150 <u8g_com_hw_spi_fn+0x9c>)
 80030e2:	f7fe fa79 	bl	80015d8 <HAL_GPIO_WritePin>
    u8g_10MicroDelay();  
 80030e6:	f7ff ffdd 	bl	80030a4 <u8g_10MicroDelay>
    break;  
 80030ea:	e022      	b.n	8003132 <u8g_com_hw_spi_fn+0x7e>
   case U8G_COM_MSG_CHIP_SELECT:  
    if ( arg_val == 0 )  
 80030ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030f0:	b953      	cbnz	r3, 8003108 <u8g_com_hw_spi_fn+0x54>
    {  
    	 u8g_MicroDelay();
 80030f2:	f7ff ffd3 	bl	800309c <u8g_MicroDelay>
         //HAL_Delay(1);
         HAL_GPIO_WritePin(PORT_CS, CS, GPIO_PIN_SET);  
 80030f6:	2201      	movs	r2, #1
 80030f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030fc:	4815      	ldr	r0, [pc, #84]	; (8003154 <u8g_com_hw_spi_fn+0xa0>)
 80030fe:	f7fe fa6b 	bl	80015d8 <HAL_GPIO_WritePin>
    }  
    else  
      HAL_GPIO_WritePin(PORT_CS, CS, GPIO_PIN_RESET);  
    u8g_MicroDelay();  
 8003102:	f7ff ffcb 	bl	800309c <u8g_MicroDelay>
    break;  
 8003106:	e014      	b.n	8003132 <u8g_com_hw_spi_fn+0x7e>
      HAL_GPIO_WritePin(PORT_CS, CS, GPIO_PIN_RESET);  
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800310e:	4811      	ldr	r0, [pc, #68]	; (8003154 <u8g_com_hw_spi_fn+0xa0>)
 8003110:	f7fe fa62 	bl	80015d8 <HAL_GPIO_WritePin>
 8003114:	e7f5      	b.n	8003102 <u8g_com_hw_spi_fn+0x4e>
   case U8G_COM_MSG_RESET:  
    break;  
   case U8G_COM_MSG_WRITE_BYTE:  
     HAL_SPI_Transmit(&SPI_HANDLER, &arg_val, 1, 100);
 8003116:	2364      	movs	r3, #100	; 0x64
 8003118:	2201      	movs	r2, #1
 800311a:	f10d 0107 	add.w	r1, sp, #7
 800311e:	480e      	ldr	r0, [pc, #56]	; (8003158 <u8g_com_hw_spi_fn+0xa4>)
 8003120:	f7ff fa79 	bl	8002616 <HAL_SPI_Transmit>
     while(HAL_SPI_GetState(&SPI_HANDLER) != HAL_SPI_STATE_READY);  
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <u8g_com_hw_spi_fn+0xa4>)
 8003126:	f7ff fb4d 	bl	80027c4 <HAL_SPI_GetState>
 800312a:	2801      	cmp	r0, #1
 800312c:	d1fa      	bne.n	8003124 <u8g_com_hw_spi_fn+0x70>
     u8g_MicroDelay();  
 800312e:	f7ff ffb5 	bl	800309c <u8g_MicroDelay>
         arg_val = 0;  
    }  
    break;  
  }  
  return 1;  
 }  
 8003132:	2001      	movs	r0, #1
 8003134:	b003      	add	sp, #12
 8003136:	f85d fb04 	ldr.w	pc, [sp], #4
         HAL_SPI_Transmit(&SPI_HANDLER, (uint8_t *)arg_ptr, arg_val, 100);
 800313a:	2364      	movs	r3, #100	; 0x64
 800313c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003140:	4601      	mov	r1, r0
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <u8g_com_hw_spi_fn+0xa4>)
 8003144:	f7ff fa67 	bl	8002616 <HAL_SPI_Transmit>
         u8g_MicroDelay();  
 8003148:	f7ff ffa8 	bl	800309c <u8g_MicroDelay>
    break;  
 800314c:	e7f1      	b.n	8003132 <u8g_com_hw_spi_fn+0x7e>
 800314e:	bf00      	nop
 8003150:	40011400 	.word	0x40011400
 8003154:	40011000 	.word	0x40011000
 8003158:	200005b8 	.word	0x200005b8

0800315c <u8g_com_hw_i2c_fn>:

 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
 {
 800315c:	b510      	push	{r4, lr}
 800315e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8003162:	4614      	mov	r4, r2
  switch(msg)
 8003164:	3901      	subs	r1, #1
 8003166:	2906      	cmp	r1, #6
 8003168:	d839      	bhi.n	80031de <u8g_com_hw_i2c_fn+0x82>
 800316a:	e8df f001 	tbb	[pc, r1]
 800316e:	0704      	.short	0x0704
 8003170:	22123838 	.word	0x22123838
 8003174:	22          	.byte	0x22
 8003175:	00          	.byte	0x00
  {
   case U8G_COM_MSG_STOP:
    break;

   case U8G_COM_MSG_INIT:
    u8g_MicroDelay();
 8003176:	f7ff ff91 	bl	800309c <u8g_MicroDelay>
    break;
 800317a:	e030      	b.n	80031de <u8g_com_hw_i2c_fn+0x82>

   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
    u8g_10MicroDelay();
 800317c:	f7ff ff92 	bl	80030a4 <u8g_10MicroDelay>
    if (arg_val == 0)
 8003180:	b91c      	cbnz	r4, 800318a <u8g_com_hw_i2c_fn+0x2e>
    {
         control = 0;
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <u8g_com_hw_i2c_fn+0x8c>)
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e029      	b.n	80031de <u8g_com_hw_i2c_fn+0x82>
    }
    else
    {
         control = 0x40;
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <u8g_com_hw_i2c_fn+0x8c>)
 800318c:	2240      	movs	r2, #64	; 0x40
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e025      	b.n	80031de <u8g_com_hw_i2c_fn+0x82>
    break;

   case U8G_COM_MSG_WRITE_BYTE:
   {
        uint8_t buffer[2];
        buffer[0] = control;
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <u8g_com_hw_i2c_fn+0x8c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	f88d 3008 	strb.w	r3, [sp, #8]
        buffer[1] = arg_val;
 800319a:	f88d 4009 	strb.w	r4, [sp, #9]
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);
 800319e:	f242 7310 	movw	r3, #10000	; 0x2710
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2302      	movs	r3, #2
 80031a6:	aa02      	add	r2, sp, #8
 80031a8:	2178      	movs	r1, #120	; 0x78
 80031aa:	4810      	ldr	r0, [pc, #64]	; (80031ec <u8g_com_hw_i2c_fn+0x90>)
 80031ac:	f7fe fcba 	bl	8001b24 <HAL_I2C_Master_Transmit>
   }
        break;
 80031b0:	e015      	b.n	80031de <u8g_com_hw_i2c_fn+0x82>
   case U8G_COM_MSG_WRITE_SEQ:
   case U8G_COM_MSG_WRITE_SEQ_P:
   {
        uint8_t buffer[DATA_BUFFER_SIZE];
           uint8_t *ptr = arg_ptr;
           buffer[0] = control;
 80031b2:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <u8g_com_hw_i2c_fn+0x8c>)
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	f88d 2008 	strb.w	r2, [sp, #8]
           for (int i = 1; i <= arg_val; i++)
 80031ba:	2101      	movs	r1, #1
 80031bc:	e004      	b.n	80031c8 <u8g_com_hw_i2c_fn+0x6c>
           {
                buffer[i] = *(ptr++);
 80031be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80031c2:	aa02      	add	r2, sp, #8
 80031c4:	5450      	strb	r0, [r2, r1]
           for (int i = 1; i <= arg_val; i++)
 80031c6:	3101      	adds	r1, #1
 80031c8:	428c      	cmp	r4, r1
 80031ca:	daf8      	bge.n	80031be <u8g_com_hw_i2c_fn+0x62>
           }
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val, I2C_TIMEOUT);
 80031cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4623      	mov	r3, r4
 80031d4:	aa02      	add	r2, sp, #8
 80031d6:	2178      	movs	r1, #120	; 0x78
 80031d8:	4804      	ldr	r0, [pc, #16]	; (80031ec <u8g_com_hw_i2c_fn+0x90>)
 80031da:	f7fe fca3 	bl	8001b24 <HAL_I2C_Master_Transmit>
   }

    break;
  }
  return 1;
 }
 80031de:	2001      	movs	r0, #1
 80031e0:	f50d 7d7c 	add.w	sp, sp, #1008	; 0x3f0
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	bf00      	nop
 80031e8:	2000023c 	.word	0x2000023c
 80031ec:	2000050c 	.word	0x2000050c

080031f0 <u8g_DrawHBitmap>:
*/

#include "../Drivers/u8glib/inc/u8g.h"

void u8g_DrawHBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const uint8_t *bitmap)
{
 80031f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	4680      	mov	r8, r0
 80031f8:	460d      	mov	r5, r1
 80031fa:	4617      	mov	r7, r2
 80031fc:	461c      	mov	r4, r3
 80031fe:	9e08      	ldr	r6, [sp, #32]
  while( cnt > 0 )
 8003200:	b16c      	cbz	r4, 800321e <u8g_DrawHBitmap+0x2e>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, *bitmap);
 8003202:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	463a      	mov	r2, r7
 800320c:	4629      	mov	r1, r5
 800320e:	4640      	mov	r0, r8
 8003210:	f000 fbed 	bl	80039ee <u8g_Draw8Pixel>
    bitmap++;
    cnt--;
 8003214:	3c01      	subs	r4, #1
 8003216:	b2e4      	uxtb	r4, r4
    x+=8;
 8003218:	3508      	adds	r5, #8
 800321a:	b2ed      	uxtb	r5, r5
 800321c:	e7f0      	b.n	8003200 <u8g_DrawHBitmap+0x10>
  }
}
 800321e:	b002      	add	sp, #8
 8003220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003224 <u8g_DrawBitmap>:

void u8g_DrawBitmap(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const uint8_t *bitmap)
{
 8003224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003228:	b083      	sub	sp, #12
 800322a:	4681      	mov	r9, r0
 800322c:	4688      	mov	r8, r1
 800322e:	4614      	mov	r4, r2
 8003230:	461f      	mov	r7, r3
 8003232:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8003236:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	9500      	str	r5, [sp, #0]
 800323c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003240:	f000 f812 	bl	8003268 <u8g_IsBBXIntersection>
 8003244:	b168      	cbz	r0, 8003262 <u8g_DrawBitmap+0x3e>
    return;
  while( h > 0 )
 8003246:	b165      	cbz	r5, 8003262 <u8g_DrawBitmap+0x3e>
  {
    u8g_DrawHBitmap(u8g, x, y, cnt, bitmap);
 8003248:	9600      	str	r6, [sp, #0]
 800324a:	463b      	mov	r3, r7
 800324c:	4622      	mov	r2, r4
 800324e:	4641      	mov	r1, r8
 8003250:	4648      	mov	r0, r9
 8003252:	f7ff ffcd 	bl	80031f0 <u8g_DrawHBitmap>
    bitmap += cnt;
 8003256:	443e      	add	r6, r7
    y++;
 8003258:	3401      	adds	r4, #1
 800325a:	b2e4      	uxtb	r4, r4
    h--;
 800325c:	3d01      	subs	r5, #1
 800325e:	b2ed      	uxtb	r5, r5
 8003260:	e7f1      	b.n	8003246 <u8g_DrawBitmap+0x22>
  }
}
 8003262:	b003      	add	sp, #12
 8003264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003268 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8003268:	b470      	push	{r4, r5, r6}
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
 800326a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 800326e:	4414      	add	r4, r2
 8003270:	b2e4      	uxtb	r4, r4
  tmp--;
 8003272:	3c01      	subs	r4, #1
 8003274:	b2e4      	uxtb	r4, r4
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8003276:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800327a:	f890 603b 	ldrb.w	r6, [r0, #59]	; 0x3b
  if ( v0 <= a1 )
 800327e:	4296      	cmp	r6, r2
 8003280:	d305      	bcc.n	800328e <u8g_IsBBXIntersection+0x26>
    if ( v1 >= a0 )
 8003282:	42a5      	cmp	r5, r4
 8003284:	d907      	bls.n	8003296 <u8g_IsBBXIntersection+0x2e>
      if ( v0 > v1 )
 8003286:	42a2      	cmp	r2, r4
 8003288:	d805      	bhi.n	8003296 <u8g_IsBBXIntersection+0x2e>
    return 0; 
 800328a:	2000      	movs	r0, #0
 800328c:	e01a      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
    if ( v1 >= a0 )
 800328e:	42a5      	cmp	r5, r4
 8003290:	d817      	bhi.n	80032c2 <u8g_IsBBXIntersection+0x5a>
      if ( v0 > v1 )
 8003292:	42a2      	cmp	r2, r4
 8003294:	d918      	bls.n	80032c8 <u8g_IsBBXIntersection+0x60>
  
  tmp = x;
  tmp += w;
 8003296:	440b      	add	r3, r1
 8003298:	b2db      	uxtb	r3, r3
  tmp--;
 800329a:	3b01      	subs	r3, #1
 800329c:	b2db      	uxtb	r3, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800329e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80032a2:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  if ( v0 <= a1 )
 80032a6:	4288      	cmp	r0, r1
 80032a8:	d305      	bcc.n	80032b6 <u8g_IsBBXIntersection+0x4e>
    if ( v1 >= a0 )
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d90e      	bls.n	80032cc <u8g_IsBBXIntersection+0x64>
      if ( v0 > v1 )
 80032ae:	4299      	cmp	r1, r3
 80032b0:	d90e      	bls.n	80032d0 <u8g_IsBBXIntersection+0x68>
	return 1;
 80032b2:	2001      	movs	r0, #1
 80032b4:	e006      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
    if ( v1 >= a0 )
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d80c      	bhi.n	80032d4 <u8g_IsBBXIntersection+0x6c>
      if ( v0 > v1 )
 80032ba:	4299      	cmp	r1, r3
 80032bc:	d90c      	bls.n	80032d8 <u8g_IsBBXIntersection+0x70>
	return 1;
 80032be:	2001      	movs	r0, #1
 80032c0:	e000      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
    return 0; 
 80032c2:	2000      	movs	r0, #0
}
 80032c4:	bc70      	pop	{r4, r5, r6}
 80032c6:	4770      	bx	lr
    return 0; 
 80032c8:	2000      	movs	r0, #0
 80032ca:	e7fb      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
      return 1;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e7f9      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
	return 0;
 80032d0:	2000      	movs	r0, #0
 80032d2:	e7f7      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
      return 0;
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7f5      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>
	return 0;
 80032d8:	2000      	movs	r0, #0
 80032da:	e7f3      	b.n	80032c4 <u8g_IsBBXIntersection+0x5c>

080032dc <u8g_InitCom>:
*/

#include "../Drivers/u8glib/inc/u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 80032dc:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 80032de:	688c      	ldr	r4, [r1, #8]
 80032e0:	2300      	movs	r3, #0
 80032e2:	2101      	movs	r1, #1
 80032e4:	47a0      	blx	r4
}
 80032e6:	bd10      	pop	{r4, pc}

080032e8 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 80032e8:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 80032ea:	688c      	ldr	r4, [r1, #8]
 80032ec:	2300      	movs	r3, #0
 80032ee:	2103      	movs	r1, #3
 80032f0:	47a0      	blx	r4
}
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 80032f4:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 80032f6:	688c      	ldr	r4, [r1, #8]
 80032f8:	2300      	movs	r3, #0
 80032fa:	461a      	mov	r2, r3
 80032fc:	2104      	movs	r1, #4
 80032fe:	47a0      	blx	r4
}
 8003300:	bd10      	pop	{r4, pc}

08003302 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8003302:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8003304:	688c      	ldr	r4, [r1, #8]
 8003306:	2300      	movs	r3, #0
 8003308:	2201      	movs	r2, #1
 800330a:	2104      	movs	r1, #4
 800330c:	47a0      	blx	r4
}
 800330e:	bd10      	pop	{r4, pc}

08003310 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8003310:	b510      	push	{r4, lr}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8003312:	688c      	ldr	r4, [r1, #8]
 8003314:	2300      	movs	r3, #0
 8003316:	2102      	movs	r1, #2
 8003318:	47a0      	blx	r4
}
 800331a:	bd10      	pop	{r4, pc}

0800331c <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 800331c:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 800331e:	688c      	ldr	r4, [r1, #8]
 8003320:	2300      	movs	r3, #0
 8003322:	2105      	movs	r1, #5
 8003324:	47a0      	blx	r4
}
 8003326:	bd10      	pop	{r4, pc}

08003328 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8003328:	b510      	push	{r4, lr}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 800332a:	688c      	ldr	r4, [r1, #8]
 800332c:	2106      	movs	r1, #6
 800332e:	47a0      	blx	r4
}
 8003330:	bd10      	pop	{r4, pc}

08003332 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8003332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003336:	4607      	mov	r7, r0
 8003338:	460e      	mov	r6, r1
 800333a:	4615      	mov	r5, r2
  uint8_t is_escape = 0;
 800333c:	f04f 0800 	mov.w	r8, #0
 8003340:	e007      	b.n	8003352 <u8g_WriteEscSeqP+0x20>
    value = u8g_pgm_read(esc_seq);
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8003342:	4622      	mov	r2, r4
 8003344:	4631      	mov	r1, r6
 8003346:	4638      	mov	r0, r7
 8003348:	f7ff ffe8 	bl	800331c <u8g_WriteByte>
 800334c:	2800      	cmp	r0, #0
 800334e:	d05b      	beq.n	8003408 <u8g_WriteEscSeqP+0xd6>
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
 8003350:	3501      	adds	r5, #1
    value = u8g_pgm_read(esc_seq);
 8003352:	782c      	ldrb	r4, [r5, #0]
    if ( is_escape == 0 )
 8003354:	f1b8 0f00 	cmp.w	r8, #0
 8003358:	d104      	bne.n	8003364 <u8g_WriteEscSeqP+0x32>
      if ( value != 255 )
 800335a:	2cff      	cmp	r4, #255	; 0xff
 800335c:	d1f1      	bne.n	8003342 <u8g_WriteEscSeqP+0x10>
        is_escape = 1;
 800335e:	f04f 0801 	mov.w	r8, #1
 8003362:	e7f5      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
      if ( value == 255 )
 8003364:	2cff      	cmp	r4, #255	; 0xff
 8003366:	d011      	beq.n	800338c <u8g_WriteEscSeqP+0x5a>
      else if ( value == 254 )
 8003368:	2cfe      	cmp	r4, #254	; 0xfe
 800336a:	d04e      	beq.n	800340a <u8g_WriteEscSeqP+0xd8>
      else if ( value >= 0x0f0 )
 800336c:	2cef      	cmp	r4, #239	; 0xef
 800336e:	d845      	bhi.n	80033fc <u8g_WriteEscSeqP+0xca>
      else if ( value >= 0xe0  )
 8003370:	2cdf      	cmp	r4, #223	; 0xdf
 8003372:	d815      	bhi.n	80033a0 <u8g_WriteEscSeqP+0x6e>
      else if ( value >= 0xd0 )
 8003374:	2ccf      	cmp	r4, #207	; 0xcf
 8003376:	d81c      	bhi.n	80033b2 <u8g_WriteEscSeqP+0x80>
      else if ( value >= 0xc0 )
 8003378:	2cbf      	cmp	r4, #191	; 0xbf
 800337a:	d823      	bhi.n	80033c4 <u8g_WriteEscSeqP+0x92>
      else if ( value >= 0xbe )
 800337c:	2cbd      	cmp	r4, #189	; 0xbd
 800337e:	d840      	bhi.n	8003402 <u8g_WriteEscSeqP+0xd0>
      else if ( value <= 127 )
 8003380:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003384:	d034      	beq.n	80033f0 <u8g_WriteEscSeqP+0xbe>
      is_escape = 0;
 8003386:	f04f 0800 	mov.w	r8, #0
 800338a:	e7e1      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 800338c:	4622      	mov	r2, r4
 800338e:	4631      	mov	r1, r6
 8003390:	4638      	mov	r0, r7
 8003392:	f7ff ffc3 	bl	800331c <u8g_WriteByte>
 8003396:	4680      	mov	r8, r0
 8003398:	b3b8      	cbz	r0, 800340a <u8g_WriteEscSeqP+0xd8>
      is_escape = 0;
 800339a:	f04f 0800 	mov.w	r8, #0
 800339e:	e7d7      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
        u8g_SetAddress(u8g, dev, value & 0x0f);
 80033a0:	f004 020f 	and.w	r2, r4, #15
 80033a4:	4631      	mov	r1, r6
 80033a6:	4638      	mov	r0, r7
 80033a8:	f7ff ffb2 	bl	8003310 <u8g_SetAddress>
      is_escape = 0;
 80033ac:	f04f 0800 	mov.w	r8, #0
 80033b0:	e7ce      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 80033b2:	f004 020f 	and.w	r2, r4, #15
 80033b6:	4631      	mov	r1, r6
 80033b8:	4638      	mov	r0, r7
 80033ba:	f7ff ff95 	bl	80032e8 <u8g_SetChipSelect>
      is_escape = 0;
 80033be:	f04f 0800 	mov.w	r8, #0
 80033c2:	e7c5      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
        u8g_SetResetLow(u8g, dev);
 80033c4:	4631      	mov	r1, r6
 80033c6:	4638      	mov	r0, r7
 80033c8:	f7ff ff94 	bl	80032f4 <u8g_SetResetLow>
        value <<= 4;
 80033cc:	0124      	lsls	r4, r4, #4
 80033ce:	b2e4      	uxtb	r4, r4
        value+=2;
 80033d0:	3402      	adds	r4, #2
        u8g_Delay(value);
 80033d2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff fe56 	bl	8003088 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 80033dc:	4631      	mov	r1, r6
 80033de:	4638      	mov	r0, r7
 80033e0:	f7ff ff8f 	bl	8003302 <u8g_SetResetHigh>
        u8g_Delay(value);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff fe4f 	bl	8003088 <u8g_Delay>
      is_escape = 0;
 80033ea:	f04f 0800 	mov.w	r8, #0
 80033ee:	e7af      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
        u8g_Delay(value);
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7ff fe49 	bl	8003088 <u8g_Delay>
      is_escape = 0;
 80033f6:	f04f 0800 	mov.w	r8, #0
 80033fa:	e7a9      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
 80033fc:	f04f 0800 	mov.w	r8, #0
 8003400:	e7a6      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
 8003402:	f04f 0800 	mov.w	r8, #0
 8003406:	e7a3      	b.n	8003350 <u8g_WriteEscSeqP+0x1e>
          return 0;
 8003408:	4680      	mov	r8, r0
  }
  return 1;
}
 800340a:	4640      	mov	r0, r8
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003410 <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 8003410:	2001      	movs	r0, #1
 8003412:	4770      	bx	lr

08003414 <u8g_dev_ssd1306_128x32_2x_fn>:
  
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_128x32_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003418:	4605      	mov	r5, r0
 800341a:	460c      	mov	r4, r1
 800341c:	4616      	mov	r6, r2
 800341e:	461f      	mov	r7, r3
  switch(msg)
 8003420:	f1a2 030a 	sub.w	r3, r2, #10
 8003424:	2b0b      	cmp	r3, #11
 8003426:	d80f      	bhi.n	8003448 <u8g_dev_ssd1306_128x32_2x_fn+0x34>
 8003428:	e8df f003 	tbb	[pc, r3]
 800342c:	0e0e0e06 	.word	0x0e0e0e06
 8003430:	645f0e0e 	.word	0x645f0e0e
 8003434:	160e0e0e 	.word	0x160e0e0e
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8003438:	2202      	movs	r2, #2
 800343a:	f7ff ff4f 	bl	80032dc <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_init_seq);
 800343e:	4a30      	ldr	r2, [pc, #192]	; (8003500 <u8g_dev_ssd1306_128x32_2x_fn+0xec>)
 8003440:	4621      	mov	r1, r4
 8003442:	4628      	mov	r0, r5
 8003444:	f7ff ff75 	bl	8003332 <u8g_WriteEscSeqP>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 8003448:	463b      	mov	r3, r7
 800344a:	4632      	mov	r2, r6
 800344c:	4621      	mov	r1, r4
 800344e:	4628      	mov	r0, r5
 8003450:	f000 fbd7 	bl	8003c02 <u8g_dev_pb16v1_base_fn>
}
 8003454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003458:	f8d1 8004 	ldr.w	r8, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
 800345c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800350c <u8g_dev_ssd1306_128x32_2x_fn+0xf8>
 8003460:	464a      	mov	r2, r9
 8003462:	f7ff ff66 	bl	8003332 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2));	/* select current page (SSD1306) */
 8003466:	f898 2004 	ldrb.w	r2, [r8, #4]
 800346a:	0052      	lsls	r2, r2, #1
 800346c:	f062 024f 	orn	r2, r2, #79	; 0x4f
 8003470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003474:	4621      	mov	r1, r4
 8003476:	4628      	mov	r0, r5
 8003478:	f7ff ff50 	bl	800331c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
 800347c:	2201      	movs	r2, #1
 800347e:	4621      	mov	r1, r4
 8003480:	4628      	mov	r0, r5
 8003482:	f7ff ff45 	bl	8003310 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
 8003486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800348a:	f898 2005 	ldrb.w	r2, [r8, #5]
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f7ff ff49 	bl	8003328 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	4621      	mov	r1, r4
 800349a:	4628      	mov	r0, r5
 800349c:	f7ff ff24 	bl	80032e8 <u8g_SetChipSelect>
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
 80034a0:	464a      	mov	r2, r9
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f7ff ff44 	bl	8003332 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1));	/* select current page (SSD1306) */
 80034aa:	f898 2004 	ldrb.w	r2, [r8, #4]
 80034ae:	0052      	lsls	r2, r2, #1
 80034b0:	3201      	adds	r2, #1
 80034b2:	b252      	sxtb	r2, r2
 80034b4:	f062 024f 	orn	r2, r2, #79	; 0x4f
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	4621      	mov	r1, r4
 80034bc:	4628      	mov	r0, r5
 80034be:	f7ff ff2d 	bl	800331c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
 80034c2:	2201      	movs	r2, #1
 80034c4:	4621      	mov	r1, r4
 80034c6:	4628      	mov	r0, r5
 80034c8:	f7ff ff22 	bl	8003310 <u8g_SetAddress>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
 80034cc:	f898 2005 	ldrb.w	r2, [r8, #5]
 80034d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80034d4:	4413      	add	r3, r2
 80034d6:	4621      	mov	r1, r4
 80034d8:	4628      	mov	r0, r5
 80034da:	f7ff ff25 	bl	8003328 <u8g_WriteSequence>
        u8g_SetChipSelect(u8g, dev, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	4621      	mov	r1, r4
 80034e2:	4628      	mov	r0, r5
 80034e4:	f7ff ff00 	bl	80032e8 <u8g_SetChipSelect>
      break;
 80034e8:	e7ae      	b.n	8003448 <u8g_dev_ssd1306_128x32_2x_fn+0x34>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80034ea:	4a06      	ldr	r2, [pc, #24]	; (8003504 <u8g_dev_ssd1306_128x32_2x_fn+0xf0>)
 80034ec:	f7ff ff21 	bl	8003332 <u8g_WriteEscSeqP>
      return 1;
 80034f0:	2001      	movs	r0, #1
 80034f2:	e7af      	b.n	8003454 <u8g_dev_ssd1306_128x32_2x_fn+0x40>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <u8g_dev_ssd1306_128x32_2x_fn+0xf4>)
 80034f6:	f7ff ff1c 	bl	8003332 <u8g_WriteEscSeqP>
      return 1;
 80034fa:	2001      	movs	r0, #1
 80034fc:	e7aa      	b.n	8003454 <u8g_dev_ssd1306_128x32_2x_fn+0x40>
 80034fe:	bf00      	nop
 8003500:	0800942c 	.word	0x0800942c
 8003504:	08009468 	.word	0x08009468
 8003508:	0800945c 	.word	0x0800945c
 800350c:	08009454 	.word	0x08009454

08003510 <u8g_dev_ssd1309_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1309_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003514:	4605      	mov	r5, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4616      	mov	r6, r2
 800351a:	461f      	mov	r7, r3
  switch(msg)
 800351c:	3a0a      	subs	r2, #10
 800351e:	2a0b      	cmp	r2, #11
 8003520:	d80f      	bhi.n	8003542 <u8g_dev_ssd1309_128x64_fn+0x32>
 8003522:	e8df f002 	tbb	[pc, r2]
 8003526:	0e06      	.short	0x0e06
 8003528:	350e0e0e 	.word	0x350e0e0e
 800352c:	0e0e534e 	.word	0x0e0e534e
 8003530:	160e      	.short	0x160e
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8003532:	2202      	movs	r2, #2
 8003534:	f7ff fed2 	bl	80032dc <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_init_seq);
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <u8g_dev_ssd1309_128x64_fn+0xc8>)
 800353a:	4621      	mov	r1, r4
 800353c:	4628      	mov	r0, r5
 800353e:	f7ff fef8 	bl	8003332 <u8g_WriteEscSeqP>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8003542:	463b      	mov	r3, r7
 8003544:	4632      	mov	r2, r6
 8003546:	4621      	mov	r1, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f000 fc04 	bl	8003d56 <u8g_dev_pb8v1_base_fn>
}
 800354e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003552:	f8d1 8004 	ldr.w	r8, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_data_start);    
 8003556:	4a21      	ldr	r2, [pc, #132]	; (80035dc <u8g_dev_ssd1309_128x64_fn+0xcc>)
 8003558:	f7ff feeb 	bl	8003332 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 800355c:	f898 2004 	ldrb.w	r2, [r8, #4]
 8003560:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8003564:	4621      	mov	r1, r4
 8003566:	4628      	mov	r0, r5
 8003568:	f7ff fed8 	bl	800331c <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800356c:	2201      	movs	r2, #1
 800356e:	4621      	mov	r1, r4
 8003570:	4628      	mov	r0, r5
 8003572:	f7ff fecd 	bl	8003310 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8003576:	4622      	mov	r2, r4
 8003578:	4629      	mov	r1, r5
 800357a:	4640      	mov	r0, r8
 800357c:	f000 fad3 	bl	8003b26 <u8g_pb_WriteBuffer>
 8003580:	2800      	cmp	r0, #0
 8003582:	d0e4      	beq.n	800354e <u8g_dev_ssd1309_128x64_fn+0x3e>
        u8g_SetChipSelect(u8g, dev, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	4621      	mov	r1, r4
 8003588:	4628      	mov	r0, r5
 800358a:	f7ff fead 	bl	80032e8 <u8g_SetChipSelect>
      break;
 800358e:	e7d8      	b.n	8003542 <u8g_dev_ssd1309_128x64_fn+0x32>
      u8g_SetChipSelect(u8g, dev, 1);
 8003590:	2201      	movs	r2, #1
 8003592:	f7ff fea9 	bl	80032e8 <u8g_SetChipSelect>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
 8003596:	2200      	movs	r2, #0
 8003598:	4621      	mov	r1, r4
 800359a:	4628      	mov	r0, r5
 800359c:	f7ff feb8 	bl	8003310 <u8g_SetAddress>
      u8g_WriteByte(u8g, dev, 0x081);
 80035a0:	2281      	movs	r2, #129	; 0x81
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f7ff feb9 	bl	800331c <u8g_WriteByte>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) ); /* 11 Jul 2015: fixed contrast calculation */
 80035aa:	783a      	ldrb	r2, [r7, #0]
 80035ac:	4621      	mov	r1, r4
 80035ae:	4628      	mov	r0, r5
 80035b0:	f7ff feb4 	bl	800331c <u8g_WriteByte>
      u8g_SetChipSelect(u8g, dev, 0);      
 80035b4:	2200      	movs	r2, #0
 80035b6:	4621      	mov	r1, r4
 80035b8:	4628      	mov	r0, r5
 80035ba:	f7ff fe95 	bl	80032e8 <u8g_SetChipSelect>
      return 1; 
 80035be:	2001      	movs	r0, #1
 80035c0:	e7c5      	b.n	800354e <u8g_dev_ssd1309_128x64_fn+0x3e>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <u8g_dev_ssd1309_128x64_fn+0xd0>)
 80035c4:	f7ff feb5 	bl	8003332 <u8g_WriteEscSeqP>
      return 1;
 80035c8:	2001      	movs	r0, #1
 80035ca:	e7c0      	b.n	800354e <u8g_dev_ssd1309_128x64_fn+0x3e>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80035cc:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <u8g_dev_ssd1309_128x64_fn+0xd4>)
 80035ce:	f7ff feb0 	bl	8003332 <u8g_WriteEscSeqP>
      return 1;
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7bb      	b.n	800354e <u8g_dev_ssd1309_128x64_fn+0x3e>
 80035d6:	bf00      	nop
 80035d8:	0800947c 	.word	0x0800947c
 80035dc:	08009474 	.word	0x08009474
 80035e0:	080094b4 	.word	0x080094b4
 80035e4:	080094a8 	.word	0x080094a8

080035e8 <u8g_font_get_byte>:
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
}
 80035e8:	5c40      	ldrb	r0, [r0, r1]
 80035ea:	4770      	bx	lr

080035ec <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 80035ec:	1842      	adds	r2, r0, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 80035ee:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 80035f0:	7850      	ldrb	r0, [r2, #1]
 80035f2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 80035f6:	b280      	uxth	r0, r0
 80035f8:	4770      	bx	lr

080035fa <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 80035fa:	b508      	push	{r3, lr}
  return u8g_font_get_byte(font, 0);
 80035fc:	2100      	movs	r1, #0
 80035fe:	f7ff fff3 	bl	80035e8 <u8g_font_get_byte>
}
 8003602:	bd08      	pop	{r3, pc}

08003604 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8003604:	b508      	push	{r3, lr}
  switch(u8g_font_GetFormat(font))
 8003606:	f7ff fff8 	bl	80035fa <u8g_font_GetFormat>
 800360a:	2801      	cmp	r0, #1
 800360c:	d006      	beq.n	800361c <u8g_font_GetFontGlyphStructureSize+0x18>
 800360e:	2802      	cmp	r0, #2
 8003610:	d006      	beq.n	8003620 <u8g_font_GetFontGlyphStructureSize+0x1c>
 8003612:	b108      	cbz	r0, 8003618 <u8g_font_GetFontGlyphStructureSize+0x14>
  {
    case 0: return 6;
    case 1: return 3;
    case 2: return 6;
  }
  return 3;
 8003614:	2003      	movs	r0, #3
}
 8003616:	bd08      	pop	{r3, pc}
  switch(u8g_font_GetFormat(font))
 8003618:	2006      	movs	r0, #6
 800361a:	e7fc      	b.n	8003616 <u8g_font_GetFontGlyphStructureSize+0x12>
    case 1: return 3;
 800361c:	2003      	movs	r0, #3
 800361e:	e7fa      	b.n	8003616 <u8g_font_GetFontGlyphStructureSize+0x12>
  switch(u8g_font_GetFormat(font))
 8003620:	2006      	movs	r0, #6
 8003622:	e7f8      	b.n	8003616 <u8g_font_GetFontGlyphStructureSize+0x12>

08003624 <u8g_font_GetGlyphDataStart>:
  return u8g_font_get_byte(font, 16);
}

/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8003624:	b510      	push	{r4, lr}
 8003626:	460c      	mov	r4, r1
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8003628:	f7ff ffec 	bl	8003604 <u8g_font_GetFontGlyphStructureSize>
}
 800362c:	4420      	add	r0, r4
 800362e:	bd10      	pop	{r4, pc}

08003630 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4604      	mov	r4, r0
 8003634:	460d      	mov	r5, r1
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8003636:	6880      	ldr	r0, [r0, #8]
 8003638:	f7ff ffdf 	bl	80035fa <u8g_font_GetFormat>
 800363c:	b198      	cbz	r0, 8003666 <u8g_CopyGlyphDataToCache+0x36>
 800363e:	2802      	cmp	r0, #2
 8003640:	d011      	beq.n	8003666 <u8g_CopyGlyphDataToCache+0x36>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8003642:	782b      	ldrb	r3, [r5, #0]
      u8g->glyph_y =  tmp & 15;
 8003644:	f003 020f 	and.w	r2, r3, #15
      u8g->glyph_y-=2;
 8003648:	3a02      	subs	r2, #2
 800364a:	77a2      	strb	r2, [r4, #30]
      tmp >>= 4;
 800364c:	091b      	lsrs	r3, r3, #4
      u8g->glyph_x =  tmp;
 800364e:	7763      	strb	r3, [r4, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8003650:	786b      	ldrb	r3, [r5, #1]
      u8g->glyph_height =  tmp & 15;
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	f884 2020 	strb.w	r2, [r4, #32]
      tmp >>= 4;
 800365a:	091b      	lsrs	r3, r3, #4
      u8g->glyph_width =  tmp;
 800365c:	77e3      	strb	r3, [r4, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 800365e:	78ab      	ldrb	r3, [r5, #2]
      tmp >>= 4;
 8003660:	091b      	lsrs	r3, r3, #4
      u8g->glyph_dx = tmp;
 8003662:	7723      	strb	r3, [r4, #28]
    
      
      break;
  }
}
 8003664:	e00d      	b.n	8003682 <u8g_CopyGlyphDataToCache+0x52>
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8003666:	782b      	ldrb	r3, [r5, #0]
 8003668:	77e3      	strb	r3, [r4, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800366a:	786b      	ldrb	r3, [r5, #1]
 800366c:	f884 3020 	strb.w	r3, [r4, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8003670:	f995 3003 	ldrsb.w	r3, [r5, #3]
 8003674:	7723      	strb	r3, [r4, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8003676:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800367a:	7763      	strb	r3, [r4, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 800367c:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8003680:	77a3      	strb	r3, [r4, #30]
}
 8003682:	bd38      	pop	{r3, r4, r5, pc}

08003684 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	7703      	strb	r3, [r0, #28]
  u8g->glyph_width = 0;
 8003688:	77c3      	strb	r3, [r0, #31]
  u8g->glyph_height = 0;
 800368a:	f880 3020 	strb.w	r3, [r0, #32]
  u8g->glyph_x = 0;
 800368e:	7743      	strb	r3, [r0, #29]
  u8g->glyph_y = 0;
 8003690:	7783      	strb	r3, [r0, #30]
}
 8003692:	4770      	bx	lr

08003694 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 8003694:	2000      	movs	r0, #0
 8003696:	4770      	bx	lr

08003698 <u8g_font_GetEncoding65Pos>:
{
 8003698:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 6);
 800369a:	2106      	movs	r1, #6
 800369c:	f7ff ffa6 	bl	80035ec <u8g_font_get_word>
}
 80036a0:	bd08      	pop	{r3, pc}

080036a2 <u8g_font_GetEncoding97Pos>:
{
 80036a2:	b508      	push	{r3, lr}
    return u8g_font_get_word(font, 8);
 80036a4:	2108      	movs	r1, #8
 80036a6:	f7ff ffa1 	bl	80035ec <u8g_font_get_word>
}
 80036aa:	bd08      	pop	{r3, pc}

080036ac <u8g_font_GetFontStartEncoding>:
{
 80036ac:	b508      	push	{r3, lr}
  return u8g_font_get_byte(font, 10);
 80036ae:	210a      	movs	r1, #10
 80036b0:	f7ff ff9a 	bl	80035e8 <u8g_font_get_byte>
}
 80036b4:	bd08      	pop	{r3, pc}

080036b6 <u8g_font_GetFontEndEncoding>:
{
 80036b6:	b508      	push	{r3, lr}
  return u8g_font_get_byte(font, 11);
 80036b8:	210b      	movs	r1, #11
 80036ba:	f7ff ff95 	bl	80035e8 <u8g_font_get_byte>
}
 80036be:	bd08      	pop	{r3, pc}

080036c0 <u8g_GetGlyph>:
{
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	4682      	mov	sl, r0
 80036c6:	460f      	mov	r7, r1
  uint8_t *p = (uint8_t *)(u8g->font);
 80036c8:	6885      	ldr	r5, [r0, #8]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80036ca:	4628      	mov	r0, r5
 80036cc:	f7ff ff95 	bl	80035fa <u8g_font_GetFormat>
 80036d0:	4604      	mov	r4, r0
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 80036d2:	4628      	mov	r0, r5
 80036d4:	f7ff ff96 	bl	8003604 <u8g_font_GetFontGlyphStructureSize>
 80036d8:	4680      	mov	r8, r0
  if ( font_format == 1 )
 80036da:	2c01      	cmp	r4, #1
 80036dc:	d012      	beq.n	8003704 <u8g_GetGlyph+0x44>
  uint8_t mask = 255;
 80036de:	f04f 09ff 	mov.w	r9, #255	; 0xff
  start = u8g_font_GetFontStartEncoding(u8g->font);
 80036e2:	4628      	mov	r0, r5
 80036e4:	f7ff ffe2 	bl	80036ac <u8g_font_GetFontStartEncoding>
 80036e8:	4604      	mov	r4, r0
  end = u8g_font_GetFontEndEncoding(u8g->font);
 80036ea:	4628      	mov	r0, r5
 80036ec:	f7ff ffe3 	bl	80036b6 <u8g_font_GetFontEndEncoding>
 80036f0:	4606      	mov	r6, r0
  pos = u8g_font_GetEncoding97Pos(u8g->font);
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7ff ffd5 	bl	80036a2 <u8g_font_GetEncoding97Pos>
  if ( requested_encoding >= 97 && pos > 0 )
 80036f8:	2f60      	cmp	r7, #96	; 0x60
 80036fa:	d906      	bls.n	800370a <u8g_GetGlyph+0x4a>
 80036fc:	b128      	cbz	r0, 800370a <u8g_GetGlyph+0x4a>
    p+= pos;
 80036fe:	4405      	add	r5, r0
    start = 97;
 8003700:	2461      	movs	r4, #97	; 0x61
 8003702:	e00c      	b.n	800371e <u8g_GetGlyph+0x5e>
    mask = 15;
 8003704:	f04f 090f 	mov.w	r9, #15
 8003708:	e7eb      	b.n	80036e2 <u8g_GetGlyph+0x22>
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 800370a:	4628      	mov	r0, r5
 800370c:	f7ff ffc4 	bl	8003698 <u8g_font_GetEncoding65Pos>
    if ( requested_encoding >= 65 && pos > 0 )
 8003710:	2f40      	cmp	r7, #64	; 0x40
 8003712:	d903      	bls.n	800371c <u8g_GetGlyph+0x5c>
 8003714:	b110      	cbz	r0, 800371c <u8g_GetGlyph+0x5c>
      p+= pos;
 8003716:	4405      	add	r5, r0
      start = 65;
 8003718:	2441      	movs	r4, #65	; 0x41
 800371a:	e000      	b.n	800371e <u8g_GetGlyph+0x5e>
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 800371c:	3511      	adds	r5, #17
  if ( requested_encoding > end )
 800371e:	42be      	cmp	r6, r7
 8003720:	d308      	bcc.n	8003734 <u8g_GetGlyph+0x74>
  if ( i <= end )
 8003722:	42b4      	cmp	r4, r6
 8003724:	d910      	bls.n	8003748 <u8g_GetGlyph+0x88>
  u8g_FillEmptyGlyphCache(u8g);
 8003726:	4650      	mov	r0, sl
 8003728:	f7ff ffac 	bl	8003684 <u8g_FillEmptyGlyphCache>
  return NULL;
 800372c:	2500      	movs	r5, #0
}
 800372e:	4628      	mov	r0, r5
 8003730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g_FillEmptyGlyphCache(u8g);
 8003734:	4650      	mov	r0, sl
 8003736:	f7ff ffa5 	bl	8003684 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 800373a:	2500      	movs	r5, #0
 800373c:	e7f7      	b.n	800372e <u8g_GetGlyph+0x6e>
        p += 1;
 800373e:	3501      	adds	r5, #1
      if ( i == end )
 8003740:	42b4      	cmp	r4, r6
 8003742:	d0f0      	beq.n	8003726 <u8g_GetGlyph+0x66>
      i++;
 8003744:	3401      	adds	r4, #1
 8003746:	b2e4      	uxtb	r4, r4
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8003748:	782b      	ldrb	r3, [r5, #0]
 800374a:	2bff      	cmp	r3, #255	; 0xff
 800374c:	d0f7      	beq.n	800373e <u8g_GetGlyph+0x7e>
        if ( i == requested_encoding )
 800374e:	42bc      	cmp	r4, r7
 8003750:	d005      	beq.n	800375e <u8g_GetGlyph+0x9e>
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8003752:	78ab      	ldrb	r3, [r5, #2]
 8003754:	ea03 0309 	and.w	r3, r3, r9
        p += data_structure_size;
 8003758:	4443      	add	r3, r8
 800375a:	441d      	add	r5, r3
 800375c:	e7f0      	b.n	8003740 <u8g_GetGlyph+0x80>
          u8g_CopyGlyphDataToCache(u8g, p);
 800375e:	4629      	mov	r1, r5
 8003760:	4650      	mov	r0, sl
 8003762:	f7ff ff65 	bl	8003630 <u8g_CopyGlyphDataToCache>
          return p;
 8003766:	e7e2      	b.n	800372e <u8g_GetGlyph+0x6e>

08003768 <u8g_draw_glyph>:
{
 8003768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376c:	b085      	sub	sp, #20
 800376e:	4680      	mov	r8, r0
 8003770:	460f      	mov	r7, r1
 8003772:	4614      	mov	r4, r2
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8003774:	4619      	mov	r1, r3
 8003776:	f7ff ffa3 	bl	80036c0 <u8g_GetGlyph>
    if ( g == NULL  )
 800377a:	2800      	cmp	r0, #0
 800377c:	d049      	beq.n	8003812 <u8g_draw_glyph+0xaa>
 800377e:	4601      	mov	r1, r0
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8003780:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003784:	f7ff ff4e 	bl	8003624 <u8g_font_GetGlyphDataStart>
 8003788:	4606      	mov	r6, r0
  w = u8g->glyph_width;
 800378a:	f898 501f 	ldrb.w	r5, [r8, #31]
  h = u8g->glyph_height;
 800378e:	f898 b020 	ldrb.w	fp, [r8, #32]
  x += u8g->glyph_x;
 8003792:	f898 301d 	ldrb.w	r3, [r8, #29]
 8003796:	441f      	add	r7, r3
 8003798:	b2f9      	uxtb	r1, r7
 800379a:	9103      	str	r1, [sp, #12]
  y -= u8g->glyph_y;
 800379c:	f898 701e 	ldrb.w	r7, [r8, #30]
 80037a0:	1be7      	subs	r7, r4, r7
 80037a2:	b2ff      	uxtb	r7, r7
  y--;
 80037a4:	3f01      	subs	r7, #1
 80037a6:	b2ff      	uxtb	r7, r7
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 80037a8:	eba7 070b 	sub.w	r7, r7, fp
 80037ac:	b2ff      	uxtb	r7, r7
 80037ae:	3701      	adds	r7, #1
 80037b0:	b2ff      	uxtb	r7, r7
 80037b2:	f8cd b000 	str.w	fp, [sp]
 80037b6:	462b      	mov	r3, r5
 80037b8:	463a      	mov	r2, r7
 80037ba:	4640      	mov	r0, r8
 80037bc:	f7ff fd54 	bl	8003268 <u8g_IsBBXIntersection>
 80037c0:	b128      	cbz	r0, 80037ce <u8g_draw_glyph+0x66>
  w += 7;
 80037c2:	3507      	adds	r5, #7
  w /= 8;
 80037c4:	f3c5 09c4 	ubfx	r9, r5, #3, #5
  for( j = 0; j < h; j++ )
 80037c8:	f04f 0a00 	mov.w	sl, #0
 80037cc:	e017      	b.n	80037fe <u8g_draw_glyph+0x96>
    return u8g->glyph_dx;
 80037ce:	f998 001c 	ldrsb.w	r0, [r8, #28]
 80037d2:	e01b      	b.n	800380c <u8g_draw_glyph+0xa4>
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 80037d4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	463a      	mov	r2, r7
 80037de:	4629      	mov	r1, r5
 80037e0:	4640      	mov	r0, r8
 80037e2:	f000 f904 	bl	80039ee <u8g_Draw8Pixel>
      ix+=8;
 80037e6:	3508      	adds	r5, #8
 80037e8:	b2ed      	uxtb	r5, r5
    for( i = 0; i < w; i++ )
 80037ea:	3401      	adds	r4, #1
 80037ec:	b2e4      	uxtb	r4, r4
 80037ee:	454c      	cmp	r4, r9
 80037f0:	d3f0      	bcc.n	80037d4 <u8g_draw_glyph+0x6c>
    iy++;
 80037f2:	3701      	adds	r7, #1
 80037f4:	b2ff      	uxtb	r7, r7
  for( j = 0; j < h; j++ )
 80037f6:	f10a 0a01 	add.w	sl, sl, #1
 80037fa:	fa5f fa8a 	uxtb.w	sl, sl
 80037fe:	45da      	cmp	sl, fp
 8003800:	d202      	bcs.n	8003808 <u8g_draw_glyph+0xa0>
    ix = x;
 8003802:	9d03      	ldr	r5, [sp, #12]
    for( i = 0; i < w; i++ )
 8003804:	2400      	movs	r4, #0
 8003806:	e7f2      	b.n	80037ee <u8g_draw_glyph+0x86>
  return u8g->glyph_dx;
 8003808:	f998 001c 	ldrsb.w	r0, [r8, #28]
}
 800380c:	b005      	add	sp, #20
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return 0;
 8003812:	2000      	movs	r0, #0
 8003814:	e7fa      	b.n	800380c <u8g_draw_glyph+0xa4>

08003816 <u8g_DrawStr>:
{
 8003816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381a:	4607      	mov	r7, r0
 800381c:	460c      	mov	r4, r1
 800381e:	4616      	mov	r6, r2
 8003820:	461d      	mov	r5, r3
  y += u8g->font_calc_vref(u8g);
 8003822:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003824:	4798      	blx	r3
 8003826:	4406      	add	r6, r0
 8003828:	b2f6      	uxtb	r6, r6
  u8g_uint_t t = 0;
 800382a:	f04f 0800 	mov.w	r8, #0
  while( *s != '\0' )
 800382e:	782b      	ldrb	r3, [r5, #0]
 8003830:	b163      	cbz	r3, 800384c <u8g_DrawStr+0x36>
    d = u8g_draw_glyph(u8g, x, y, *s);
 8003832:	4632      	mov	r2, r6
 8003834:	4621      	mov	r1, r4
 8003836:	4638      	mov	r0, r7
 8003838:	f7ff ff96 	bl	8003768 <u8g_draw_glyph>
    x += d;
 800383c:	b2c0      	uxtb	r0, r0
 800383e:	4404      	add	r4, r0
 8003840:	b2e4      	uxtb	r4, r4
    t += d;
 8003842:	4440      	add	r0, r8
 8003844:	fa5f f880 	uxtb.w	r8, r0
    s++;
 8003848:	3501      	adds	r5, #1
 800384a:	e7f0      	b.n	800382e <u8g_DrawStr+0x18>
}
 800384c:	4640      	mov	r0, r8
 800384e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003854 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8003854:	4b01      	ldr	r3, [pc, #4]	; (800385c <u8g_SetFontPosBaseline+0x8>)
 8003856:	6243      	str	r3, [r0, #36]	; 0x24
}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	08003695 	.word	0x08003695

08003860 <u8g_call_dev_fn>:

#include <stddef.h>
#include "../Drivers/u8glib/inc/u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003860:	b510      	push	{r4, lr}
  return dev->dev_fn(u8g, dev, msg, arg); 
 8003862:	680c      	ldr	r4, [r1, #0]
 8003864:	47a0      	blx	r4
}
 8003866:	bd10      	pop	{r4, pc}

08003868 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800386e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003870:	2002      	movs	r0, #2
 8003872:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8003874:	2300      	movs	r3, #0
 8003876:	220a      	movs	r2, #10
 8003878:	4629      	mov	r1, r5
 800387a:	4620      	mov	r0, r4
 800387c:	f7ff fff0 	bl	8003860 <u8g_call_dev_fn>
 8003880:	4605      	mov	r5, r0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8003882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003884:	2003      	movs	r0, #3
 8003886:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8003888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800388a:	2000      	movs	r0, #0
 800388c:	4798      	blx	r3
  return r;
}
 800388e:	4628      	mov	r0, r5
 8003890:	bd38      	pop	{r3, r4, r5, pc}

08003892 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8003892:	b538      	push	{r3, r4, r5, lr}
 8003894:	4604      	mov	r4, r0
 8003896:	460d      	mov	r5, r1
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8003898:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800389a:	2002      	movs	r0, #2
 800389c:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800389e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038a0:	2001      	movs	r0, #1
 80038a2:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80038a4:	2300      	movs	r3, #0
 80038a6:	2214      	movs	r2, #20
 80038a8:	4629      	mov	r1, r5
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff ffd8 	bl	8003860 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80038b0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80038b4:	2217      	movs	r2, #23
 80038b6:	4629      	mov	r1, r5
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7ff ffd1 	bl	8003860 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80038be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038c0:	2000      	movs	r0, #0
 80038c2:	4798      	blx	r3
}
 80038c4:	bd38      	pop	{r3, r4, r5, pc}

080038c6 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80038c6:	b570      	push	{r4, r5, r6, lr}
 80038c8:	4604      	mov	r4, r0
 80038ca:	460d      	mov	r5, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80038cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038ce:	2002      	movs	r0, #2
 80038d0:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80038d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038d4:	2001      	movs	r0, #1
 80038d6:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 80038d8:	2300      	movs	r3, #0
 80038da:	2215      	movs	r2, #21
 80038dc:	4629      	mov	r1, r5
 80038de:	4620      	mov	r0, r4
 80038e0:	f7ff ffbe 	bl	8003860 <u8g_call_dev_fn>
  if ( r != 0 )
 80038e4:	4606      	mov	r6, r0
 80038e6:	b920      	cbnz	r0, 80038f2 <u8g_NextPageLL+0x2c>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80038e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038ea:	2000      	movs	r0, #0
 80038ec:	4798      	blx	r3
  return r;
}
 80038ee:	4630      	mov	r0, r6
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80038f2:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80038f6:	2217      	movs	r2, #23
 80038f8:	4629      	mov	r1, r5
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7ff ffb0 	bl	8003860 <u8g_call_dev_fn>
 8003900:	e7f2      	b.n	80038e8 <u8g_NextPageLL+0x22>

08003902 <u8g_SetContrastLL>:

uint8_t u8g_SetContrastLL(u8g_t *u8g, u8g_dev_t *dev, uint8_t contrast)
{  
 8003902:	b500      	push	{lr}
 8003904:	b083      	sub	sp, #12
 8003906:	f88d 2007 	strb.w	r2, [sp, #7]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_CONTRAST, &contrast);
 800390a:	f10d 0307 	add.w	r3, sp, #7
 800390e:	220f      	movs	r2, #15
 8003910:	f7ff ffa6 	bl	8003860 <u8g_call_dev_fn>
}
 8003914:	b003      	add	sp, #12
 8003916:	f85d fb04 	ldr.w	pc, [sp], #4

0800391a <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800391a:	b510      	push	{r4, lr}
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
 800391c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
  arg->y = y;
 8003920:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  arg->dir = dir;
 8003924:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003928:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  arg->pixel = pixel;
 800392c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003930:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8003934:	f100 032d 	add.w	r3, r0, #45	; 0x2d
 8003938:	223b      	movs	r2, #59	; 0x3b
 800393a:	f7ff ff91 	bl	8003860 <u8g_call_dev_fn>
}
 800393e:	bd10      	pop	{r4, pc}

08003940 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8003940:	b500      	push	{lr}
 8003942:	b083      	sub	sp, #12
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8003944:	f10d 0307 	add.w	r3, sp, #7
 8003948:	2246      	movs	r2, #70	; 0x46
 800394a:	f7ff ff89 	bl	8003860 <u8g_call_dev_fn>
  return r;
}
 800394e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003952:	b003      	add	sp, #12
 8003954:	f85d fb04 	ldr.w	pc, [sp], #4

08003958 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8003958:	b500      	push	{lr}
 800395a:	b083      	sub	sp, #12
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 800395c:	f10d 0307 	add.w	r3, sp, #7
 8003960:	2247      	movs	r2, #71	; 0x47
 8003962:	f7ff ff7d 	bl	8003860 <u8g_call_dev_fn>
  return r;
}
 8003966:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800396a:	b003      	add	sp, #12
 800396c:	f85d fb04 	ldr.w	pc, [sp], #4

08003970 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8003970:	b508      	push	{r3, lr}
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8003972:	2300      	movs	r3, #0
 8003974:	2248      	movs	r2, #72	; 0x48
 8003976:	f7ff ff73 	bl	8003860 <u8g_call_dev_fn>
}
 800397a:	bd08      	pop	{r3, pc}

0800397c <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 800397c:	b510      	push	{r4, lr}
 800397e:	4604      	mov	r4, r0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8003980:	6841      	ldr	r1, [r0, #4]
 8003982:	f7ff ffdd 	bl	8003940 <u8g_GetWidthLL>
 8003986:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8003988:	6861      	ldr	r1, [r4, #4]
 800398a:	4620      	mov	r0, r4
 800398c:	f7ff ffe4 	bl	8003958 <u8g_GetHeightLL>
 8003990:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8003992:	6861      	ldr	r1, [r4, #4]
 8003994:	4620      	mov	r0, r4
 8003996:	f7ff ffeb 	bl	8003970 <u8g_GetModeLL>
 800399a:	74e0      	strb	r0, [r4, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800399c:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80039a0:	2217      	movs	r2, #23
 80039a2:	6861      	ldr	r1, [r4, #4]
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff ff5b 	bl	8003860 <u8g_call_dev_fn>
}
 80039aa:	bd10      	pop	{r4, pc}

080039ac <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4604      	mov	r4, r0
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80039b0:	6841      	ldr	r1, [r0, #4]
 80039b2:	f7ff ff59 	bl	8003868 <u8g_InitLL>
 80039b6:	b900      	cbnz	r0, 80039ba <u8g_Begin+0xe>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
  return 1;
}
 80039b8:	bd10      	pop	{r4, pc}
  u8g_UpdateDimension(u8g);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff ffde 	bl	800397c <u8g_UpdateDimension>
  return 1;
 80039c0:	2001      	movs	r0, #1
 80039c2:	e7f9      	b.n	80039b8 <u8g_Begin+0xc>

080039c4 <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 80039c4:	b508      	push	{r3, lr}
  u8g_FirstPageLL(u8g, u8g->dev);
 80039c6:	6841      	ldr	r1, [r0, #4]
 80039c8:	f7ff ff63 	bl	8003892 <u8g_FirstPageLL>
}
 80039cc:	bd08      	pop	{r3, pc}

080039ce <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 80039ce:	b510      	push	{r4, lr}
 80039d0:	4604      	mov	r4, r0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 80039d2:	6983      	ldr	r3, [r0, #24]
 80039d4:	b103      	cbz	r3, 80039d8 <u8g_NextPage+0xa>
  {
    u8g->cursor_fn(u8g);
 80039d6:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 80039d8:	6861      	ldr	r1, [r4, #4]
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ff73 	bl	80038c6 <u8g_NextPageLL>
}
 80039e0:	bd10      	pop	{r4, pc}

080039e2 <u8g_SetContrast>:

uint8_t u8g_SetContrast(u8g_t *u8g, uint8_t contrast)
{
 80039e2:	b508      	push	{r3, lr}
 80039e4:	460a      	mov	r2, r1
  return u8g_SetContrastLL(u8g, u8g->dev, contrast);
 80039e6:	6841      	ldr	r1, [r0, #4]
 80039e8:	f7ff ff8b 	bl	8003902 <u8g_SetContrastLL>
}
 80039ec:	bd08      	pop	{r3, pc}

080039ee <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80039ee:	b530      	push	{r4, r5, lr}
 80039f0:	b083      	sub	sp, #12
 80039f2:	460c      	mov	r4, r1
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 80039f4:	6841      	ldr	r1, [r0, #4]
 80039f6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80039fa:	9501      	str	r5, [sp, #4]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	4622      	mov	r2, r4
 8003a02:	f7ff ff8a 	bl	800391a <u8g_Draw8PixelLL>
}
 8003a06:	b003      	add	sp, #12
 8003a08:	bd30      	pop	{r4, r5, pc}

08003a0a <u8g_SetColorIndex>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 8003a0a:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8003a0e:	4770      	bx	lr

08003a10 <u8g_init_data>:
{
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4604      	mov	r4, r0
  u8g->font = NULL;
 8003a14:	2500      	movs	r5, #0
 8003a16:	6085      	str	r5, [r0, #8]
  u8g->cursor_font = NULL;
 8003a18:	60c5      	str	r5, [r0, #12]
  u8g->cursor_bg_color = 0;
 8003a1a:	7445      	strb	r5, [r0, #17]
  u8g->cursor_fg_color = 1;
 8003a1c:	2601      	movs	r6, #1
 8003a1e:	7406      	strb	r6, [r0, #16]
  u8g->cursor_encoding = 34;
 8003a20:	2322      	movs	r3, #34	; 0x22
 8003a22:	7483      	strb	r3, [r0, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8003a24:	6185      	str	r5, [r0, #24]
  u8g_SetColorIndex(u8g, 1);
 8003a26:	4631      	mov	r1, r6
 8003a28:	f7ff ffef 	bl	8003a0a <u8g_SetColorIndex>
  u8g_SetFontPosBaseline(u8g);
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff ff11 	bl	8003854 <u8g_SetFontPosBaseline>
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8003a32:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8003a36:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8003a3a:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  u8g->line_spacing = 0;
 8003a44:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  u8g->state_cb = u8g_state_dummy_cb;
 8003a48:	4b01      	ldr	r3, [pc, #4]	; (8003a50 <u8g_init_data+0x40>)
 8003a4a:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003a4c:	bd70      	pop	{r4, r5, r6, pc}
 8003a4e:	bf00      	nop
 8003a50:	08003e81 	.word	0x08003e81

08003a54 <u8g_InitComFn>:
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4604      	mov	r4, r0
 8003a58:	460d      	mov	r5, r1
 8003a5a:	4616      	mov	r6, r2
  u8g_init_data(u8g);
 8003a5c:	f7ff ffd8 	bl	8003a10 <u8g_init_data>
  u8g->dev = dev;
 8003a60:	6065      	str	r5, [r4, #4]
  u8g->dev->com_fn = com_fn;
 8003a62:	60ae      	str	r6, [r5, #8]
  return u8g_Begin(u8g);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff ffa1 	bl	80039ac <u8g_Begin>
}
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}

08003a6c <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	7082      	strb	r2, [r0, #2]
  p->page_y1 = p->page_height;
 8003a70:	7803      	ldrb	r3, [r0, #0]
  p->page_y1--;
 8003a72:	3b01      	subs	r3, #1
 8003a74:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 8003a76:	7102      	strb	r2, [r0, #4]
}
 8003a78:	4770      	bx	lr

08003a7a <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8003a7a:	7802      	ldrb	r2, [r0, #0]
 8003a7c:	7883      	ldrb	r3, [r0, #2]
 8003a7e:	4413      	add	r3, r2
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	7083      	strb	r3, [r0, #2]
  if ( p->page_y0 >= p->total_height )
 8003a84:	7841      	ldrb	r1, [r0, #1]
 8003a86:	428b      	cmp	r3, r1
 8003a88:	d20c      	bcs.n	8003aa4 <u8g_page_Next+0x2a>
    return 0;
  p->page++;
 8003a8a:	7903      	ldrb	r3, [r0, #4]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	7103      	strb	r3, [r0, #4]
  y1 = p->page_y1;
 8003a90:	78c3      	ldrb	r3, [r0, #3]
  y1 += p->page_height;
 8003a92:	441a      	add	r2, r3
 8003a94:	b2d2      	uxtb	r2, r2
  if ( y1 >= p->total_height )
 8003a96:	4291      	cmp	r1, r2
 8003a98:	d801      	bhi.n	8003a9e <u8g_page_Next+0x24>
  {
    y1 = p->total_height;
    y1--;
 8003a9a:	1e4a      	subs	r2, r1, #1
 8003a9c:	b2d2      	uxtb	r2, r2
  }
  p->page_y1 = y1;
 8003a9e:	70c2      	strb	r2, [r0, #3]
  
  return 1;
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	4770      	bx	lr
    return 0;
 8003aa4:	2000      	movs	r0, #0
}
 8003aa6:	4770      	bx	lr

08003aa8 <u8g_pb_Clear>:

#include "../Drivers/u8glib/inc/u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8003aa8:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
 8003aaa:	7940      	ldrb	r0, [r0, #5]
 8003aac:	4418      	add	r0, r3
  do
  {
    *ptr++ = 0;
 8003aae:	461a      	mov	r2, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	7011      	strb	r1, [r2, #0]
  } while( ptr != end_ptr );
 8003ab6:	4298      	cmp	r0, r3
 8003ab8:	d1f9      	bne.n	8003aae <u8g_pb_Clear+0x6>
}
 8003aba:	4770      	bx	lr

08003abc <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8003abc:	b410      	push	{r4}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8003abe:	78c3      	ldrb	r3, [r0, #3]
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	bf34      	ite	cc
 8003ac4:	2300      	movcc	r3, #0
 8003ac6:	2301      	movcs	r3, #1
  c2 = v1 >= pb->p.page_y0;
 8003ac8:	7884      	ldrb	r4, [r0, #2]
  c3 = v0 > v1;
 8003aca:	4291      	cmp	r1, r2
 8003acc:	bf94      	ite	ls
 8003ace:	2100      	movls	r1, #0
 8003ad0:	2101      	movhi	r1, #1
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
  c1 |= c3;
 8003ad2:	ea43 0001 	orr.w	r0, r3, r1
 8003ad6:	4294      	cmp	r4, r2
 8003ad8:	bf8c      	ite	hi
 8003ada:	2000      	movhi	r0, #0
 8003adc:	f000 0001 	andls.w	r0, r0, #1
 8003ae0:	4019      	ands	r1, r3
  return c1 & 1;
}
 8003ae2:	4308      	orrs	r0, r1
 8003ae4:	bc10      	pop	{r4}
 8003ae6:	4770      	bx	lr

08003ae8 <u8g_pb_GetPageBox>:
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 8003aec:	7883      	ldrb	r3, [r0, #2]
 8003aee:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
 8003af0:	7943      	ldrb	r3, [r0, #5]
  box->x1--;
 8003af2:	3b01      	subs	r3, #1
 8003af4:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 8003af6:	78c3      	ldrb	r3, [r0, #3]
 8003af8:	70cb      	strb	r3, [r1, #3]
}
 8003afa:	4770      	bx	lr

08003afc <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003afc:	b508      	push	{r3, lr}
 8003afe:	460b      	mov	r3, r1
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8003b00:	7849      	ldrb	r1, [r1, #1]
  v1 = v0;
  switch( arg_pixel->dir )
 8003b02:	78db      	ldrb	r3, [r3, #3]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d005      	beq.n	8003b14 <u8g_pb_Is8PixelVisible+0x18>
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d007      	beq.n	8003b1c <u8g_pb_Is8PixelVisible+0x20>
 8003b0c:	460a      	mov	r2, r1
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8003b0e:	f7ff ffd5 	bl	8003abc <u8g_pb_IsYIntersection>
}
 8003b12:	bd08      	pop	{r3, pc}
      v1 += 8;          /* this is independent from the page height */
 8003b14:	f101 0208 	add.w	r2, r1, #8
 8003b18:	b2d2      	uxtb	r2, r2
      break;
 8003b1a:	e7f8      	b.n	8003b0e <u8g_pb_Is8PixelVisible+0x12>
      v0 -= 8;
 8003b1c:	f1a1 0308 	sub.w	r3, r1, #8
  v1 = v0;
 8003b20:	460a      	mov	r2, r1
      v0 -= 8;
 8003b22:	b2d9      	uxtb	r1, r3
      break;
 8003b24:	e7f3      	b.n	8003b0e <u8g_pb_Is8PixelVisible+0x12>

08003b26 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8003b26:	b510      	push	{r4, lr}
 8003b28:	4604      	mov	r4, r0
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	4611      	mov	r1, r2
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	7962      	ldrb	r2, [r4, #5]
 8003b32:	f7ff fbf9 	bl	8003328 <u8g_WriteSequence>
}
 8003b36:	bd10      	pop	{r4, pc}

08003b38 <u8g_pb16v1_Clear>:
void u8g_pb16v1_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel) U8G_NOINLINE;


void u8g_pb16v1_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
 8003b38:	6883      	ldr	r3, [r0, #8]
  uint8_t *end_ptr = ptr;
  end_ptr += b->width*2;
 8003b3a:	7940      	ldrb	r0, [r0, #5]
 8003b3c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  do
  {
    *ptr++ = 0;
 8003b40:	461a      	mov	r2, r3
 8003b42:	3301      	adds	r3, #1
 8003b44:	2100      	movs	r1, #0
 8003b46:	7011      	strb	r1, [r2, #0]
  } while( ptr != end_ptr );
 8003b48:	4298      	cmp	r0, r3
 8003b4a:	d1f9      	bne.n	8003b40 <u8g_pb16v1_Clear+0x8>
}
 8003b4c:	4770      	bx	lr

08003b4e <u8g_pb16v1_set_pixel>:
  b->width = width;
  u8g_pb16v1_Clear(b);
}

void u8g_pb16v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8003b4e:	b430      	push	{r4, r5}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8003b50:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 8003b52:	7885      	ldrb	r5, [r0, #2]
 8003b54:	1b52      	subs	r2, r2, r5
 8003b56:	b2d2      	uxtb	r2, r2
  if ( y >= 8 )
 8003b58:	2a07      	cmp	r2, #7
 8003b5a:	d903      	bls.n	8003b64 <u8g_pb16v1_set_pixel+0x16>
  {
    ptr += b->width;
 8003b5c:	7940      	ldrb	r0, [r0, #5]
 8003b5e:	4404      	add	r4, r0
    y &= 0x07;
 8003b60:	f002 0207 	and.w	r2, r2, #7
  }
  mask = 1;
  mask <<= y;
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	b2d2      	uxtb	r2, r2
  ptr += x;
  if ( color_index )
 8003b6c:	b123      	cbz	r3, 8003b78 <u8g_pb16v1_set_pixel+0x2a>
  {
    *ptr |= mask;
 8003b6e:	5c63      	ldrb	r3, [r4, r1]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	5462      	strb	r2, [r4, r1]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8003b74:	bc30      	pop	{r4, r5}
 8003b76:	4770      	bx	lr
    *ptr &= mask;
 8003b78:	5c63      	ldrb	r3, [r4, r1]
 8003b7a:	ea23 0202 	bic.w	r2, r3, r2
 8003b7e:	5462      	strb	r2, [r4, r1]
}
 8003b80:	e7f8      	b.n	8003b74 <u8g_pb16v1_set_pixel+0x26>

08003b82 <u8g_pb16v1_SetPixel>:


void u8g_pb16v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
  if ( arg_pixel->y < b->p.page_y0 )
 8003b82:	784a      	ldrb	r2, [r1, #1]
 8003b84:	7883      	ldrb	r3, [r0, #2]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d30d      	bcc.n	8003ba6 <u8g_pb16v1_SetPixel+0x24>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8003b8a:	78c3      	ldrb	r3, [r0, #3]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d80a      	bhi.n	8003ba6 <u8g_pb16v1_SetPixel+0x24>
{
 8003b90:	b510      	push	{r4, lr}
    return;
  if ( arg_pixel->x >= b->width )
 8003b92:	780c      	ldrb	r4, [r1, #0]
 8003b94:	7943      	ldrb	r3, [r0, #5]
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d300      	bcc.n	8003b9c <u8g_pb16v1_SetPixel+0x1a>
    return;
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
}
 8003b9a:	bd10      	pop	{r4, pc}
  u8g_pb16v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8003b9c:	790b      	ldrb	r3, [r1, #4]
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f7ff ffd5 	bl	8003b4e <u8g_pb16v1_set_pixel>
 8003ba4:	e7f9      	b.n	8003b9a <u8g_pb16v1_SetPixel+0x18>
 8003ba6:	4770      	bx	lr

08003ba8 <u8g_pb16v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb16v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	4680      	mov	r8, r0
 8003bae:	460d      	mov	r5, r1
  register uint8_t pixel = arg_pixel->pixel;
 8003bb0:	788c      	ldrb	r4, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8003bb2:	78ce      	ldrb	r6, [r1, #3]
 8003bb4:	2e03      	cmp	r6, #3
 8003bb6:	d803      	bhi.n	8003bc0 <u8g_pb16v1_Set8PixelOpt2+0x18>
 8003bb8:	e8df f006 	tbb	[pc, r6]
 8003bbc:	0a07050d 	.word	0x0a07050d
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	4637      	mov	r7, r6
 8003bc4:	e013      	b.n	8003bee <u8g_pb16v1_Set8PixelOpt2+0x46>
  u8g_uint_t dx = 0;
 8003bc6:	2700      	movs	r7, #0
  {
    case 0: dx++; break;
    case 1: dy++; break;
 8003bc8:	e011      	b.n	8003bee <u8g_pb16v1_Set8PixelOpt2+0x46>
  u8g_uint_t dy = 0;
 8003bca:	2600      	movs	r6, #0
    case 2: dx--; break;
 8003bcc:	27ff      	movs	r7, #255	; 0xff
 8003bce:	e00e      	b.n	8003bee <u8g_pb16v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
 8003bd0:	26ff      	movs	r6, #255	; 0xff
  u8g_uint_t dx = 0;
 8003bd2:	2700      	movs	r7, #0
    case 3: dy--; break;
 8003bd4:	e00b      	b.n	8003bee <u8g_pb16v1_Set8PixelOpt2+0x46>
    case 0: dx++; break;
 8003bd6:	2701      	movs	r7, #1
 8003bd8:	e009      	b.n	8003bee <u8g_pb16v1_Set8PixelOpt2+0x46>
  
  do
  {
    if ( pixel & 128 )
      u8g_pb16v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8003bda:	782b      	ldrb	r3, [r5, #0]
 8003bdc:	443b      	add	r3, r7
 8003bde:	702b      	strb	r3, [r5, #0]
    arg_pixel->y += dy;
 8003be0:	786b      	ldrb	r3, [r5, #1]
 8003be2:	4433      	add	r3, r6
 8003be4:	706b      	strb	r3, [r5, #1]
    pixel <<= 1;
 8003be6:	0064      	lsls	r4, r4, #1
  } while( pixel != 0  );
 8003be8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003bec:	d007      	beq.n	8003bfe <u8g_pb16v1_Set8PixelOpt2+0x56>
    if ( pixel & 128 )
 8003bee:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003bf2:	d0f2      	beq.n	8003bda <u8g_pb16v1_Set8PixelOpt2+0x32>
      u8g_pb16v1_SetPixel(b, arg_pixel);
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	f7ff ffc3 	bl	8003b82 <u8g_pb16v1_SetPixel>
 8003bfc:	e7ed      	b.n	8003bda <u8g_pb16v1_Set8PixelOpt2+0x32>
  
}
 8003bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c02 <u8g_dev_pb16v1_base_fn>:

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003c02:	b538      	push	{r3, r4, r5, lr}
 8003c04:	461c      	mov	r4, r3
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003c06:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8003c08:	3a14      	subs	r2, #20
 8003c0a:	2a33      	cmp	r2, #51	; 0x33
 8003c0c:	d84d      	bhi.n	8003caa <u8g_dev_pb16v1_base_fn+0xa8>
 8003c0e:	e8df f002 	tbb	[pc, r2]
 8003c12:	352d      	.short	0x352d
 8003c14:	4c4c3e4c 	.word	0x4c4c3e4c
 8003c18:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c1c:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c20:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c24:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c28:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c2c:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c30:	4c4c4c27 	.word	0x4c4c4c27
 8003c34:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c38:	4c4c1a4c 	.word	0x4c4c1a4c
 8003c3c:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c40:	4c4c4c4c 	.word	0x4c4c4c4c
 8003c44:	4844      	.short	0x4844
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff ff57 	bl	8003afc <u8g_pb_Is8PixelVisible>
 8003c4e:	b908      	cbnz	r0, 8003c54 <u8g_dev_pb16v1_base_fn+0x52>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e02b      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
        u8g_pb16v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7ff ffa6 	bl	8003ba8 <u8g_pb16v1_Set8PixelOpt2>
  return 1;
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	e025      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
        u8g_pb16v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8003c60:	4621      	mov	r1, r4
 8003c62:	4628      	mov	r0, r5
 8003c64:	f7ff ff8d 	bl	8003b82 <u8g_pb16v1_SetPixel>
  return 1;
 8003c68:	2001      	movs	r0, #1
      break;
 8003c6a:	e01f      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
      u8g_pb16v1_Clear(pb);
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f7ff ff63 	bl	8003b38 <u8g_pb16v1_Clear>
      u8g_page_First(&(pb->p));
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7ff fefa 	bl	8003a6c <u8g_page_First>
  return 1;
 8003c78:	2001      	movs	r0, #1
      break;
 8003c7a:	e017      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff fefc 	bl	8003a7a <u8g_page_Next>
 8003c82:	b198      	cbz	r0, 8003cac <u8g_dev_pb16v1_base_fn+0xaa>
      u8g_pb16v1_Clear(pb);
 8003c84:	4628      	mov	r0, r5
 8003c86:	f7ff ff57 	bl	8003b38 <u8g_pb16v1_Clear>
  return 1;
 8003c8a:	2001      	movs	r0, #1
      break;
 8003c8c:	e00e      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8003c8e:	4621      	mov	r1, r4
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7ff ff29 	bl	8003ae8 <u8g_pb_GetPageBox>
  return 1;
 8003c96:	2001      	movs	r0, #1
      break;
 8003c98:	e008      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
      *((u8g_uint_t *)arg) = pb->width;
 8003c9a:	796b      	ldrb	r3, [r5, #5]
 8003c9c:	7023      	strb	r3, [r4, #0]
  return 1;
 8003c9e:	2001      	movs	r0, #1
      break;
 8003ca0:	e004      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8003ca2:	786b      	ldrb	r3, [r5, #1]
 8003ca4:	7023      	strb	r3, [r4, #0]
  return 1;
 8003ca6:	2001      	movs	r0, #1
      break;
 8003ca8:	e000      	b.n	8003cac <u8g_dev_pb16v1_base_fn+0xaa>
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003caa:	2001      	movs	r0, #1
}
 8003cac:	bd38      	pop	{r3, r4, r5, pc}

08003cae <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8003cae:	b410      	push	{r4}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8003cb0:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 8003cb2:	7880      	ldrb	r0, [r0, #2]
 8003cb4:	1a12      	subs	r2, r2, r0
  mask = 1;
  y &= 0x07;
 8003cb6:	f002 0007 	and.w	r0, r2, #7
  mask <<= y;
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4082      	lsls	r2, r0
 8003cbe:	b2d2      	uxtb	r2, r2
  ptr += x;
  if ( color_index )
 8003cc0:	b123      	cbz	r3, 8003ccc <u8g_pb8v1_set_pixel+0x1e>
  {
    *ptr |= mask;
 8003cc2:	5c63      	ldrb	r3, [r4, r1]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	5462      	strb	r2, [r4, r1]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8003cc8:	bc10      	pop	{r4}
 8003cca:	4770      	bx	lr
    *ptr &= mask;
 8003ccc:	5c63      	ldrb	r3, [r4, r1]
 8003cce:	ea23 0202 	bic.w	r2, r3, r2
 8003cd2:	5462      	strb	r2, [r4, r1]
}
 8003cd4:	e7f8      	b.n	8003cc8 <u8g_pb8v1_set_pixel+0x1a>

08003cd6 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
  if ( arg_pixel->y < b->p.page_y0 )
 8003cd6:	784a      	ldrb	r2, [r1, #1]
 8003cd8:	7883      	ldrb	r3, [r0, #2]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d30d      	bcc.n	8003cfa <u8g_pb8v1_SetPixel+0x24>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8003cde:	78c3      	ldrb	r3, [r0, #3]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d80a      	bhi.n	8003cfa <u8g_pb8v1_SetPixel+0x24>
{
 8003ce4:	b510      	push	{r4, lr}
    return;
  if ( arg_pixel->x >= b->width )
 8003ce6:	780c      	ldrb	r4, [r1, #0]
 8003ce8:	7943      	ldrb	r3, [r0, #5]
 8003cea:	429c      	cmp	r4, r3
 8003cec:	d300      	bcc.n	8003cf0 <u8g_pb8v1_SetPixel+0x1a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
}
 8003cee:	bd10      	pop	{r4, pc}
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8003cf0:	790b      	ldrb	r3, [r1, #4]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f7ff ffdb 	bl	8003cae <u8g_pb8v1_set_pixel>
 8003cf8:	e7f9      	b.n	8003cee <u8g_pb8v1_SetPixel+0x18>
 8003cfa:	4770      	bx	lr

08003cfc <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d00:	4680      	mov	r8, r0
 8003d02:	460d      	mov	r5, r1
  register uint8_t pixel = arg_pixel->pixel;
 8003d04:	788c      	ldrb	r4, [r1, #2]
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8003d06:	78ce      	ldrb	r6, [r1, #3]
 8003d08:	2e03      	cmp	r6, #3
 8003d0a:	d803      	bhi.n	8003d14 <u8g_pb8v1_Set8PixelOpt2+0x18>
 8003d0c:	e8df f006 	tbb	[pc, r6]
 8003d10:	0a07050d 	.word	0x0a07050d
 8003d14:	2600      	movs	r6, #0
 8003d16:	4637      	mov	r7, r6
 8003d18:	e013      	b.n	8003d42 <u8g_pb8v1_Set8PixelOpt2+0x46>
  u8g_uint_t dx = 0;
 8003d1a:	2700      	movs	r7, #0
  {
    case 0: dx++; break;
    case 1: dy++; break;
 8003d1c:	e011      	b.n	8003d42 <u8g_pb8v1_Set8PixelOpt2+0x46>
  u8g_uint_t dy = 0;
 8003d1e:	2600      	movs	r6, #0
    case 2: dx--; break;
 8003d20:	27ff      	movs	r7, #255	; 0xff
 8003d22:	e00e      	b.n	8003d42 <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
 8003d24:	26ff      	movs	r6, #255	; 0xff
  u8g_uint_t dx = 0;
 8003d26:	2700      	movs	r7, #0
    case 3: dy--; break;
 8003d28:	e00b      	b.n	8003d42 <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 0: dx++; break;
 8003d2a:	2701      	movs	r7, #1
 8003d2c:	e009      	b.n	8003d42 <u8g_pb8v1_Set8PixelOpt2+0x46>
  
  do
  {
    if ( pixel & 128 )
      u8g_pb8v1_SetPixel(b, arg_pixel);
    arg_pixel->x += dx;
 8003d2e:	782b      	ldrb	r3, [r5, #0]
 8003d30:	443b      	add	r3, r7
 8003d32:	702b      	strb	r3, [r5, #0]
    arg_pixel->y += dy;
 8003d34:	786b      	ldrb	r3, [r5, #1]
 8003d36:	4433      	add	r3, r6
 8003d38:	706b      	strb	r3, [r5, #1]
    pixel <<= 1;
 8003d3a:	0064      	lsls	r4, r4, #1
  } while( pixel != 0  );
 8003d3c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003d40:	d007      	beq.n	8003d52 <u8g_pb8v1_Set8PixelOpt2+0x56>
    if ( pixel & 128 )
 8003d42:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003d46:	d0f2      	beq.n	8003d2e <u8g_pb8v1_Set8PixelOpt2+0x32>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	f7ff ffc3 	bl	8003cd6 <u8g_pb8v1_SetPixel>
 8003d50:	e7ed      	b.n	8003d2e <u8g_pb8v1_Set8PixelOpt2+0x32>
  
}
 8003d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d56 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003d56:	b538      	push	{r3, r4, r5, lr}
 8003d58:	461c      	mov	r4, r3
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003d5a:	684d      	ldr	r5, [r1, #4]
  switch(msg)
 8003d5c:	3a14      	subs	r2, #20
 8003d5e:	2a33      	cmp	r2, #51	; 0x33
 8003d60:	d84d      	bhi.n	8003dfe <u8g_dev_pb8v1_base_fn+0xa8>
 8003d62:	e8df f002 	tbb	[pc, r2]
 8003d66:	352d      	.short	0x352d
 8003d68:	4c4c3e4c 	.word	0x4c4c3e4c
 8003d6c:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d70:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d74:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d78:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d7c:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d80:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d84:	4c4c4c27 	.word	0x4c4c4c27
 8003d88:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d8c:	4c4c1a4c 	.word	0x4c4c1a4c
 8003d90:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d94:	4c4c4c4c 	.word	0x4c4c4c4c
 8003d98:	4844      	.short	0x4844
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f7ff fead 	bl	8003afc <u8g_pb_Is8PixelVisible>
 8003da2:	b908      	cbnz	r0, 8003da8 <u8g_dev_pb8v1_base_fn+0x52>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 8003da4:	2001      	movs	r0, #1
 8003da6:	e02b      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f7ff ffa6 	bl	8003cfc <u8g_pb8v1_Set8PixelOpt2>
  return 1;
 8003db0:	2001      	movs	r0, #1
 8003db2:	e025      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8003db4:	4621      	mov	r1, r4
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7ff ff8d 	bl	8003cd6 <u8g_pb8v1_SetPixel>
  return 1;
 8003dbc:	2001      	movs	r0, #1
      break;
 8003dbe:	e01f      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
      u8g_pb_Clear(pb);
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f7ff fe71 	bl	8003aa8 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f7ff fe50 	bl	8003a6c <u8g_page_First>
  return 1;
 8003dcc:	2001      	movs	r0, #1
      break;
 8003dce:	e017      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f7ff fe52 	bl	8003a7a <u8g_page_Next>
 8003dd6:	b198      	cbz	r0, 8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
      u8g_pb_Clear(pb);
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f7ff fe65 	bl	8003aa8 <u8g_pb_Clear>
  return 1;
 8003dde:	2001      	movs	r0, #1
      break;
 8003de0:	e00e      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7ff fe7f 	bl	8003ae8 <u8g_pb_GetPageBox>
  return 1;
 8003dea:	2001      	movs	r0, #1
      break;
 8003dec:	e008      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
      *((u8g_uint_t *)arg) = pb->width;
 8003dee:	796b      	ldrb	r3, [r5, #5]
 8003df0:	7023      	strb	r3, [r4, #0]
  return 1;
 8003df2:	2001      	movs	r0, #1
      break;
 8003df4:	e004      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8003df6:	786b      	ldrb	r3, [r5, #1]
 8003df8:	7023      	strb	r3, [r4, #0]
  return 1;
 8003dfa:	2001      	movs	r0, #1
      break;
 8003dfc:	e000      	b.n	8003e00 <u8g_dev_pb8v1_base_fn+0xaa>
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003dfe:	2001      	movs	r0, #1
}
 8003e00:	bd38      	pop	{r3, r4, r5, pc}

08003e02 <u8g_draw_hline>:
*/

#include "../Drivers/u8glib/inc/u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 8003e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e04:	b083      	sub	sp, #12
 8003e06:	4606      	mov	r6, r0
 8003e08:	460d      	mov	r5, r1
 8003e0a:	4617      	mov	r7, r2
 8003e0c:	461c      	mov	r4, r3
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
 8003e0e:	2c07      	cmp	r4, #7
 8003e10:	d90c      	bls.n	8003e2c <u8g_draw_hline+0x2a>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8003e12:	23ff      	movs	r3, #255	; 0xff
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	463a      	mov	r2, r7
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff fde6 	bl	80039ee <u8g_Draw8Pixel>
    w-=8;
 8003e22:	3c08      	subs	r4, #8
 8003e24:	b2e4      	uxtb	r4, r4
    x+=8;
 8003e26:	3508      	adds	r5, #8
 8003e28:	b2ed      	uxtb	r5, r5
 8003e2a:	e7f0      	b.n	8003e0e <u8g_draw_hline+0xc>
  }
  if ( w != 0 )
 8003e2c:	b90c      	cbnz	r4, 8003e32 <u8g_draw_hline+0x30>
    w ^=7;
    w++;
    pixel <<= w&7;
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
  }
}
 8003e2e:	b003      	add	sp, #12
 8003e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    w ^=7;
 8003e32:	f084 0307 	eor.w	r3, r4, #7
    w++;
 8003e36:	3301      	adds	r3, #1
    pixel <<= w&7;
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	22ff      	movs	r2, #255	; 0xff
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	b2db      	uxtb	r3, r3
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2300      	movs	r3, #0
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f7ff fdce 	bl	80039ee <u8g_Draw8Pixel>
}
 8003e52:	e7ec      	b.n	8003e2e <u8g_draw_hline+0x2c>

08003e54 <u8g_DrawHLine>:
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
  }
}

void u8g_DrawHLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	b083      	sub	sp, #12
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	4616      	mov	r6, r2
 8003e5e:	461f      	mov	r7, r3
  if ( u8g_IsBBXIntersection(u8g, x, y, w, 1) == 0 )
 8003e60:	f04f 0c01 	mov.w	ip, #1
 8003e64:	f8cd c000 	str.w	ip, [sp]
 8003e68:	f7ff f9fe 	bl	8003268 <u8g_IsBBXIntersection>
 8003e6c:	b908      	cbnz	r0, 8003e72 <u8g_DrawHLine+0x1e>
    return;
  u8g_draw_hline(u8g, x, y, w);
}
 8003e6e:	b003      	add	sp, #12
 8003e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  u8g_draw_hline(u8g, x, y, w);
 8003e72:	463b      	mov	r3, r7
 8003e74:	4632      	mov	r2, r6
 8003e76:	4629      	mov	r1, r5
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f7ff ffc2 	bl	8003e02 <u8g_draw_hline>
 8003e7e:	e7f6      	b.n	8003e6e <u8g_DrawHLine+0x1a>

08003e80 <u8g_state_dummy_cb>:
#include "../Drivers/u8glib/inc/u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
  /* the dummy procedure does nothing */
}
 8003e80:	4770      	bx	lr
	...

08003e84 <display_battery>:
/* Variables */
u8g_t u8g_big;
u8g_t u8g_small;

void display_battery(double value) //USE OLED #1 (LEFT) to display battery level
{
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	4604      	mov	r4, r0
 8003e8a:	460d      	mov	r5, r1
	char output[10] = "";
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	9605      	str	r6, [sp, #20]
 8003e90:	9606      	str	r6, [sp, #24]
 8003e92:	f8ad 601c 	strh.w	r6, [sp, #28]
	snprintf(output, 10, "%4.1f", value); //Convert to string and format
 8003e96:	e9cd 4500 	strd	r4, r5, [sp]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <display_battery+0x74>)
 8003e9c:	210a      	movs	r1, #10
 8003e9e:	a805      	add	r0, sp, #20
 8003ea0:	f002 f870 	bl	8005f84 <sniprintf>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, 10); //USTAW ADRES
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	9601      	str	r6, [sp, #4]
 8003eaa:	9600      	str	r6, [sp, #0]
 8003eac:	2301      	movs	r3, #1
 8003eae:	2204      	movs	r2, #4
 8003eb0:	21e0      	movs	r1, #224	; 0xe0
 8003eb2:	4812      	ldr	r0, [pc, #72]	; (8003efc <display_battery+0x78>)
 8003eb4:	f7fd fef2 	bl	8001c9c <HAL_I2C_Mem_Write>
	//u8g_small.font = u8g_font_fub30r;

	u8g_FirstPage(&u8g_small);
 8003eb8:	4811      	ldr	r0, [pc, #68]	; (8003f00 <display_battery+0x7c>)
 8003eba:	f7ff fd83 	bl	80039c4 <u8g_FirstPage>
 8003ebe:	e009      	b.n	8003ed4 <display_battery+0x50>
	do {
		if (value <= 9) {
			u8g_DrawStr(&u8g_small, 31, 32, output);
 8003ec0:	ab05      	add	r3, sp, #20
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	211f      	movs	r1, #31
 8003ec6:	480e      	ldr	r0, [pc, #56]	; (8003f00 <display_battery+0x7c>)
 8003ec8:	f7ff fca5 	bl	8003816 <u8g_DrawStr>
		} else {
			u8g_DrawStr(&u8g_small, 20, 32, output);
		}

	} while (u8g_NextPage(&u8g_small));
 8003ecc:	480c      	ldr	r0, [pc, #48]	; (8003f00 <display_battery+0x7c>)
 8003ece:	f7ff fd7e 	bl	80039ce <u8g_NextPage>
 8003ed2:	b170      	cbz	r0, 8003ef2 <display_battery+0x6e>
		if (value <= 9) {
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <display_battery+0x80>)
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	f7fc fde4 	bl	8000aa8 <__aeabi_dcmple>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d1ed      	bne.n	8003ec0 <display_battery+0x3c>
			u8g_DrawStr(&u8g_small, 20, 32, output);
 8003ee4:	ab05      	add	r3, sp, #20
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	2114      	movs	r1, #20
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <display_battery+0x7c>)
 8003eec:	f7ff fc93 	bl	8003816 <u8g_DrawStr>
 8003ef0:	e7ec      	b.n	8003ecc <display_battery+0x48>

}
 8003ef2:	b008      	add	sp, #32
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
 8003ef6:	bf00      	nop
 8003ef8:	0800c490 	.word	0x0800c490
 8003efc:	2000050c 	.word	0x2000050c
 8003f00:	20000438 	.word	0x20000438
 8003f04:	40220000 	.word	0x40220000

08003f08 <display_gear>:

void display_gear(int state) //USE OLED #2 (CENTER) to display gear setting (R N D)
{
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	4604      	mov	r4, r0
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 10, 10, 0, 0, 10); //USTAW ADRES
 8003f0e:	220a      	movs	r2, #10
 8003f10:	9202      	str	r2, [sp, #8]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	21e0      	movs	r1, #224	; 0xe0
 8003f1c:	4822      	ldr	r0, [pc, #136]	; (8003fa8 <display_gear+0xa0>)
 8003f1e:	f7fd febd 	bl	8001c9c <HAL_I2C_Mem_Write>
	switch (state) {
 8003f22:	2c01      	cmp	r4, #1
 8003f24:	d018      	beq.n	8003f58 <display_gear+0x50>
 8003f26:	2c02      	cmp	r4, #2
 8003f28:	d02a      	beq.n	8003f80 <display_gear+0x78>
 8003f2a:	b10c      	cbz	r4, 8003f30 <display_gear+0x28>
			u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, reverse);
		} while (u8g_NextPage(&u8g_small));

		break;
	}
}
 8003f2c:	b004      	add	sp, #16
 8003f2e:	bd10      	pop	{r4, pc}
		u8g_FirstPage(&u8g_small);
 8003f30:	481e      	ldr	r0, [pc, #120]	; (8003fac <display_gear+0xa4>)
 8003f32:	f7ff fd47 	bl	80039c4 <u8g_FirstPage>
			u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, neutral);
 8003f36:	4c1d      	ldr	r4, [pc, #116]	; (8003fac <display_gear+0xa4>)
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <display_gear+0xa8>)
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	2340      	movs	r3, #64	; 0x40
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2310      	movs	r3, #16
 8003f42:	2200      	movs	r2, #0
 8003f44:	4611      	mov	r1, r2
 8003f46:	4620      	mov	r0, r4
 8003f48:	f7ff f96c 	bl	8003224 <u8g_DrawBitmap>
		} while (u8g_NextPage(&u8g_small));
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff fd3e 	bl	80039ce <u8g_NextPage>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d1ef      	bne.n	8003f36 <display_gear+0x2e>
 8003f56:	e7e9      	b.n	8003f2c <display_gear+0x24>
		u8g_FirstPage(&u8g_small);
 8003f58:	4814      	ldr	r0, [pc, #80]	; (8003fac <display_gear+0xa4>)
 8003f5a:	f7ff fd33 	bl	80039c4 <u8g_FirstPage>
			u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, drive);
 8003f5e:	4c13      	ldr	r4, [pc, #76]	; (8003fac <display_gear+0xa4>)
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <display_gear+0xac>)
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	2340      	movs	r3, #64	; 0x40
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2310      	movs	r3, #16
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f7ff f958 	bl	8003224 <u8g_DrawBitmap>
		} while (u8g_NextPage(&u8g_small));
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7ff fd2a 	bl	80039ce <u8g_NextPage>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d1ef      	bne.n	8003f5e <display_gear+0x56>
 8003f7e:	e7d5      	b.n	8003f2c <display_gear+0x24>
		u8g_FirstPage(&u8g_small);
 8003f80:	480a      	ldr	r0, [pc, #40]	; (8003fac <display_gear+0xa4>)
 8003f82:	f7ff fd1f 	bl	80039c4 <u8g_FirstPage>
			u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, reverse);
 8003f86:	4c09      	ldr	r4, [pc, #36]	; (8003fac <display_gear+0xa4>)
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <display_gear+0xb0>)
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	2310      	movs	r3, #16
 8003f92:	2200      	movs	r2, #0
 8003f94:	4611      	mov	r1, r2
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff f944 	bl	8003224 <u8g_DrawBitmap>
		} while (u8g_NextPage(&u8g_small));
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7ff fd16 	bl	80039ce <u8g_NextPage>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d1ef      	bne.n	8003f86 <display_gear+0x7e>
 8003fa6:	e7c1      	b.n	8003f2c <display_gear+0x24>
 8003fa8:	2000050c 	.word	0x2000050c
 8003fac:	20000438 	.word	0x20000438
 8003fb0:	08008c2c 	.word	0x08008c2c
 8003fb4:	08008a2c 	.word	0x08008a2c
 8003fb8:	0800922c 	.word	0x0800922c

08003fbc <display_power_disable>:

void display_power_disable(void) {
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, 10); //USTAW ADRES
 8003fc0:	230a      	movs	r3, #10
 8003fc2:	9302      	str	r3, [sp, #8]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	461a      	mov	r2, r3
 8003fce:	21e0      	movs	r1, #224	; 0xe0
 8003fd0:	480b      	ldr	r0, [pc, #44]	; (8004000 <display_power_disable+0x44>)
 8003fd2:	f7fd fe63 	bl	8001c9c <HAL_I2C_Mem_Write>
	u8g_FirstPage(&u8g_small);
 8003fd6:	480b      	ldr	r0, [pc, #44]	; (8004004 <display_power_disable+0x48>)
 8003fd8:	f7ff fcf4 	bl	80039c4 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);
 8003fdc:	4c09      	ldr	r4, [pc, #36]	; (8004004 <display_power_disable+0x48>)
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <display_power_disable+0x4c>)
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2340      	movs	r3, #64	; 0x40
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4611      	mov	r1, r2
 8003fec:	4620      	mov	r0, r4
 8003fee:	f7ff f919 	bl	8003224 <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_small));
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff fceb 	bl	80039ce <u8g_NextPage>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1ef      	bne.n	8003fdc <display_power_disable+0x20>
}
 8003ffc:	b004      	add	sp, #16
 8003ffe:	bd10      	pop	{r4, pc}
 8004000:	2000050c 	.word	0x2000050c
 8004004:	20000438 	.word	0x20000438
 8004008:	0800862c 	.word	0x0800862c

0800400c <display_battery_disable>:

void display_battery_disable(void) {
 800400c:	b510      	push	{r4, lr}
 800400e:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, 10); //USTAW ADRES
 8004010:	230a      	movs	r3, #10
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	2300      	movs	r3, #0
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2301      	movs	r3, #1
 800401c:	2204      	movs	r2, #4
 800401e:	21e0      	movs	r1, #224	; 0xe0
 8004020:	480b      	ldr	r0, [pc, #44]	; (8004050 <display_battery_disable+0x44>)
 8004022:	f7fd fe3b 	bl	8001c9c <HAL_I2C_Mem_Write>
	u8g_FirstPage(&u8g_small);
 8004026:	480b      	ldr	r0, [pc, #44]	; (8004054 <display_battery_disable+0x48>)
 8004028:	f7ff fccc 	bl	80039c4 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);
 800402c:	4c09      	ldr	r4, [pc, #36]	; (8004054 <display_battery_disable+0x48>)
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <display_battery_disable+0x4c>)
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2340      	movs	r3, #64	; 0x40
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2310      	movs	r3, #16
 8004038:	2200      	movs	r2, #0
 800403a:	4611      	mov	r1, r2
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff f8f1 	bl	8003224 <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_small));
 8004042:	4620      	mov	r0, r4
 8004044:	f7ff fcc3 	bl	80039ce <u8g_NextPage>
 8004048:	2800      	cmp	r0, #0
 800404a:	d1ef      	bne.n	800402c <display_battery_disable+0x20>

}
 800404c:	b004      	add	sp, #16
 800404e:	bd10      	pop	{r4, pc}
 8004050:	2000050c 	.word	0x2000050c
 8004054:	20000438 	.word	0x20000438
 8004058:	0800862c 	.word	0x0800862c

0800405c <display_gear_disable>:
void display_gear_disable(void) {
 800405c:	b510      	push	{r4, lr}
 800405e:	b084      	sub	sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 10, 10, 0, 0, 10); //USTAW ADRES
 8004060:	220a      	movs	r2, #10
 8004062:	9202      	str	r2, [sp, #8]
 8004064:	2300      	movs	r3, #0
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	21e0      	movs	r1, #224	; 0xe0
 800406e:	480c      	ldr	r0, [pc, #48]	; (80040a0 <display_gear_disable+0x44>)
 8004070:	f7fd fe14 	bl	8001c9c <HAL_I2C_Mem_Write>
	u8g_FirstPage(&u8g_small);
 8004074:	480b      	ldr	r0, [pc, #44]	; (80040a4 <display_gear_disable+0x48>)
 8004076:	f7ff fca5 	bl	80039c4 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);
 800407a:	4c0a      	ldr	r4, [pc, #40]	; (80040a4 <display_gear_disable+0x48>)
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <display_gear_disable+0x4c>)
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	2340      	movs	r3, #64	; 0x40
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2310      	movs	r3, #16
 8004086:	2200      	movs	r2, #0
 8004088:	4611      	mov	r1, r2
 800408a:	4620      	mov	r0, r4
 800408c:	f7ff f8ca 	bl	8003224 <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_small));
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff fc9c 	bl	80039ce <u8g_NextPage>
 8004096:	2800      	cmp	r0, #0
 8004098:	d1ef      	bne.n	800407a <display_gear_disable+0x1e>

}
 800409a:	b004      	add	sp, #16
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	2000050c 	.word	0x2000050c
 80040a4:	20000438 	.word	0x20000438
 80040a8:	0800862c 	.word	0x0800862c

080040ac <display_power>:

void display_power(double value, uint8_t charging) //USE OLED #3 (RIGHT) to display current power consumption
{
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	4604      	mov	r4, r0
 80040b2:	460d      	mov	r5, r1
 80040b4:	4616      	mov	r6, r2

	char output[10] = "";
 80040b6:	2700      	movs	r7, #0
 80040b8:	9705      	str	r7, [sp, #20]
 80040ba:	9706      	str	r7, [sp, #24]
 80040bc:	f8ad 701c 	strh.w	r7, [sp, #28]
	snprintf(output, 10, "%4.1f", value); //Convert to string and format
 80040c0:	e9cd 4500 	strd	r4, r5, [sp]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <display_power+0x90>)
 80040c6:	210a      	movs	r1, #10
 80040c8:	a805      	add	r0, sp, #20
 80040ca:	f001 ff5b 	bl	8005f84 <sniprintf>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, 10); //USTAW ADRES
 80040ce:	230a      	movs	r3, #10
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	9701      	str	r7, [sp, #4]
 80040d4:	9700      	str	r7, [sp, #0]
 80040d6:	2301      	movs	r3, #1
 80040d8:	461a      	mov	r2, r3
 80040da:	21e0      	movs	r1, #224	; 0xe0
 80040dc:	4818      	ldr	r0, [pc, #96]	; (8004140 <display_power+0x94>)
 80040de:	f7fd fddd 	bl	8001c9c <HAL_I2C_Mem_Write>
	//u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, blank_small);

	u8g_FirstPage(&u8g_small);
 80040e2:	4818      	ldr	r0, [pc, #96]	; (8004144 <display_power+0x98>)
 80040e4:	f7ff fc6e 	bl	80039c4 <u8g_FirstPage>
 80040e8:	e014      	b.n	8004114 <display_power+0x68>
	do {
		if (charging == 1) {
			u8g_DrawBitmap(&u8g_small, 0, 0, 16, 64, charge);
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <display_power+0x9c>)
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2310      	movs	r3, #16
 80040f4:	2200      	movs	r2, #0
 80040f6:	4611      	mov	r1, r2
 80040f8:	4812      	ldr	r0, [pc, #72]	; (8004144 <display_power+0x98>)
 80040fa:	f7ff f893 	bl	8003224 <u8g_DrawBitmap>
 80040fe:	e00b      	b.n	8004118 <display_power+0x6c>
		}

		if (value <= 9) {
			u8g_DrawStr(&u8g_small, 31, 32, output);
 8004100:	ab05      	add	r3, sp, #20
 8004102:	2220      	movs	r2, #32
 8004104:	211f      	movs	r1, #31
 8004106:	480f      	ldr	r0, [pc, #60]	; (8004144 <display_power+0x98>)
 8004108:	f7ff fb85 	bl	8003816 <u8g_DrawStr>
		} else {
			u8g_DrawStr(&u8g_small, 20, 32, output);
		}
	} while (u8g_NextPage(&u8g_small));
 800410c:	480d      	ldr	r0, [pc, #52]	; (8004144 <display_power+0x98>)
 800410e:	f7ff fc5e 	bl	80039ce <u8g_NextPage>
 8004112:	b180      	cbz	r0, 8004136 <display_power+0x8a>
		if (charging == 1) {
 8004114:	2e01      	cmp	r6, #1
 8004116:	d0e8      	beq.n	80040ea <display_power+0x3e>
		if (value <= 9) {
 8004118:	2200      	movs	r2, #0
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <display_power+0xa0>)
 800411c:	4620      	mov	r0, r4
 800411e:	4629      	mov	r1, r5
 8004120:	f7fc fcc2 	bl	8000aa8 <__aeabi_dcmple>
 8004124:	2800      	cmp	r0, #0
 8004126:	d1eb      	bne.n	8004100 <display_power+0x54>
			u8g_DrawStr(&u8g_small, 20, 32, output);
 8004128:	ab05      	add	r3, sp, #20
 800412a:	2220      	movs	r2, #32
 800412c:	2114      	movs	r1, #20
 800412e:	4805      	ldr	r0, [pc, #20]	; (8004144 <display_power+0x98>)
 8004130:	f7ff fb71 	bl	8003816 <u8g_DrawStr>
 8004134:	e7ea      	b.n	800410c <display_power+0x60>

}
 8004136:	b009      	add	sp, #36	; 0x24
 8004138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413a:	bf00      	nop
 800413c:	0800c490 	.word	0x0800c490
 8004140:	2000050c 	.word	0x2000050c
 8004144:	20000438 	.word	0x20000438
 8004148:	0800882c 	.word	0x0800882c
 800414c:	40220000 	.word	0x40220000

08004150 <display_speed>:

void display_speed(double value, uint8_t cruise) {
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	4615      	mov	r5, r2
	char output[10];
	char output_cruise[10];

	snprintf(output, 10, "%3.0f", value); //Convert to string and format
 800415a:	e9cd 6700 	strd	r6, r7, [sp]
 800415e:	4a3a      	ldr	r2, [pc, #232]	; (8004248 <display_speed+0xf8>)
 8004160:	210a      	movs	r1, #10
 8004162:	a805      	add	r0, sp, #20
 8004164:	f001 ff0e 	bl	8005f84 <sniprintf>
	snprintf(output_cruise, 10, "%d", cruise); //Convert to string and format
 8004168:	462b      	mov	r3, r5
 800416a:	4a38      	ldr	r2, [pc, #224]	; (800424c <display_speed+0xfc>)
 800416c:	210a      	movs	r1, #10
 800416e:	a802      	add	r0, sp, #8
 8004170:	f001 ff08 	bl	8005f84 <sniprintf>
	u8g_FirstPage(&u8g_big);
 8004174:	4836      	ldr	r0, [pc, #216]	; (8004250 <display_speed+0x100>)
 8004176:	f7ff fc25 	bl	80039c4 <u8g_FirstPage>
 800417a:	e02c      	b.n	80041d6 <display_speed+0x86>
	do {

		if (value <= 9) {
			u8g_big.font = u8g_font_fur49n;
 800417c:	4834      	ldr	r0, [pc, #208]	; (8004250 <display_speed+0x100>)
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <display_speed+0x104>)
 8004180:	6083      	str	r3, [r0, #8]
			u8g_DrawStr(&u8g_big, 72, 50, output);
 8004182:	ab05      	add	r3, sp, #20
 8004184:	2232      	movs	r2, #50	; 0x32
 8004186:	2148      	movs	r1, #72	; 0x48
 8004188:	f7ff fb45 	bl	8003816 <u8g_DrawStr>
 800418c:	e02b      	b.n	80041e6 <display_speed+0x96>
		}

		if ((value > 9) && (value <= 99)) {
			u8g_big.font = u8g_font_fur49n;
 800418e:	4830      	ldr	r0, [pc, #192]	; (8004250 <display_speed+0x100>)
 8004190:	4b30      	ldr	r3, [pc, #192]	; (8004254 <display_speed+0x104>)
 8004192:	6083      	str	r3, [r0, #8]
			u8g_DrawStr(&u8g_big, 34, 50, output);
 8004194:	ab05      	add	r3, sp, #20
 8004196:	2232      	movs	r2, #50	; 0x32
 8004198:	2122      	movs	r1, #34	; 0x22
 800419a:	f7ff fb3c 	bl	8003816 <u8g_DrawStr>
		}

		if (value > 99) {
 800419e:	a328      	add	r3, pc, #160	; (adr r3, 8004240 <display_speed+0xf0>)
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	4630      	mov	r0, r6
 80041a6:	4639      	mov	r1, r7
 80041a8:	f7fc fc92 	bl	8000ad0 <__aeabi_dcmpgt>
 80041ac:	bb68      	cbnz	r0, 800420a <display_speed+0xba>
			u8g_big.font = u8g_font_fur49n;
			u8g_DrawStr(&u8g_big, 1, 50, output);
		}

		u8g_DrawHLine(&u8g_big, 0, 54, 128);
 80041ae:	4c28      	ldr	r4, [pc, #160]	; (8004250 <display_speed+0x100>)
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	2236      	movs	r2, #54	; 0x36
 80041b4:	2100      	movs	r1, #0
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7ff fe4c 	bl	8003e54 <u8g_DrawHLine>

		u8g_big.font = u8g_font_6x10;
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <display_speed+0x108>)
 80041be:	60a3      	str	r3, [r4, #8]
		u8g_DrawStr(&u8g_big, 104, 63, "km/h");
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <display_speed+0x10c>)
 80041c2:	223f      	movs	r2, #63	; 0x3f
 80041c4:	2168      	movs	r1, #104	; 0x68
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7ff fb25 	bl	8003816 <u8g_DrawStr>

		if (cruise > 0) {
 80041cc:	bb35      	cbnz	r5, 800421c <display_speed+0xcc>
			u8g_DrawStr(&u8g_big, 1, 63, "set ");
			u8g_DrawStr(&u8g_big, 22, 63, output_cruise);

		}

	} while (u8g_NextPage(&u8g_big));
 80041ce:	4820      	ldr	r0, [pc, #128]	; (8004250 <display_speed+0x100>)
 80041d0:	f7ff fbfd 	bl	80039ce <u8g_NextPage>
 80041d4:	b378      	cbz	r0, 8004236 <display_speed+0xe6>
		if (value <= 9) {
 80041d6:	2200      	movs	r2, #0
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <display_speed+0x110>)
 80041da:	4630      	mov	r0, r6
 80041dc:	4639      	mov	r1, r7
 80041de:	f7fc fc63 	bl	8000aa8 <__aeabi_dcmple>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1ca      	bne.n	800417c <display_speed+0x2c>
		if ((value > 9) && (value <= 99)) {
 80041e6:	2200      	movs	r2, #0
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <display_speed+0x110>)
 80041ea:	4630      	mov	r0, r6
 80041ec:	4639      	mov	r1, r7
 80041ee:	f7fc fc6f 	bl	8000ad0 <__aeabi_dcmpgt>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d0d3      	beq.n	800419e <display_speed+0x4e>
 80041f6:	a312      	add	r3, pc, #72	; (adr r3, 8004240 <display_speed+0xf0>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	4630      	mov	r0, r6
 80041fe:	4639      	mov	r1, r7
 8004200:	f7fc fc52 	bl	8000aa8 <__aeabi_dcmple>
 8004204:	2800      	cmp	r0, #0
 8004206:	d0ca      	beq.n	800419e <display_speed+0x4e>
 8004208:	e7c1      	b.n	800418e <display_speed+0x3e>
			u8g_big.font = u8g_font_fur49n;
 800420a:	4811      	ldr	r0, [pc, #68]	; (8004250 <display_speed+0x100>)
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <display_speed+0x104>)
 800420e:	6083      	str	r3, [r0, #8]
			u8g_DrawStr(&u8g_big, 1, 50, output);
 8004210:	ab05      	add	r3, sp, #20
 8004212:	2232      	movs	r2, #50	; 0x32
 8004214:	2101      	movs	r1, #1
 8004216:	f7ff fafe 	bl	8003816 <u8g_DrawStr>
 800421a:	e7c8      	b.n	80041ae <display_speed+0x5e>
			u8g_DrawStr(&u8g_big, 1, 63, "set ");
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <display_speed+0x114>)
 800421e:	223f      	movs	r2, #63	; 0x3f
 8004220:	2101      	movs	r1, #1
 8004222:	4620      	mov	r0, r4
 8004224:	f7ff faf7 	bl	8003816 <u8g_DrawStr>
			u8g_DrawStr(&u8g_big, 22, 63, output_cruise);
 8004228:	ab02      	add	r3, sp, #8
 800422a:	223f      	movs	r2, #63	; 0x3f
 800422c:	2116      	movs	r1, #22
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff faf1 	bl	8003816 <u8g_DrawStr>
 8004234:	e7cb      	b.n	80041ce <display_speed+0x7e>

}
 8004236:	b009      	add	sp, #36	; 0x24
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	00000000 	.word	0x00000000
 8004244:	4058c000 	.word	0x4058c000
 8004248:	0800c498 	.word	0x0800c498
 800424c:	0800c4a0 	.word	0x0800c4a0
 8004250:	200003fc 	.word	0x200003fc
 8004254:	0800ba14 	.word	0x0800ba14
 8004258:	080094c0 	.word	0x080094c0
 800425c:	0800c4a4 	.word	0x0800c4a4
 8004260:	40220000 	.word	0x40220000
 8004264:	0800c4ac 	.word	0x0800c4ac

08004268 <displays_init>:

void displays_init() {
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // MUSI BYC
 800426e:	2201      	movs	r2, #1
 8004270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004274:	4834      	ldr	r0, [pc, #208]	; (8004348 <displays_init+0xe0>)
 8004276:	f7fd f9af 	bl	80015d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); // (reset i2c)
 800427a:	2201      	movs	r2, #1
 800427c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004280:	4832      	ldr	r0, [pc, #200]	; (800434c <displays_init+0xe4>)
 8004282:	f7fd f9a9 	bl	80015d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // MUSI BYC mux+
 8004286:	4c32      	ldr	r4, [pc, #200]	; (8004350 <displays_init+0xe8>)
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800428e:	4620      	mov	r0, r4
 8004290:	f7fd f9a2 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // MUSI BYC mux
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800429a:	4620      	mov	r0, r4
 800429c:	f7fd f99c 	bl	80015d8 <HAL_GPIO_WritePin>

	u8g_InitComFn(&u8g_big, &u8g_dev_ssd1309_128x64_hw_spi, u8g_com_hw_spi_fn);
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <displays_init+0xec>)
 80042a2:	492d      	ldr	r1, [pc, #180]	; (8004358 <displays_init+0xf0>)
 80042a4:	482d      	ldr	r0, [pc, #180]	; (800435c <displays_init+0xf4>)
 80042a6:	f7ff fbd5 	bl	8003a54 <u8g_InitComFn>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 80042aa:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800436c <displays_init+0x104>
 80042ae:	f04f 3aff 	mov.w	sl, #4294967295
 80042b2:	f8cd a008 	str.w	sl, [sp, #8]
 80042b6:	2500      	movs	r5, #0
 80042b8:	9501      	str	r5, [sp, #4]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	2301      	movs	r3, #1
 80042be:	461a      	mov	r2, r3
 80042c0:	21e0      	movs	r1, #224	; 0xe0
 80042c2:	4648      	mov	r0, r9
 80042c4:	f7fd fcea 	bl	8001c9c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80042c8:	2005      	movs	r0, #5
 80042ca:	f7fc fcb3 	bl	8000c34 <HAL_Delay>
	u8g_InitComFn(&u8g_small, &u8g_dev_ssd1306_128x32_2x_i2c,
 80042ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004370 <displays_init+0x108>
 80042d2:	4f23      	ldr	r7, [pc, #140]	; (8004360 <displays_init+0xf8>)
 80042d4:	4c23      	ldr	r4, [pc, #140]	; (8004364 <displays_init+0xfc>)
 80042d6:	4642      	mov	r2, r8
 80042d8:	4639      	mov	r1, r7
 80042da:	4620      	mov	r0, r4
 80042dc:	f7ff fbba 	bl	8003a54 <u8g_InitComFn>
			u8g_com_hw_i2c_fn); //here we init our u8glib driver
	u8g_small.font = u8g_font_fub30r;
 80042e0:	4e21      	ldr	r6, [pc, #132]	; (8004368 <displays_init+0x100>)
 80042e2:	60a6      	str	r6, [r4, #8]
	HAL_Delay(5);
 80042e4:	2005      	movs	r0, #5
 80042e6:	f7fc fca5 	bl	8000c34 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 2, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 80042ea:	f8cd a008 	str.w	sl, [sp, #8]
 80042ee:	9501      	str	r5, [sp, #4]
 80042f0:	9500      	str	r5, [sp, #0]
 80042f2:	2301      	movs	r3, #1
 80042f4:	2202      	movs	r2, #2
 80042f6:	21e0      	movs	r1, #224	; 0xe0
 80042f8:	4648      	mov	r0, r9
 80042fa:	f7fd fccf 	bl	8001c9c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80042fe:	2005      	movs	r0, #5
 8004300:	f7fc fc98 	bl	8000c34 <HAL_Delay>
	u8g_InitComFn(&u8g_small, &u8g_dev_ssd1306_128x32_2x_i2c,
 8004304:	4642      	mov	r2, r8
 8004306:	4639      	mov	r1, r7
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff fba3 	bl	8003a54 <u8g_InitComFn>
			u8g_com_hw_i2c_fn); //here we init our u8glib driver
	u8g_small.font = u8g_font_fub30r;
 800430e:	60a6      	str	r6, [r4, #8]
	HAL_Delay(5);
 8004310:	2005      	movs	r0, #5
 8004312:	f7fc fc8f 	bl	8000c34 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 8004316:	f8cd a008 	str.w	sl, [sp, #8]
 800431a:	9501      	str	r5, [sp, #4]
 800431c:	9500      	str	r5, [sp, #0]
 800431e:	2301      	movs	r3, #1
 8004320:	2204      	movs	r2, #4
 8004322:	21e0      	movs	r1, #224	; 0xe0
 8004324:	4648      	mov	r0, r9
 8004326:	f7fd fcb9 	bl	8001c9c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 800432a:	2005      	movs	r0, #5
 800432c:	f7fc fc82 	bl	8000c34 <HAL_Delay>
	u8g_InitComFn(&u8g_small, &u8g_dev_ssd1306_128x32_2x_i2c,
 8004330:	4642      	mov	r2, r8
 8004332:	4639      	mov	r1, r7
 8004334:	4620      	mov	r0, r4
 8004336:	f7ff fb8d 	bl	8003a54 <u8g_InitComFn>
			u8g_com_hw_i2c_fn); //here we init our u8glib driver
	u8g_small.font = u8g_font_fub30r;
 800433a:	60a6      	str	r6, [r4, #8]

	HAL_Delay(100);
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	f7fc fc79 	bl	8000c34 <HAL_Delay>
}
 8004342:	b004      	add	sp, #16
 8004344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004348:	40010800 	.word	0x40010800
 800434c:	40011000 	.word	0x40011000
 8004350:	40010c00 	.word	0x40010c00
 8004354:	080030b5 	.word	0x080030b5
 8004358:	20000020 	.word	0x20000020
 800435c:	200003fc 	.word	0x200003fc
 8004360:	20000008 	.word	0x20000008
 8004364:	20000438 	.word	0x20000438
 8004368:	08009c0c 	.word	0x08009c0c
 800436c:	2000050c 	.word	0x2000050c
 8004370:	0800315d 	.word	0x0800315d

08004374 <display_logo>:

void display_logo(void) {
 8004374:	b510      	push	{r4, lr}
 8004376:	b082      	sub	sp, #8
	u8g_FirstPage(&u8g_big);
 8004378:	480a      	ldr	r0, [pc, #40]	; (80043a4 <display_logo+0x30>)
 800437a:	f7ff fb23 	bl	80039c4 <u8g_FirstPage>
	do {
		u8g_DrawBitmap(&u8g_big, 0, 0, 16, 64, psd_logo_big);
 800437e:	4c09      	ldr	r4, [pc, #36]	; (80043a4 <display_logo+0x30>)
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <display_logo+0x34>)
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2310      	movs	r3, #16
 800438a:	2200      	movs	r2, #0
 800438c:	4611      	mov	r1, r2
 800438e:	4620      	mov	r0, r4
 8004390:	f7fe ff48 	bl	8003224 <u8g_DrawBitmap>
	} while (u8g_NextPage(&u8g_big));
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff fb1a 	bl	80039ce <u8g_NextPage>
 800439a:	2800      	cmp	r0, #0
 800439c:	d1ef      	bne.n	800437e <display_logo+0xa>

}
 800439e:	b002      	add	sp, #8
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	bf00      	nop
 80043a4:	200003fc 	.word	0x200003fc
 80043a8:	08008e2c 	.word	0x08008e2c

080043ac <displays_set_brightness>:

void displays_set_brightness(uint8_t val) {
 80043ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	4604      	mov	r4, r0

	u8g_SetContrast(&u8g_big, val);
 80043b4:	4601      	mov	r1, r0
 80043b6:	481a      	ldr	r0, [pc, #104]	; (8004420 <displays_set_brightness+0x74>)
 80043b8:	f7ff fb13 	bl	80039e2 <u8g_SetContrast>

	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 1, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 80043bc:	4f19      	ldr	r7, [pc, #100]	; (8004424 <displays_set_brightness+0x78>)
 80043be:	f04f 38ff 	mov.w	r8, #4294967295
 80043c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80043c6:	2500      	movs	r5, #0
 80043c8:	9501      	str	r5, [sp, #4]
 80043ca:	9500      	str	r5, [sp, #0]
 80043cc:	2301      	movs	r3, #1
 80043ce:	461a      	mov	r2, r3
 80043d0:	21e0      	movs	r1, #224	; 0xe0
 80043d2:	4638      	mov	r0, r7
 80043d4:	f7fd fc62 	bl	8001c9c <HAL_I2C_Mem_Write>
	u8g_SetContrast(&u8g_small, val);
 80043d8:	4e13      	ldr	r6, [pc, #76]	; (8004428 <displays_set_brightness+0x7c>)
 80043da:	4621      	mov	r1, r4
 80043dc:	4630      	mov	r0, r6
 80043de:	f7ff fb00 	bl	80039e2 <u8g_SetContrast>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 2, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 80043e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80043e6:	9501      	str	r5, [sp, #4]
 80043e8:	9500      	str	r5, [sp, #0]
 80043ea:	2301      	movs	r3, #1
 80043ec:	2202      	movs	r2, #2
 80043ee:	21e0      	movs	r1, #224	; 0xe0
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7fd fc53 	bl	8001c9c <HAL_I2C_Mem_Write>
	u8g_SetContrast(&u8g_small, val);
 80043f6:	4621      	mov	r1, r4
 80043f8:	4630      	mov	r0, r6
 80043fa:	f7ff faf2 	bl	80039e2 <u8g_SetContrast>
	HAL_I2C_Mem_Write(&hi2c1, 0xE0, 4, 1, 0, 0, HAL_MAX_DELAY); //USTAW ADRES
 80043fe:	f8cd 8008 	str.w	r8, [sp, #8]
 8004402:	9501      	str	r5, [sp, #4]
 8004404:	9500      	str	r5, [sp, #0]
 8004406:	2301      	movs	r3, #1
 8004408:	2204      	movs	r2, #4
 800440a:	21e0      	movs	r1, #224	; 0xe0
 800440c:	4638      	mov	r0, r7
 800440e:	f7fd fc45 	bl	8001c9c <HAL_I2C_Mem_Write>
	u8g_SetContrast(&u8g_small, val);
 8004412:	4621      	mov	r1, r4
 8004414:	4630      	mov	r0, r6
 8004416:	f7ff fae4 	bl	80039e2 <u8g_SetContrast>

}
 800441a:	b004      	add	sp, #16
 800441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004420:	200003fc 	.word	0x200003fc
 8004424:	2000050c 	.word	0x2000050c
 8004428:	20000438 	.word	0x20000438

0800442c <gui_init>:
uint16_t TEST_counter4 = 0;
uint8_t TEST_flag = 0;
uint8_t TEST_poprz_stan = 0;

void gui_init()
{
 800442c:	b508      	push	{r3, lr}
	  displays_init(); //inicjalizacja wyswietlaczy
 800442e:	f7ff ff1b 	bl	8004268 <displays_init>
	  Lcd_init();
 8004432:	f000 fbbf 	bl	8004bb4 <Lcd_init>
	  pwm_init();
 8004436:	f001 f843 	bl	80054c0 <pwm_init>
	  ws_set_brightness(gui_brightness);
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <gui_init+0x24>)
 800443c:	7818      	ldrb	r0, [r3, #0]
 800443e:	f000 fb61 	bl	8004b04 <ws_set_brightness>
	  ws_senddata();
 8004442:	f000 fa6d 	bl	8004920 <ws_senddata>
	  set_backlight(0);
 8004446:	2000      	movs	r0, #0
 8004448:	f001 f832 	bl	80054b0 <set_backlight>
}
 800444c:	bd08      	pop	{r3, pc}
 800444e:	bf00      	nop
 8004450:	20000040 	.word	0x20000040
 8004454:	00000000 	.word	0x00000000

08004458 <gui_screen_intro>:
	}

}

void gui_screen_intro()
{
 8004458:	b570      	push	{r4, r5, r6, lr}
	display_logo();
 800445a:	f7ff ff8b 	bl	8004374 <display_logo>
	display_power_disable();
 800445e:	f7ff fdad 	bl	8003fbc <display_power_disable>
	display_battery_disable();
 8004462:	f7ff fdd3 	bl	800400c <display_battery_disable>
	display_gear_disable();
 8004466:	f7ff fdf9 	bl	800405c <display_gear_disable>

	 ws_set_leds(0xFF,0xFF);
 800446a:	21ff      	movs	r1, #255	; 0xff
 800446c:	4608      	mov	r0, r1
 800446e:	f000 fa9b 	bl	80049a8 <ws_set_leds>
	 ws_senddata();
 8004472:	f000 fa55 	bl	8004920 <ws_senddata>



	Lcd_clr();
 8004476:	f000 fc21 	bl	8004cbc <Lcd_clr>
	asm("nop");
 800447a:	bf00      	nop
	Lcd_string("   PUT Solar");
 800447c:	4822      	ldr	r0, [pc, #136]	; (8004508 <gui_screen_intro+0xb0>)
 800447e:	f000 fc25 	bl	8004ccc <Lcd_string>
	Lcd_cursor(1,0);
 8004482:	2100      	movs	r1, #0
 8004484:	2001      	movs	r0, #1
 8004486:	f000 fc41 	bl	8004d0c <Lcd_cursor>
	Lcd_string("    Dynamics");
 800448a:	4820      	ldr	r0, [pc, #128]	; (800450c <gui_screen_intro+0xb4>)
 800448c:	f000 fc1e 	bl	8004ccc <Lcd_string>

	HAL_Delay(200);
 8004490:	20c8      	movs	r0, #200	; 0xc8
 8004492:	f7fc fbcf 	bl	8000c34 <HAL_Delay>

	for( int j = 1; j <= (gui_brightness*0.7); j++ )
 8004496:	2601      	movs	r6, #1
 8004498:	4630      	mov	r0, r6
 800449a:	f7fc f81f 	bl	80004dc <__aeabi_i2d>
 800449e:	4604      	mov	r4, r0
 80044a0:	460d      	mov	r5, r1
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <gui_screen_intro+0xb8>)
 80044a4:	7818      	ldrb	r0, [r3, #0]
 80044a6:	f7fc f819 	bl	80004dc <__aeabi_i2d>
 80044aa:	a315      	add	r3, pc, #84	; (adr r3, 8004500 <gui_screen_intro+0xa8>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fc f87e 	bl	80005b0 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4620      	mov	r0, r4
 80044ba:	4629      	mov	r1, r5
 80044bc:	f7fc faf4 	bl	8000aa8 <__aeabi_dcmple>
 80044c0:	b138      	cbz	r0, 80044d2 <gui_screen_intro+0x7a>
	{
		set_backlight(j);
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 fff4 	bl	80054b0 <set_backlight>
		HAL_Delay(10);
 80044c8:	200a      	movs	r0, #10
 80044ca:	f7fc fbb3 	bl	8000c34 <HAL_Delay>
	for( int j = 1; j <= (gui_brightness*0.7); j++ )
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7e2      	b.n	8004498 <gui_screen_intro+0x40>
	}

	 ws_set_leds(0,0);
 80044d2:	2100      	movs	r1, #0
 80044d4:	4608      	mov	r0, r1
 80044d6:	f000 fa67 	bl	80049a8 <ws_set_leds>
	 ws_senddata();
 80044da:	f000 fa21 	bl	8004920 <ws_senddata>


	set_backlight(gui_brightness*0.7);
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <gui_screen_intro+0xb8>)
 80044e0:	7818      	ldrb	r0, [r3, #0]
 80044e2:	f7fb fffb 	bl	80004dc <__aeabi_i2d>
 80044e6:	a306      	add	r3, pc, #24	; (adr r3, 8004500 <gui_screen_intro+0xa8>)
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f7fc f860 	bl	80005b0 <__aeabi_dmul>
 80044f0:	f7fc fb0e 	bl	8000b10 <__aeabi_d2iz>
 80044f4:	f000 ffdc 	bl	80054b0 <set_backlight>

	HAL_Delay(100);
 80044f8:	2064      	movs	r0, #100	; 0x64
 80044fa:	f7fc fb9b 	bl	8000c34 <HAL_Delay>
}
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	66666666 	.word	0x66666666
 8004504:	3fe66666 	.word	0x3fe66666
 8004508:	0800c4b4 	.word	0x0800c4b4
 800450c:	0800c4c4 	.word	0x0800c4c4
 8004510:	20000040 	.word	0x20000040

08004514 <gui_display_statement>:



void gui_display_statement(uint8_t number)
{
 8004514:	b508      	push	{r3, lr}

	switch(number)
 8004516:	3801      	subs	r0, #1
 8004518:	2806      	cmp	r0, #6
 800451a:	d812      	bhi.n	8004542 <gui_display_statement+0x2e>
 800451c:	e8df f000 	tbb	[pc, r0]
 8004520:	2e201204 	.word	0x2e201204
 8004524:	4a3c      	.short	0x4a3c
 8004526:	58          	.byte	0x58
 8004527:	00          	.byte	0x00
	{

			case 1:

				Lcd_clr();
 8004528:	f000 fbc8 	bl	8004cbc <Lcd_clr>
				asm("nop");
 800452c:	bf00      	nop
				Lcd_string("  Low Battery");
 800452e:	482f      	ldr	r0, [pc, #188]	; (80045ec <gui_display_statement+0xd8>)
 8004530:	f000 fbcc 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 8004534:	2100      	movs	r1, #0
 8004536:	2001      	movs	r0, #1
 8004538:	f000 fbe8 	bl	8004d0c <Lcd_cursor>
				Lcd_string("");
 800453c:	482c      	ldr	r0, [pc, #176]	; (80045f0 <gui_display_statement+0xdc>)
 800453e:	f000 fbc5 	bl	8004ccc <Lcd_string>
	    break;
	}



}
 8004542:	bd08      	pop	{r3, pc}
				Lcd_clr();
 8004544:	f000 fbba 	bl	8004cbc <Lcd_clr>
				asm("nop");
 8004548:	bf00      	nop
				Lcd_string(" Cruise control");
 800454a:	482a      	ldr	r0, [pc, #168]	; (80045f4 <gui_display_statement+0xe0>)
 800454c:	f000 fbbe 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 8004550:	2100      	movs	r1, #0
 8004552:	2001      	movs	r0, #1
 8004554:	f000 fbda 	bl	8004d0c <Lcd_cursor>
				Lcd_string("       ENABLED");
 8004558:	4827      	ldr	r0, [pc, #156]	; (80045f8 <gui_display_statement+0xe4>)
 800455a:	f000 fbb7 	bl	8004ccc <Lcd_string>
				break;
 800455e:	e7f0      	b.n	8004542 <gui_display_statement+0x2e>
				Lcd_clr();
 8004560:	f000 fbac 	bl	8004cbc <Lcd_clr>
				asm("nop");
 8004564:	bf00      	nop
				Lcd_string(" Cruise control");
 8004566:	4823      	ldr	r0, [pc, #140]	; (80045f4 <gui_display_statement+0xe0>)
 8004568:	f000 fbb0 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 800456c:	2100      	movs	r1, #0
 800456e:	2001      	movs	r0, #1
 8004570:	f000 fbcc 	bl	8004d0c <Lcd_cursor>
				Lcd_string("    DISABLED");
 8004574:	4821      	ldr	r0, [pc, #132]	; (80045fc <gui_display_statement+0xe8>)
 8004576:	f000 fba9 	bl	8004ccc <Lcd_string>
				break;
 800457a:	e7e2      	b.n	8004542 <gui_display_statement+0x2e>
				Lcd_clr();
 800457c:	f000 fb9e 	bl	8004cbc <Lcd_clr>
				asm("nop");
 8004580:	bf00      	nop
				Lcd_string("     Charging");
 8004582:	481f      	ldr	r0, [pc, #124]	; (8004600 <gui_display_statement+0xec>)
 8004584:	f000 fba2 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 8004588:	2100      	movs	r1, #0
 800458a:	2001      	movs	r0, #1
 800458c:	f000 fbbe 	bl	8004d0c <Lcd_cursor>
				Lcd_string("");
 8004590:	4817      	ldr	r0, [pc, #92]	; (80045f0 <gui_display_statement+0xdc>)
 8004592:	f000 fb9b 	bl	8004ccc <Lcd_string>
				break;
 8004596:	e7d4      	b.n	8004542 <gui_display_statement+0x2e>
				Lcd_clr();
 8004598:	f000 fb90 	bl	8004cbc <Lcd_clr>
				asm("nop");
 800459c:	bf00      	nop
				Lcd_string("     Motor");
 800459e:	4819      	ldr	r0, [pc, #100]	; (8004604 <gui_display_statement+0xf0>)
 80045a0:	f000 fb94 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 80045a4:	2100      	movs	r1, #0
 80045a6:	2001      	movs	r0, #1
 80045a8:	f000 fbb0 	bl	8004d0c <Lcd_cursor>
				Lcd_string("    Failure");
 80045ac:	4816      	ldr	r0, [pc, #88]	; (8004608 <gui_display_statement+0xf4>)
 80045ae:	f000 fb8d 	bl	8004ccc <Lcd_string>
				break;
 80045b2:	e7c6      	b.n	8004542 <gui_display_statement+0x2e>
				Lcd_clr();
 80045b4:	f000 fb82 	bl	8004cbc <Lcd_clr>
				asm("nop");
 80045b8:	bf00      	nop
				Lcd_string("    Battery");
 80045ba:	4814      	ldr	r0, [pc, #80]	; (800460c <gui_display_statement+0xf8>)
 80045bc:	f000 fb86 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 80045c0:	2100      	movs	r1, #0
 80045c2:	2001      	movs	r0, #1
 80045c4:	f000 fba2 	bl	8004d0c <Lcd_cursor>
				Lcd_string("    Failure");
 80045c8:	480f      	ldr	r0, [pc, #60]	; (8004608 <gui_display_statement+0xf4>)
 80045ca:	f000 fb7f 	bl	8004ccc <Lcd_string>
				break;
 80045ce:	e7b8      	b.n	8004542 <gui_display_statement+0x2e>
				Lcd_clr();
 80045d0:	f000 fb74 	bl	8004cbc <Lcd_clr>
				asm("nop");
 80045d4:	bf00      	nop
				Lcd_string("  Unidentified");
 80045d6:	480e      	ldr	r0, [pc, #56]	; (8004610 <gui_display_statement+0xfc>)
 80045d8:	f000 fb78 	bl	8004ccc <Lcd_string>
				Lcd_cursor(1,0);
 80045dc:	2100      	movs	r1, #0
 80045de:	2001      	movs	r0, #1
 80045e0:	f000 fb94 	bl	8004d0c <Lcd_cursor>
				Lcd_string("    Failure");
 80045e4:	4808      	ldr	r0, [pc, #32]	; (8004608 <gui_display_statement+0xf4>)
 80045e6:	f000 fb71 	bl	8004ccc <Lcd_string>
}
 80045ea:	e7aa      	b.n	8004542 <gui_display_statement+0x2e>
 80045ec:	0800c4d4 	.word	0x0800c4d4
 80045f0:	08008628 	.word	0x08008628
 80045f4:	0800c4e4 	.word	0x0800c4e4
 80045f8:	0800c4f4 	.word	0x0800c4f4
 80045fc:	0800c504 	.word	0x0800c504
 8004600:	0800c514 	.word	0x0800c514
 8004604:	0800c524 	.word	0x0800c524
 8004608:	0800c530 	.word	0x0800c530
 800460c:	0800c53c 	.word	0x0800c53c
 8004610:	0800c548 	.word	0x0800c548
 8004614:	00000000 	.word	0x00000000

08004618 <gui_screen_main>:
{
 8004618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461a:	b083      	sub	sp, #12
	TEST_counter++;
 800461c:	4aa4      	ldr	r2, [pc, #656]	; (80048b0 <gui_screen_main+0x298>)
 800461e:	8813      	ldrh	r3, [r2, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	8013      	strh	r3, [r2, #0]
	TEST_counter2++;
 8004624:	4aa3      	ldr	r2, [pc, #652]	; (80048b4 <gui_screen_main+0x29c>)
 8004626:	8813      	ldrh	r3, [r2, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
	if(TEST_counter2 > 3)
 800462e:	2b03      	cmp	r3, #3
 8004630:	d90b      	bls.n	800464a <gui_screen_main+0x32>
		TEST_counter2 = 0;
 8004632:	4613      	mov	r3, r2
 8004634:	2200      	movs	r2, #0
 8004636:	801a      	strh	r2, [r3, #0]
		gui_battery=gui_battery-0.5;
 8004638:	4c9f      	ldr	r4, [pc, #636]	; (80048b8 <gui_screen_main+0x2a0>)
 800463a:	2200      	movs	r2, #0
 800463c:	4b9f      	ldr	r3, [pc, #636]	; (80048bc <gui_screen_main+0x2a4>)
 800463e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004642:	f7fb fdfd 	bl	8000240 <__aeabi_dsub>
 8004646:	e9c4 0100 	strd	r0, r1, [r4]
	if(gui_battery < 1)
 800464a:	2200      	movs	r2, #0
 800464c:	4b9c      	ldr	r3, [pc, #624]	; (80048c0 <gui_screen_main+0x2a8>)
 800464e:	499a      	ldr	r1, [pc, #616]	; (80048b8 <gui_screen_main+0x2a0>)
 8004650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004654:	f7fc fa1e 	bl	8000a94 <__aeabi_dcmplt>
 8004658:	2800      	cmp	r0, #0
 800465a:	f040 80ad 	bne.w	80047b8 <gui_screen_main+0x1a0>
	TEST_counter3++;
 800465e:	4a99      	ldr	r2, [pc, #612]	; (80048c4 <gui_screen_main+0x2ac>)
 8004660:	8813      	ldrh	r3, [r2, #0]
 8004662:	3301      	adds	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	8013      	strh	r3, [r2, #0]
	if(TEST_counter3 >2)
 8004668:	2b02      	cmp	r3, #2
 800466a:	d90b      	bls.n	8004684 <gui_screen_main+0x6c>
		TEST_counter3=0;
 800466c:	4613      	mov	r3, r2
 800466e:	2200      	movs	r2, #0
 8004670:	801a      	strh	r2, [r3, #0]
		if(TEST_flag==0)
 8004672:	4b95      	ldr	r3, [pc, #596]	; (80048c8 <gui_screen_main+0x2b0>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 80a7 	bne.w	80047ca <gui_screen_main+0x1b2>
			gui_speed++;
 800467c:	4a93      	ldr	r2, [pc, #588]	; (80048cc <gui_screen_main+0x2b4>)
 800467e:	7813      	ldrb	r3, [r2, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	7013      	strb	r3, [r2, #0]
	if(gui_speed > 140)
 8004684:	4b91      	ldr	r3, [pc, #580]	; (80048cc <gui_screen_main+0x2b4>)
 8004686:	781c      	ldrb	r4, [r3, #0]
 8004688:	2c8c      	cmp	r4, #140	; 0x8c
 800468a:	d902      	bls.n	8004692 <gui_screen_main+0x7a>
		TEST_flag=1;
 800468c:	4b8e      	ldr	r3, [pc, #568]	; (80048c8 <gui_screen_main+0x2b0>)
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
	if(gui_speed < 1)
 8004692:	b914      	cbnz	r4, 800469a <gui_screen_main+0x82>
		TEST_flag=0;
 8004694:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <gui_screen_main+0x2b0>)
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
	gui_charging = 0;
 800469a:	4b8d      	ldr	r3, [pc, #564]	; (80048d0 <gui_screen_main+0x2b8>)
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
	if(TEST_flag == 0 && gui_power != 12)
 80046a0:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <gui_screen_main+0x2b0>)
 80046a2:	781d      	ldrb	r5, [r3, #0]
 80046a4:	bb55      	cbnz	r5, 80046fc <gui_screen_main+0xe4>
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <gui_screen_main+0x2bc>)
 80046a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80046ac:	2200      	movs	r2, #0
 80046ae:	4b8a      	ldr	r3, [pc, #552]	; (80048d8 <gui_screen_main+0x2c0>)
 80046b0:	4630      	mov	r0, r6
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fc f9e4 	bl	8000a80 <__aeabi_dcmpeq>
 80046b8:	bb00      	cbnz	r0, 80046fc <gui_screen_main+0xe4>
		TEST_counter2++;
 80046ba:	4a7e      	ldr	r2, [pc, #504]	; (80048b4 <gui_screen_main+0x29c>)
 80046bc:	8813      	ldrh	r3, [r2, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
		if(TEST_counter2 > 3)
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d90c      	bls.n	80046e2 <gui_screen_main+0xca>
			TEST_counter2 = 0;
 80046c8:	4613      	mov	r3, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	801a      	strh	r2, [r3, #0]
			gui_power=gui_power+0.2;
 80046ce:	a374      	add	r3, pc, #464	; (adr r3, 80048a0 <gui_screen_main+0x288>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	4630      	mov	r0, r6
 80046d6:	4639      	mov	r1, r7
 80046d8:	f7fb fdb4 	bl	8000244 <__adddf3>
 80046dc:	4b7d      	ldr	r3, [pc, #500]	; (80048d4 <gui_screen_main+0x2bc>)
 80046de:	e9c3 0100 	strd	r0, r1, [r3]
		if(gui_power > 12)
 80046e2:	2200      	movs	r2, #0
 80046e4:	4b7c      	ldr	r3, [pc, #496]	; (80048d8 <gui_screen_main+0x2c0>)
 80046e6:	497b      	ldr	r1, [pc, #492]	; (80048d4 <gui_screen_main+0x2bc>)
 80046e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046ec:	f7fc f9f0 	bl	8000ad0 <__aeabi_dcmpgt>
 80046f0:	b120      	cbz	r0, 80046fc <gui_screen_main+0xe4>
			gui_power = 12;
 80046f2:	4b78      	ldr	r3, [pc, #480]	; (80048d4 <gui_screen_main+0x2bc>)
 80046f4:	2000      	movs	r0, #0
 80046f6:	4978      	ldr	r1, [pc, #480]	; (80048d8 <gui_screen_main+0x2c0>)
 80046f8:	e9c3 0100 	strd	r0, r1, [r3]
	if(TEST_flag == 1)
 80046fc:	2d01      	cmp	r5, #1
 80046fe:	d069      	beq.n	80047d4 <gui_screen_main+0x1bc>
	TEST_counter4++;
 8004700:	4a76      	ldr	r2, [pc, #472]	; (80048dc <gui_screen_main+0x2c4>)
 8004702:	8813      	ldrh	r3, [r2, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
	if(TEST_counter4 > 20)
 800470a:	2b14      	cmp	r3, #20
 800470c:	d90f      	bls.n	800472e <gui_screen_main+0x116>
		TEST_counter4 = 0;
 800470e:	4613      	mov	r3, r2
 8004710:	2200      	movs	r2, #0
 8004712:	801a      	strh	r2, [r3, #0]
		if(TEST_poprz_stan == 0)
 8004714:	4b72      	ldr	r3, [pc, #456]	; (80048e0 <gui_screen_main+0x2c8>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d17d      	bne.n	8004818 <gui_screen_main+0x200>
			gui_leds_byte1 = 0b11000101;
 800471c:	4b71      	ldr	r3, [pc, #452]	; (80048e4 <gui_screen_main+0x2cc>)
 800471e:	22c5      	movs	r2, #197	; 0xc5
 8004720:	701a      	strb	r2, [r3, #0]
			gui_leds_byte2 = 0b00100001;
 8004722:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <gui_screen_main+0x2d0>)
 8004724:	2221      	movs	r2, #33	; 0x21
 8004726:	701a      	strb	r2, [r3, #0]
			TEST_poprz_stan = 1;
 8004728:	4b6d      	ldr	r3, [pc, #436]	; (80048e0 <gui_screen_main+0x2c8>)
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
	gui_picture_iteration++;
 800472e:	4a6f      	ldr	r2, [pc, #444]	; (80048ec <gui_screen_main+0x2d4>)
 8004730:	7813      	ldrb	r3, [r2, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	7013      	strb	r3, [r2, #0]
	 if(gui_picture_iteration > 7)
 8004738:	2b07      	cmp	r3, #7
 800473a:	d902      	bls.n	8004742 <gui_screen_main+0x12a>
		 gui_picture_iteration = 0;
 800473c:	4613      	mov	r3, r2
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
	display_speed(gui_speed, gui_cruise_speed_set);
 8004742:	4b6b      	ldr	r3, [pc, #428]	; (80048f0 <gui_screen_main+0x2d8>)
 8004744:	781d      	ldrb	r5, [r3, #0]
 8004746:	4620      	mov	r0, r4
 8004748:	f7fb feb8 	bl	80004bc <__aeabi_ui2d>
 800474c:	462a      	mov	r2, r5
 800474e:	f7ff fcff 	bl	8004150 <display_speed>
	ws_set_leds(gui_leds_byte1 ,gui_leds_byte2);
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <gui_screen_main+0x2d0>)
 8004754:	7819      	ldrb	r1, [r3, #0]
 8004756:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <gui_screen_main+0x2cc>)
 8004758:	7818      	ldrb	r0, [r3, #0]
 800475a:	f000 f925 	bl	80049a8 <ws_set_leds>
	ws_set_speed(gui_speed);
 800475e:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <gui_screen_main+0x2b4>)
 8004760:	7818      	ldrb	r0, [r3, #0]
 8004762:	f000 f92b 	bl	80049bc <ws_set_speed>
	ws_set_power(gui_power, gui_charging);
 8004766:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <gui_screen_main+0x2b8>)
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <gui_screen_main+0x2bc>)
 800476c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004770:	f000 f93a 	bl	80049e8 <ws_set_power>
	ws_set_battery(gui_battery);
 8004774:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <gui_screen_main+0x2a0>)
 8004776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800477a:	f000 f965 	bl	8004a48 <ws_set_battery>
	ws_senddata();
 800477e:	f000 f8cf 	bl	8004920 <ws_senddata>
	if((gui_picture_iteration == 0)||(gui_picture_iteration == 2)||(gui_picture_iteration == 4)||(gui_picture_iteration == 6))
 8004782:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <gui_screen_main+0x2d4>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b12b      	cbz	r3, 8004794 <gui_screen_main+0x17c>
 8004788:	2b02      	cmp	r3, #2
 800478a:	d003      	beq.n	8004794 <gui_screen_main+0x17c>
 800478c:	2b04      	cmp	r3, #4
 800478e:	d001      	beq.n	8004794 <gui_screen_main+0x17c>
 8004790:	2b06      	cmp	r3, #6
 8004792:	d10b      	bne.n	80047ac <gui_screen_main+0x194>
		display_power(gui_power,gui_charging);
 8004794:	4b4e      	ldr	r3, [pc, #312]	; (80048d0 <gui_screen_main+0x2b8>)
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	4b4e      	ldr	r3, [pc, #312]	; (80048d4 <gui_screen_main+0x2bc>)
 800479a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800479e:	f7ff fc85 	bl	80040ac <display_power>
		display_battery(gui_battery);
 80047a2:	4b45      	ldr	r3, [pc, #276]	; (80048b8 <gui_screen_main+0x2a0>)
 80047a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047a8:	f7ff fb6c 	bl	8003e84 <display_battery>
	if(gui_picture_iteration == 7)
 80047ac:	4b4f      	ldr	r3, [pc, #316]	; (80048ec <gui_screen_main+0x2d4>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b07      	cmp	r3, #7
 80047b2:	d03b      	beq.n	800482c <gui_screen_main+0x214>
}
 80047b4:	b003      	add	sp, #12
 80047b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gui_battery = 100;
 80047b8:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <gui_screen_main+0x2a0>)
 80047ba:	2000      	movs	r0, #0
 80047bc:	494d      	ldr	r1, [pc, #308]	; (80048f4 <gui_screen_main+0x2dc>)
 80047be:	e9c3 0100 	strd	r0, r1, [r3]
		TEST_flag = 0;
 80047c2:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <gui_screen_main+0x2b0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e749      	b.n	800465e <gui_screen_main+0x46>
			gui_speed--;
 80047ca:	4a40      	ldr	r2, [pc, #256]	; (80048cc <gui_screen_main+0x2b4>)
 80047cc:	7813      	ldrb	r3, [r2, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	7013      	strb	r3, [r2, #0]
 80047d2:	e757      	b.n	8004684 <gui_screen_main+0x6c>
		TEST_counter2++;
 80047d4:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <gui_screen_main+0x29c>)
 80047d6:	8813      	ldrh	r3, [r2, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
		if(TEST_counter2 > 3)
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d98e      	bls.n	8004700 <gui_screen_main+0xe8>
			TEST_counter2 = 0;
 80047e2:	4613      	mov	r3, r2
 80047e4:	2200      	movs	r2, #0
 80047e6:	801a      	strh	r2, [r3, #0]
			gui_power=gui_power-0.3;
 80047e8:	4d3a      	ldr	r5, [pc, #232]	; (80048d4 <gui_screen_main+0x2bc>)
 80047ea:	a32f      	add	r3, pc, #188	; (adr r3, 80048a8 <gui_screen_main+0x290>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80047f4:	f7fb fd24 	bl	8000240 <__aeabi_dsub>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	e9c5 2300 	strd	r2, r3, [r5]
			if(gui_power<0)
 8004800:	2200      	movs	r2, #0
 8004802:	2300      	movs	r3, #0
 8004804:	f7fc f946 	bl	8000a94 <__aeabi_dcmplt>
 8004808:	2800      	cmp	r0, #0
 800480a:	f43f af79 	beq.w	8004700 <gui_screen_main+0xe8>
				gui_power=0;
 800480e:	2000      	movs	r0, #0
 8004810:	2100      	movs	r1, #0
 8004812:	e9c5 0100 	strd	r0, r1, [r5]
 8004816:	e773      	b.n	8004700 <gui_screen_main+0xe8>
			gui_leds_byte1 =0b01000101;
 8004818:	4b32      	ldr	r3, [pc, #200]	; (80048e4 <gui_screen_main+0x2cc>)
 800481a:	2245      	movs	r2, #69	; 0x45
 800481c:	701a      	strb	r2, [r3, #0]
			gui_leds_byte2 = 0b01100000;
 800481e:	4b32      	ldr	r3, [pc, #200]	; (80048e8 <gui_screen_main+0x2d0>)
 8004820:	2260      	movs	r2, #96	; 0x60
 8004822:	701a      	strb	r2, [r3, #0]
			TEST_poprz_stan = 0;
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <gui_screen_main+0x2c8>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e780      	b.n	800472e <gui_screen_main+0x116>
		display_gear(gui_gear);
 800482c:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <gui_screen_main+0x2e0>)
 800482e:	7818      	ldrb	r0, [r3, #0]
 8004830:	f7ff fb6a 	bl	8003f08 <display_gear>
		displays_set_brightness(255);
 8004834:	20ff      	movs	r0, #255	; 0xff
 8004836:	f7ff fdb9 	bl	80043ac <displays_set_brightness>
		 ws_set_leds(0xFF,0xFF);
 800483a:	21ff      	movs	r1, #255	; 0xff
 800483c:	4608      	mov	r0, r1
 800483e:	f000 f8b3 	bl	80049a8 <ws_set_leds>
		if(gui_statement != 0)
 8004842:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <gui_screen_main+0x2e4>)
 8004844:	7818      	ldrb	r0, [r3, #0]
 8004846:	b110      	cbz	r0, 800484e <gui_screen_main+0x236>
			gui_display_statement(gui_statement);
 8004848:	f7ff fe64 	bl	8004514 <gui_display_statement>
 800484c:	e7b2      	b.n	80047b4 <gui_screen_main+0x19c>
			Lcd_clr();
 800484e:	f000 fa35 	bl	8004cbc <Lcd_clr>
			asm("nop");
 8004852:	bf00      	nop
			Lcd_string("     ");
 8004854:	482a      	ldr	r0, [pc, #168]	; (8004900 <gui_screen_main+0x2e8>)
 8004856:	f000 fa39 	bl	8004ccc <Lcd_string>
			Lcd_int(gui_h);
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <gui_screen_main+0x2ec>)
 800485c:	7818      	ldrb	r0, [r3, #0]
 800485e:	f000 fa45 	bl	8004cec <Lcd_int>
			Lcd_string(":");
 8004862:	4829      	ldr	r0, [pc, #164]	; (8004908 <gui_screen_main+0x2f0>)
 8004864:	f000 fa32 	bl	8004ccc <Lcd_string>
			Lcd_int(gui_m);
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <gui_screen_main+0x2f4>)
 800486a:	7818      	ldrb	r0, [r3, #0]
 800486c:	f000 fa3e 	bl	8004cec <Lcd_int>
			snprintf(output, 10, "%.6d", gui_trip); //Convert to string and format
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <gui_screen_main+0x2f8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <gui_screen_main+0x2fc>)
 8004876:	210a      	movs	r1, #10
 8004878:	4668      	mov	r0, sp
 800487a:	f001 fb83 	bl	8005f84 <sniprintf>
			Lcd_cursor(1,0);
 800487e:	2100      	movs	r1, #0
 8004880:	2001      	movs	r0, #1
 8004882:	f000 fa43 	bl	8004d0c <Lcd_cursor>
			Lcd_string("    ");
 8004886:	4824      	ldr	r0, [pc, #144]	; (8004918 <gui_screen_main+0x300>)
 8004888:	f000 fa20 	bl	8004ccc <Lcd_string>
			Lcd_string(output);
 800488c:	4668      	mov	r0, sp
 800488e:	f000 fa1d 	bl	8004ccc <Lcd_string>
			Lcd_string(" km");
 8004892:	4822      	ldr	r0, [pc, #136]	; (800491c <gui_screen_main+0x304>)
 8004894:	f000 fa1a 	bl	8004ccc <Lcd_string>
}
 8004898:	e78c      	b.n	80047b4 <gui_screen_main+0x19c>
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w
 80048a0:	9999999a 	.word	0x9999999a
 80048a4:	3fc99999 	.word	0x3fc99999
 80048a8:	33333333 	.word	0x33333333
 80048ac:	3fd33333 	.word	0x3fd33333
 80048b0:	200003c4 	.word	0x200003c4
 80048b4:	200003c6 	.word	0x200003c6
 80048b8:	20000038 	.word	0x20000038
 80048bc:	3fe00000 	.word	0x3fe00000
 80048c0:	3ff00000 	.word	0x3ff00000
 80048c4:	200003c8 	.word	0x200003c8
 80048c8:	200003cc 	.word	0x200003cc
 80048cc:	200003e0 	.word	0x200003e0
 80048d0:	200003ce 	.word	0x200003ce
 80048d4:	200003d8 	.word	0x200003d8
 80048d8:	40280000 	.word	0x40280000
 80048dc:	200003ca 	.word	0x200003ca
 80048e0:	200003cd 	.word	0x200003cd
 80048e4:	200003d0 	.word	0x200003d0
 80048e8:	200003d1 	.word	0x200003d1
 80048ec:	200003d2 	.word	0x200003d2
 80048f0:	200003cf 	.word	0x200003cf
 80048f4:	40590000 	.word	0x40590000
 80048f8:	20000041 	.word	0x20000041
 80048fc:	200003e1 	.word	0x200003e1
 8004900:	0800c558 	.word	0x0800c558
 8004904:	20000042 	.word	0x20000042
 8004908:	0800c560 	.word	0x0800c560
 800490c:	20000043 	.word	0x20000043
 8004910:	20000044 	.word	0x20000044
 8004914:	0800c564 	.word	0x0800c564
 8004918:	0800c56c 	.word	0x0800c56c
 800491c:	0800c574 	.word	0x0800c574

08004920 <ws_senddata>:
uint8_t ws_leds2 =0;
uint8_t ws_led_bright =0;
uint8_t ws_mod=0;

void ws_senddata(void)
{
 8004920:	b500      	push	{lr}
 8004922:	b085      	sub	sp, #20
	char uart_buffer[9] = {ws_spd,ws_spd_lim,ws_bat,ws_powr,ws_powr_mod,ws_leds1,ws_leds2,ws_led_bright,ws_mod};
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <ws_senddata+0x60>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f88d 3004 	strb.w	r3, [sp, #4]
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <ws_senddata+0x64>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f88d 3005 	strb.w	r3, [sp, #5]
 8004934:	4b14      	ldr	r3, [pc, #80]	; (8004988 <ws_senddata+0x68>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f88d 3006 	strb.w	r3, [sp, #6]
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <ws_senddata+0x6c>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	f88d 3007 	strb.w	r3, [sp, #7]
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <ws_senddata+0x70>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	f88d 3008 	strb.w	r3, [sp, #8]
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <ws_senddata+0x74>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	f88d 3009 	strb.w	r3, [sp, #9]
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <ws_senddata+0x78>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f88d 300a 	strb.w	r3, [sp, #10]
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <ws_senddata+0x7c>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f88d 300b 	strb.w	r3, [sp, #11]
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <ws_senddata+0x80>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer,9, 100);
 800496c:	2364      	movs	r3, #100	; 0x64
 800496e:	2209      	movs	r2, #9
 8004970:	a901      	add	r1, sp, #4
 8004972:	480c      	ldr	r0, [pc, #48]	; (80049a4 <ws_senddata+0x84>)
 8004974:	f7fe fb1b 	bl	8002fae <HAL_UART_Transmit>
}
 8004978:	b005      	add	sp, #20
 800497a:	f85d fb04 	ldr.w	pc, [sp], #4
 800497e:	bf00      	nop
 8004980:	200003e9 	.word	0x200003e9
 8004984:	200003ea 	.word	0x200003ea
 8004988:	200003e2 	.word	0x200003e2
 800498c:	200003e7 	.word	0x200003e7
 8004990:	200003e8 	.word	0x200003e8
 8004994:	200003e4 	.word	0x200003e4
 8004998:	200003e5 	.word	0x200003e5
 800499c:	200003e3 	.word	0x200003e3
 80049a0:	200003e6 	.word	0x200003e6
 80049a4:	20000658 	.word	0x20000658

080049a8 <ws_set_leds>:

void ws_set_leds(uint8_t byte1,uint8_t byte2)
{
	ws_leds1 = byte1;
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <ws_set_leds+0xc>)
 80049aa:	7018      	strb	r0, [r3, #0]
	ws_leds2 = byte2;
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <ws_set_leds+0x10>)
 80049ae:	7019      	strb	r1, [r3, #0]
}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	200003e4 	.word	0x200003e4
 80049b8:	200003e5 	.word	0x200003e5

080049bc <ws_set_speed>:

void ws_set_speed(uint8_t x)
{
 80049bc:	b508      	push	{r3, lr}
	uint8_t buf = floor(x/2.5);
 80049be:	f7fb fd8d 	bl	80004dc <__aeabi_i2d>
 80049c2:	2200      	movs	r2, #0
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <ws_set_speed+0x24>)
 80049c6:	f7fb ff1d 	bl	8000804 <__aeabi_ddiv>
 80049ca:	f003 fd49 	bl	8008460 <floor>
 80049ce:	f7fc f8c7 	bl	8000b60 <__aeabi_d2uiz>
 80049d2:	b2c0      	uxtb	r0, r0
	if(buf > 56)
 80049d4:	2838      	cmp	r0, #56	; 0x38
 80049d6:	d900      	bls.n	80049da <ws_set_speed+0x1e>
	{
		buf = 56;
 80049d8:	2038      	movs	r0, #56	; 0x38
	}
	ws_spd = buf;
 80049da:	4b02      	ldr	r3, [pc, #8]	; (80049e4 <ws_set_speed+0x28>)
 80049dc:	7018      	strb	r0, [r3, #0]

}
 80049de:	bd08      	pop	{r3, pc}
 80049e0:	40040000 	.word	0x40040000
 80049e4:	200003e9 	.word	0x200003e9

080049e8 <ws_set_power>:
void ws_set_power(double x, uint8_t charging)
{
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4604      	mov	r4, r0
 80049ec:	460d      	mov	r5, r1

	if(charging == 0)
 80049ee:	4616      	mov	r6, r2
 80049f0:	b982      	cbnz	r2, 8004a14 <ws_set_power+0x2c>
	{
		uint8_t buf = floor(x/0.75);
 80049f2:	2200      	movs	r2, #0
 80049f4:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <ws_set_power+0x54>)
 80049f6:	f7fb ff05 	bl	8000804 <__aeabi_ddiv>
 80049fa:	f003 fd31 	bl	8008460 <floor>
 80049fe:	f7fc f8af 	bl	8000b60 <__aeabi_d2uiz>
 8004a02:	b2c0      	uxtb	r0, r0
		if(buf > 16)
 8004a04:	2810      	cmp	r0, #16
 8004a06:	d900      	bls.n	8004a0a <ws_set_power+0x22>
		{
			buf = 16;
 8004a08:	2010      	movs	r0, #16
		}
		ws_powr = buf;
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <ws_set_power+0x58>)
 8004a0c:	7018      	strb	r0, [r3, #0]

		ws_powr_mod = 0;
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <ws_set_power+0x5c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
	}
	if(charging == 1)
 8004a14:	2e01      	cmp	r6, #1
 8004a16:	d000      	beq.n	8004a1a <ws_set_power+0x32>
		ws_powr = buf;

		ws_powr_mod = 1;
	}

}
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t buf = floor(x);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f003 fd1f 	bl	8008460 <floor>
 8004a22:	f7fc f89d 	bl	8000b60 <__aeabi_d2uiz>
 8004a26:	b2c0      	uxtb	r0, r0
		if(buf > 3)
 8004a28:	2803      	cmp	r0, #3
 8004a2a:	d900      	bls.n	8004a2e <ws_set_power+0x46>
			buf = 3;
 8004a2c:	2003      	movs	r0, #3
		ws_powr = buf;
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <ws_set_power+0x58>)
 8004a30:	7018      	strb	r0, [r3, #0]
		ws_powr_mod = 1;
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <ws_set_power+0x5c>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
}
 8004a38:	e7ee      	b.n	8004a18 <ws_set_power+0x30>
 8004a3a:	bf00      	nop
 8004a3c:	3fe80000 	.word	0x3fe80000
 8004a40:	200003e7 	.word	0x200003e7
 8004a44:	200003e8 	.word	0x200003e8

08004a48 <ws_set_battery>:
void ws_set_battery(double x)
{
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	460d      	mov	r5, r1
	if(x == 0)
	{
		buf = 0;
	}

	if((x <= 6.66)&&(x > 0))
 8004a4e:	a326      	add	r3, pc, #152	; (adr r3, 8004ae8 <ws_set_battery+0xa0>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f7fc f828 	bl	8000aa8 <__aeabi_dcmple>
 8004a58:	b150      	cbz	r0, 8004a70 <ws_set_battery+0x28>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7fc f835 	bl	8000ad0 <__aeabi_dcmpgt>
 8004a66:	b108      	cbz	r0, 8004a6c <ws_set_battery+0x24>
	{
		buf = 1;
 8004a68:	2601      	movs	r6, #1
 8004a6a:	e002      	b.n	8004a72 <ws_set_battery+0x2a>
	if((x <= 6.66)&&(x > 0))
 8004a6c:	2600      	movs	r6, #0
 8004a6e:	e000      	b.n	8004a72 <ws_set_battery+0x2a>
 8004a70:	2600      	movs	r6, #0
	}

	if((x > 6.66)&&(x <= 13.33))
 8004a72:	a31d      	add	r3, pc, #116	; (adr r3, 8004ae8 <ws_set_battery+0xa0>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fc f828 	bl	8000ad0 <__aeabi_dcmpgt>
 8004a80:	b140      	cbz	r0, 8004a94 <ws_set_battery+0x4c>
 8004a82:	a31b      	add	r3, pc, #108	; (adr r3, 8004af0 <ws_set_battery+0xa8>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	4620      	mov	r0, r4
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f7fc f80c 	bl	8000aa8 <__aeabi_dcmple>
 8004a90:	b100      	cbz	r0, 8004a94 <ws_set_battery+0x4c>
	{
		buf = 2;
 8004a92:	2602      	movs	r6, #2
	}

	if((x > 13.33)&&(x <= 20))
 8004a94:	a316      	add	r3, pc, #88	; (adr r3, 8004af0 <ws_set_battery+0xa8>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	f7fc f817 	bl	8000ad0 <__aeabi_dcmpgt>
 8004aa2:	b138      	cbz	r0, 8004ab4 <ws_set_battery+0x6c>
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <ws_set_battery+0xb0>)
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb fffc 	bl	8000aa8 <__aeabi_dcmple>
 8004ab0:	b100      	cbz	r0, 8004ab4 <ws_set_battery+0x6c>
	{
		buf = 3;
 8004ab2:	2603      	movs	r6, #3
	}

	if(x > 20)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <ws_set_battery+0xb0>)
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	f7fc f808 	bl	8000ad0 <__aeabi_dcmpgt>
 8004ac0:	b150      	cbz	r0, 8004ad8 <ws_set_battery+0x90>
	{
		buf = floor(x/5.25);
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <ws_set_battery+0xb4>)
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fb fe9b 	bl	8000804 <__aeabi_ddiv>
 8004ace:	f003 fcc7 	bl	8008460 <floor>
 8004ad2:	f7fc f845 	bl	8000b60 <__aeabi_d2uiz>
 8004ad6:	b2c6      	uxtb	r6, r0
	}


	if(buf > 19)
 8004ad8:	2e13      	cmp	r6, #19
 8004ada:	d900      	bls.n	8004ade <ws_set_battery+0x96>
	{
		buf = 19;
 8004adc:	2613      	movs	r6, #19
	}
	ws_bat = buf;
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <ws_set_battery+0xb8>)
 8004ae0:	701e      	strb	r6, [r3, #0]
}
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	0a3d70a4 	.word	0x0a3d70a4
 8004aec:	401aa3d7 	.word	0x401aa3d7
 8004af0:	c28f5c29 	.word	0xc28f5c29
 8004af4:	402aa8f5 	.word	0x402aa8f5
 8004af8:	40340000 	.word	0x40340000
 8004afc:	40150000 	.word	0x40150000
 8004b00:	200003e2 	.word	0x200003e2

08004b04 <ws_set_brightness>:

void ws_set_brightness(uint8_t y)
{
	ws_led_bright = y;
 8004b04:	4b01      	ldr	r3, [pc, #4]	; (8004b0c <ws_set_brightness+0x8>)
 8004b06:	7018      	strb	r0, [r3, #0]

}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	200003e3 	.word	0x200003e3

08004b10 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(uint8_t command)
{
 8004b10:	b530      	push	{r4, r5, lr}
 8004b12:	b083      	sub	sp, #12
 8004b14:	4604      	mov	r4, r0

	uint8_t buf = 0x1F;
 8004b16:	231f      	movs	r3, #31
 8004b18:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, HAL_MAX_DELAY);
 8004b1c:	4d10      	ldr	r5, [pc, #64]	; (8004b60 <lcd_write_command+0x50>)
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	2201      	movs	r2, #1
 8004b24:	f10d 0107 	add.w	r1, sp, #7
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7fd fd74 	bl	8002616 <HAL_SPI_Transmit>

	buf = command & 0x0F;
 8004b2e:	f004 030f 	and.w	r3, r4, #15
 8004b32:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf, 1, HAL_MAX_DELAY);
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f10d 0107 	add.w	r1, sp, #7
 8004b40:	4628      	mov	r0, r5
 8004b42:	f7fd fd68 	bl	8002616 <HAL_SPI_Transmit>

	buf = (command >> 4) & 0x0F;
 8004b46:	0924      	lsrs	r4, r4, #4
 8004b48:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf , 1, HAL_MAX_DELAY);
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b50:	2201      	movs	r2, #1
 8004b52:	f10d 0107 	add.w	r1, sp, #7
 8004b56:	4628      	mov	r0, r5
 8004b58:	f7fd fd5d 	bl	8002616 <HAL_SPI_Transmit>

}
 8004b5c:	b003      	add	sp, #12
 8004b5e:	bd30      	pop	{r4, r5, pc}
 8004b60:	20000560 	.word	0x20000560

08004b64 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(uint8_t data)
{
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	b083      	sub	sp, #12
 8004b68:	4604      	mov	r4, r0
	uint8_t buf = 0x5F;
 8004b6a:	235f      	movs	r3, #95	; 0x5f
 8004b6c:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1,10);
 8004b70:	4d0f      	ldr	r5, [pc, #60]	; (8004bb0 <lcd_write_data+0x4c>)
 8004b72:	230a      	movs	r3, #10
 8004b74:	2201      	movs	r2, #1
 8004b76:	f10d 0107 	add.w	r1, sp, #7
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7fd fd4b 	bl	8002616 <HAL_SPI_Transmit>

	buf = data & 0x0F;
 8004b80:	f004 030f 	and.w	r3, r4, #15
 8004b84:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf, 1, 10);
 8004b88:	230a      	movs	r3, #10
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f10d 0107 	add.w	r1, sp, #7
 8004b90:	4628      	mov	r0, r5
 8004b92:	f7fd fd40 	bl	8002616 <HAL_SPI_Transmit>

	buf = (data >> 4) & 0x0F;
 8004b96:	0924      	lsrs	r4, r4, #4
 8004b98:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&hspi2 , &buf , 1, 10);
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f10d 0107 	add.w	r1, sp, #7
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7fd fd36 	bl	8002616 <HAL_SPI_Transmit>
}
 8004baa:	b003      	add	sp, #12
 8004bac:	bd30      	pop	{r4, r5, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000560 	.word	0x20000560

08004bb4 <Lcd_init>:
{
 8004bb4:	b510      	push	{r4, lr}
	 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET); // Podciagniecie RST
 8004bb6:	4c40      	ldr	r4, [pc, #256]	; (8004cb8 <Lcd_init+0x104>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7fc fd0a 	bl	80015d8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET); // Podciagniecie DC do zera
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fc fd04 	bl	80015d8 <HAL_GPIO_WritePin>
		lcd_write_command(0x80);
 8004bd0:	2080      	movs	r0, #128	; 0x80
 8004bd2:	f7ff ff9d 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x2A);  /* **** Set "RE"=1  00101010B */
 8004bd6:	202a      	movs	r0, #42	; 0x2a
 8004bd8:	f7ff ff9a 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x71);
 8004bdc:	2071      	movs	r0, #113	; 0x71
 8004bde:	f7ff ff97 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xC0);
 8004be2:	20c0      	movs	r0, #192	; 0xc0
 8004be4:	f7ff ff94 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x00);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff ff91 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x28);
 8004bee:	2028      	movs	r0, #40	; 0x28
 8004bf0:	f7ff ff8e 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x08); /* **** Set Sleep Mode On     */
 8004bf4:	2008      	movs	r0, #8
 8004bf6:	f7ff ff8b 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x2A); /* **** Set "RE"=1  00101010B */
 8004bfa:	202a      	movs	r0, #42	; 0x2a
 8004bfc:	f7ff ff88 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x79); /* **** Set "SD"=1  01111001B */
 8004c00:	2079      	movs	r0, #121	; 0x79
 8004c02:	f7ff ff85 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xD5);
 8004c06:	20d5      	movs	r0, #213	; 0xd5
 8004c08:	f7ff ff82 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x70);
 8004c0c:	2070      	movs	r0, #112	; 0x70
 8004c0e:	f7ff ff7f 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x78); /* **** Set "SD"=0            */
 8004c12:	2078      	movs	r0, #120	; 0x78
 8004c14:	f7ff ff7c 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x08);
 8004c18:	2008      	movs	r0, #8
 8004c1a:	f7ff ff79 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x06); /* **** Set Com31-->Com0  Seg0-->Seg99 */
 8004c1e:	2006      	movs	r0, #6
 8004c20:	f7ff ff76 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x72);
 8004c24:	2072      	movs	r0, #114	; 0x72
 8004c26:	f7ff ff73 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xC0);
 8004c2a:	20c0      	movs	r0, #192	; 0xc0
 8004c2c:	f7ff ff70 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x01);
 8004c30:	2001      	movs	r0, #1
 8004c32:	f7ff ff6d 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x2A);   /* **** Set "RE"=1  */
 8004c36:	202a      	movs	r0, #42	; 0x2a
 8004c38:	f7ff ff6a 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x79);   /* **** Set "SD"=1 */
 8004c3c:	2079      	movs	r0, #121	; 0x79
 8004c3e:	f7ff ff67 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xDC);    /* **** Set ROM */
 8004c42:	20dc      	movs	r0, #220	; 0xdc
 8004c44:	f7ff ff64 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x00);    /* **** Set ROM A and 8 CGRAM */
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7ff ff61 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xDA);    /* **** Set Seg Pins HW Config */
 8004c4e:	20da      	movs	r0, #218	; 0xda
 8004c50:	f7ff ff5e 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x10);
 8004c54:	2010      	movs	r0, #16
 8004c56:	f7ff ff5b 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x81);    /* **** Set Contrast */
 8004c5a:	2081      	movs	r0, #129	; 0x81
 8004c5c:	f7ff ff58 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xD9);
 8004c60:	20d9      	movs	r0, #217	; 0xd9
 8004c62:	f7ff ff55 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x8F);    /* **** Set Contrast */
 8004c66:	208f      	movs	r0, #143	; 0x8f
 8004c68:	f7ff ff52 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xF1);
 8004c6c:	20f1      	movs	r0, #241	; 0xf1
 8004c6e:	f7ff ff4f 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xDB);   /* **** Set VCOM deselect level */
 8004c72:	20db      	movs	r0, #219	; 0xdb
 8004c74:	f7ff ff4c 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x30);   /* **** VCC x 0.83              */
 8004c78:	2030      	movs	r0, #48	; 0x30
 8004c7a:	f7ff ff49 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0xDC);   /* *Set gpio -turn EN for 15V generator on. */
 8004c7e:	20dc      	movs	r0, #220	; 0xdc
 8004c80:	f7ff ff46 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x03);
 8004c84:	2003      	movs	r0, #3
 8004c86:	f7ff ff43 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x78);   /* **** Exiting Set OLED Characterization */
 8004c8a:	2078      	movs	r0, #120	; 0x78
 8004c8c:	f7ff ff40 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x28);
 8004c90:	2028      	movs	r0, #40	; 0x28
 8004c92:	f7ff ff3d 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x06);     /* **** Set Entry Mode */
 8004c96:	2006      	movs	r0, #6
 8004c98:	f7ff ff3a 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x28);     /* **** Set "IS"=0 , "RE" =0 /28 */
 8004c9c:	2028      	movs	r0, #40	; 0x28
 8004c9e:	f7ff ff37 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x01);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f7ff ff34 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x80);     /* Set DDRAM Address to 0x80 (line 1 start)*/
 8004ca8:	2080      	movs	r0, #128	; 0x80
 8004caa:	f7ff ff31 	bl	8004b10 <lcd_write_command>
		lcd_write_command(0x0C);   /* **** Turn on Display */
 8004cae:	200c      	movs	r0, #12
 8004cb0:	f7ff ff2e 	bl	8004b10 <lcd_write_command>
}
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40010c00 	.word	0x40010c00

08004cbc <Lcd_clr>:
{
 8004cbc:	b508      	push	{r3, lr}
	lcd_write_command(CLEAR_DISPLAY);
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f7ff ff26 	bl	8004b10 <lcd_write_command>
	lcd_write_command(RETURN_HOME);
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	f7ff ff23 	bl	8004b10 <lcd_write_command>
}
 8004cca:	bd08      	pop	{r3, pc}

08004ccc <Lcd_string>:
{
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4605      	mov	r5, r0
	for(uint8_t i = 0; i < strlen(string); i++)
 8004cd0:	2400      	movs	r4, #0
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7fb faa8 	bl	8000228 <strlen>
 8004cd8:	4284      	cmp	r4, r0
 8004cda:	d205      	bcs.n	8004ce8 <Lcd_string+0x1c>
		lcd_write_data(string[i]);
 8004cdc:	5d28      	ldrb	r0, [r5, r4]
 8004cde:	f7ff ff41 	bl	8004b64 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8004ce2:	3401      	adds	r4, #1
 8004ce4:	b2e4      	uxtb	r4, r4
 8004ce6:	e7f4      	b.n	8004cd2 <Lcd_string+0x6>
}
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
	...

08004cec <Lcd_int>:
{
 8004cec:	b500      	push	{lr}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	4602      	mov	r2, r0
	sprintf(buffer, "%d", number);
 8004cf2:	4905      	ldr	r1, [pc, #20]	; (8004d08 <Lcd_int+0x1c>)
 8004cf4:	a801      	add	r0, sp, #4
 8004cf6:	f001 f979 	bl	8005fec <siprintf>
	Lcd_string(buffer);
 8004cfa:	a801      	add	r0, sp, #4
 8004cfc:	f7ff ffe6 	bl	8004ccc <Lcd_string>
}
 8004d00:	b005      	add	sp, #20
 8004d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d06:	bf00      	nop
 8004d08:	0800c4a0 	.word	0x0800c4a0

08004d0c <Lcd_cursor>:
{
 8004d0c:	b508      	push	{r3, lr}
	lcd_write_command(SET_DDRAM_ADDR | ((row * 0x40) + col));
 8004d0e:	eb01 1080 	add.w	r0, r1, r0, lsl #6
 8004d12:	b240      	sxtb	r0, r0
 8004d14:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8004d18:	b2c0      	uxtb	r0, r0
 8004d1a:	f7ff fef9 	bl	8004b10 <lcd_write_command>
}
 8004d1e:	bd08      	pop	{r3, pc}

08004d20 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8004d20:	b508      	push	{r3, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8004d22:	480d      	ldr	r0, [pc, #52]	; (8004d58 <MX_CAN_Init+0x38>)
 8004d24:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <MX_CAN_Init+0x3c>)
 8004d26:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 8004d28:	2309      	movs	r3, #9
 8004d2a:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004d30:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004d32:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8004d36:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004d38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d3c:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004d3e:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004d40:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004d42:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8004d44:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004d46:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004d48:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004d4a:	f7fb ff87 	bl	8000c5c <HAL_CAN_Init>
 8004d4e:	b900      	cbnz	r0, 8004d52 <MX_CAN_Init+0x32>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8004d50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d52:	f000 f97f 	bl	8005054 <Error_Handler>
}
 8004d56:	e7fb      	b.n	8004d50 <MX_CAN_Init+0x30>
 8004d58:	20000474 	.word	0x20000474
 8004d5c:	40006400 	.word	0x40006400

08004d60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004d60:	b530      	push	{r4, r5, lr}
 8004d62:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	2300      	movs	r3, #0
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 8004d6e:	6802      	ldr	r2, [r0, #0]
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_CAN_MspInit+0x80>)
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d001      	beq.n	8004d7a <HAL_CAN_MspInit+0x1a>



  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8004d76:	b007      	add	sp, #28
 8004d78:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004d7a:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004d84:	61da      	str	r2, [r3, #28]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004d8c:	9200      	str	r2, [sp, #0]
 8004d8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	f042 0204 	orr.w	r2, r2, #4
 8004d96:	619a      	str	r2, [r3, #24]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004da6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004da8:	2400      	movs	r4, #0
 8004daa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dae:	4d0d      	ldr	r5, [pc, #52]	; (8004de4 <HAL_CAN_MspInit+0x84>)
 8004db0:	a902      	add	r1, sp, #8
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7fc faf4 	bl	80013a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dbc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc6:	a902      	add	r1, sp, #8
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f7fc fae9 	bl	80013a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004dce:	4622      	mov	r2, r4
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	2015      	movs	r0, #21
 8004dd4:	f7fc fa8c 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004dd8:	2015      	movs	r0, #21
 8004dda:	f7fc fabd 	bl	8001358 <HAL_NVIC_EnableIRQ>
}
 8004dde:	e7ca      	b.n	8004d76 <HAL_CAN_MspInit+0x16>
 8004de0:	40006400 	.word	0x40006400
 8004de4:	40010800 	.word	0x40010800

08004de8 <CanInit>:
  }
}

/* USER CODE BEGIN 1 */

void CanInit(CAN_HandleTypeDef *chosen_network) {
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
	// First we use HAL_CAN_Start to activate can peripherial
  if (HAL_CAN_Start(chosen_network) != HAL_OK) {
 8004dec:	f7fc f85b 	bl	8000ea6 <HAL_CAN_Start>
 8004df0:	b928      	cbnz	r0, 8004dfe <CanInit+0x16>
		Error_Handler();
	}

  // Then we use HAL_CAN_ActivateNotification to enable receive and transmission
	if (HAL_CAN_ActivateNotification(chosen_network,
 8004df2:	2103      	movs	r1, #3
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7fc f924 	bl	8001042 <HAL_CAN_ActivateNotification>
 8004dfa:	b918      	cbnz	r0, 8004e04 <CanInit+0x1c>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
	}
}
 8004dfc:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004dfe:	f000 f929 	bl	8005054 <Error_Handler>
 8004e02:	e7f6      	b.n	8004df2 <CanInit+0xa>
		Error_Handler();
 8004e04:	f000 f926 	bl	8005054 <Error_Handler>
}
 8004e08:	e7f8      	b.n	8004dfc <CanInit+0x14>

08004e0a <CanSaveReceivedData>:

// Function for saving data after receiving it
void CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	b508      	push	{r3, lr}
 8004e0e:	f10d 0c08 	add.w	ip, sp, #8
 8004e12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8004e18:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8004e1c:	3220      	adds	r2, #32
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4660      	mov	r0, ip
 8004e22:	f7fc f86e 	bl	8000f02 <HAL_CAN_GetRxMessage>
 8004e26:	b918      	cbnz	r0, 8004e30 <CanSaveReceivedData+0x26>
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
		/* Reception Error */
		Error_Handler();
	}
}
 8004e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e2c:	b004      	add	sp, #16
 8004e2e:	4770      	bx	lr
		Error_Handler();
 8004e30:	f000 f910 	bl	8005054 <Error_Handler>
}
 8004e34:	e7f8      	b.n	8004e28 <CanSaveReceivedData+0x1e>
	...

08004e38 <CanConfigFilter>:
	}

	CanClearTxDataFrame(ptr_can_frame_template);
}

void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank) {
 8004e38:	b084      	sub	sp, #16
 8004e3a:	b508      	push	{r3, lr}
 8004e3c:	f10d 0c08 	add.w	ip, sp, #8
 8004e40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 8004e44:	490d      	ldr	r1, [pc, #52]	; (8004e7c <CanConfigFilter+0x44>)
 8004e46:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004e4a:	614b      	str	r3, [r1, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	618b      	str	r3, [r1, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8004e50:	2201      	movs	r2, #1
 8004e52:	61ca      	str	r2, [r1, #28]
	can_filter_template.FilterIdHigh = 0x0000;
 8004e54:	600b      	str	r3, [r1, #0]
	can_filter_template.FilterIdLow = 0x0000;
 8004e56:	604b      	str	r3, [r1, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 8004e58:	608b      	str	r3, [r1, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 8004e5a:	60cb      	str	r3, [r1, #12]
	can_filter_template.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004e5c:	610b      	str	r3, [r1, #16]
	can_filter_template.FilterActivation = ENABLE;
 8004e5e:	620a      	str	r2, [r1, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 8004e60:	230e      	movs	r3, #14
 8004e62:	624b      	str	r3, [r1, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 8004e64:	4660      	mov	r0, ip
 8004e66:	f7fb ff9f 	bl	8000da8 <HAL_CAN_ConfigFilter>
 8004e6a:	b918      	cbnz	r0, 8004e74 <CanConfigFilter+0x3c>
		Error_Handler();
	}

}
 8004e6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e70:	b004      	add	sp, #16
 8004e72:	4770      	bx	lr
		Error_Handler();
 8004e74:	f000 f8ee 	bl	8005054 <Error_Handler>
}
 8004e78:	e7f8      	b.n	8004e6c <CanConfigFilter+0x34>
 8004e7a:	bf00      	nop
 8004e7c:	2000049c 	.word	0x2000049c

08004e80 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e86:	2400      	movs	r4, #0
 8004e88:	9404      	str	r4, [sp, #16]
 8004e8a:	9405      	str	r4, [sp, #20]
 8004e8c:	9406      	str	r4, [sp, #24]
 8004e8e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e90:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <MX_GPIO_Init+0x120>)
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	f042 0210 	orr.w	r2, r2, #16
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	f002 0210 	and.w	r2, r2, #16
 8004ea0:	9200      	str	r2, [sp, #0]
 8004ea2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	f042 0220 	orr.w	r2, r2, #32
 8004eaa:	619a      	str	r2, [r3, #24]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	f002 0220 	and.w	r2, r2, #32
 8004eb2:	9201      	str	r2, [sp, #4]
 8004eb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	f042 0204 	orr.w	r2, r2, #4
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	f002 0204 	and.w	r2, r2, #4
 8004ec4:	9202      	str	r2, [sp, #8]
 8004ec6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	f042 0208 	orr.w	r2, r2, #8
 8004ece:	619a      	str	r2, [r3, #24]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	9303      	str	r3, [sp, #12]
 8004ed8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8004eda:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004fa8 <MX_GPIO_Init+0x128>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	f44f 41a6 	mov.w	r1, #21248	; 0x5300
 8004ee4:	4648      	mov	r0, r9
 8004ee6:	f7fc fb77 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8004eea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004fac <MX_GPIO_Init+0x12c>
 8004eee:	4622      	mov	r2, r4
 8004ef0:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	f7fc fb6f 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8004efa:	4f2a      	ldr	r7, [pc, #168]	; (8004fa4 <MX_GPIO_Init+0x124>)
 8004efc:	4622      	mov	r2, r4
 8004efe:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7fc fb68 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004f08:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8004fb0 <MX_GPIO_Init+0x130>
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	2104      	movs	r1, #4
 8004f10:	4650      	mov	r0, sl
 8004f12:	f7fc fb61 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8004f16:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8004f1a:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f1c:	2503      	movs	r5, #3
 8004f1e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f20:	a904      	add	r1, sp, #16
 8004f22:	4638      	mov	r0, r7
 8004f24:	f7fc fa3c 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA8 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8004f28:	f244 1333 	movw	r3, #16691	; 0x4133
 8004f2c:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_8|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f2e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	4640      	mov	r0, r8
 8004f34:	f7fc fa34 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8004f38:	f640 4316 	movw	r3, #3094	; 0xc16
 8004f3c:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f3e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f40:	a904      	add	r1, sp, #16
 8004f42:	4648      	mov	r0, r9
 8004f44:	f7fc fa2c 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
 8004f48:	f44f 43a6 	mov.w	r3, #21248	; 0x5300
 8004f4c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f4e:	2601      	movs	r6, #1
 8004f50:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f54:	2502      	movs	r5, #2
 8004f56:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4648      	mov	r0, r9
 8004f5c:	f7fc fa20 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f60:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f64:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f66:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f6c:	a904      	add	r1, sp, #16
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f7fc fa16 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004f78:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4638      	mov	r0, r7
 8004f84:	f7fc fa0c 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f88:	2304      	movs	r3, #4
 8004f8a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f8c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f90:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f92:	a904      	add	r1, sp, #16
 8004f94:	4650      	mov	r0, sl
 8004f96:	f7fc fa03 	bl	80013a0 <HAL_GPIO_Init>

}
 8004f9a:	b008      	add	sp, #32
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40011000 	.word	0x40011000
 8004fa8:	40010c00 	.word	0x40010c00
 8004fac:	40010800 	.word	0x40010800
 8004fb0:	40011400 	.word	0x40011400

08004fb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004fb4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004fb6:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <MX_I2C1_Init+0x30>)
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <MX_I2C1_Init+0x34>)
 8004fba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <MX_I2C1_Init+0x38>)
 8004fbe:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004fc4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fca:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fcc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004fce:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fd0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fd2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fd4:	f7fc fcc8 	bl	8001968 <HAL_I2C_Init>
 8004fd8:	b900      	cbnz	r0, 8004fdc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004fda:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004fdc:	f000 f83a 	bl	8005054 <Error_Handler>
}
 8004fe0:	e7fb      	b.n	8004fda <MX_I2C1_Init+0x26>
 8004fe2:	bf00      	nop
 8004fe4:	2000050c 	.word	0x2000050c
 8004fe8:	40005400 	.word	0x40005400
 8004fec:	00061a80 	.word	0x00061a80

08004ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9302      	str	r3, [sp, #8]
 8004ff8:	9303      	str	r3, [sp, #12]
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 8004ffe:	6802      	ldr	r2, [r0, #0]
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <HAL_I2C_MspInit+0x58>)
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005006:	b006      	add	sp, #24
 8005008:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500a:	4c10      	ldr	r4, [pc, #64]	; (800504c <HAL_I2C_MspInit+0x5c>)
 800500c:	69a3      	ldr	r3, [r4, #24]
 800500e:	f043 0308 	orr.w	r3, r3, #8
 8005012:	61a3      	str	r3, [r4, #24]
 8005014:	69a3      	ldr	r3, [r4, #24]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800501e:	23c0      	movs	r3, #192	; 0xc0
 8005020:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005022:	2312      	movs	r3, #18
 8005024:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005026:	2303      	movs	r3, #3
 8005028:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800502a:	a902      	add	r1, sp, #8
 800502c:	4808      	ldr	r0, [pc, #32]	; (8005050 <HAL_I2C_MspInit+0x60>)
 800502e:	f7fc f9b7 	bl	80013a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005032:	69e3      	ldr	r3, [r4, #28]
 8005034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005038:	61e3      	str	r3, [r4, #28]
 800503a:	69e3      	ldr	r3, [r4, #28]
 800503c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	9b01      	ldr	r3, [sp, #4]
}
 8005044:	e7df      	b.n	8005006 <HAL_I2C_MspInit+0x16>
 8005046:	bf00      	nop
 8005048:	40005400 	.word	0x40005400
 800504c:	40021000 	.word	0x40021000
 8005050:	40010c00 	.word	0x40010c00

08005054 <Error_Handler>:
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8005054:	e7fe      	b.n	8005054 <Error_Handler>

08005056 <SystemClock_Config>:
void SystemClock_Config(void) {
 8005056:	b500      	push	{lr}
 8005058:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800505a:	2300      	movs	r3, #0
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005060:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	9302      	str	r3, [sp, #8]
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800506c:	2201      	movs	r2, #1
 800506e:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005074:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8005076:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800507a:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800507c:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800507e:	2202      	movs	r2, #2
 8005080:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005082:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005084:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005088:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800508a:	a806      	add	r0, sp, #24
 800508c:	f7fc fece 	bl	8001e2c <HAL_RCC_OscConfig>
 8005090:	b980      	cbnz	r0, 80050b4 <SystemClock_Config+0x5e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005092:	230f      	movs	r3, #15
 8005094:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005096:	2102      	movs	r1, #2
 8005098:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800509a:	2300      	movs	r3, #0
 800509c:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800509e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a2:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050a4:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80050a6:	a801      	add	r0, sp, #4
 80050a8:	f7fd f904 	bl	80022b4 <HAL_RCC_ClockConfig>
 80050ac:	b920      	cbnz	r0, 80050b8 <SystemClock_Config+0x62>
}
 80050ae:	b011      	add	sp, #68	; 0x44
 80050b0:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80050b4:	f7ff ffce 	bl	8005054 <Error_Handler>
		Error_Handler();
 80050b8:	f7ff ffcc 	bl	8005054 <Error_Handler>

080050bc <main>:
int main(void) {
 80050bc:	b500      	push	{lr}
 80050be:	b089      	sub	sp, #36	; 0x24
	HAL_Init();
 80050c0:	f7fb fd94 	bl	8000bec <HAL_Init>
	SystemClock_Config();
 80050c4:	f7ff ffc7 	bl	8005056 <SystemClock_Config>
	MX_GPIO_Init();
 80050c8:	f7ff feda 	bl	8004e80 <MX_GPIO_Init>
	MX_CAN_Init();
 80050cc:	f7ff fe28 	bl	8004d20 <MX_CAN_Init>
	MX_I2C1_Init();
 80050d0:	f7ff ff70 	bl	8004fb4 <MX_I2C1_Init>
	MX_SPI2_Init();
 80050d4:	f000 f828 	bl	8005128 <MX_SPI2_Init>
	MX_SPI3_Init();
 80050d8:	f000 f848 	bl	800516c <MX_SPI3_Init>
	MX_TIM3_Init();
 80050dc:	f000 f97e 	bl	80053dc <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80050e0:	f000 fa00 	bl	80054e4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80050e4:	f000 fa18 	bl	8005518 <MX_USART2_UART_Init>
	gui_init();
 80050e8:	f7ff f9a0 	bl	800442c <gui_init>
	gui_screen_intro(); //test
 80050ec:	f7ff f9b4 	bl	8004458 <gui_screen_intro>
	HAL_Delay(100);
 80050f0:	2064      	movs	r0, #100	; 0x64
 80050f2:	f7fb fd9f 	bl	8000c34 <HAL_Delay>
	CanConfigFilter(hcan, 1);
 80050f6:	4e0b      	ldr	r6, [pc, #44]	; (8005124 <main+0x68>)
 80050f8:	2301      	movs	r3, #1
 80050fa:	9306      	str	r3, [sp, #24]
 80050fc:	466c      	mov	r4, sp
 80050fe:	f106 0510 	add.w	r5, r6, #16
 8005102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005106:	e895 0003 	ldmia.w	r5, {r0, r1}
 800510a:	e884 0003 	stmia.w	r4, {r0, r1}
 800510e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005112:	f7ff fe91 	bl	8004e38 <CanConfigFilter>
	CanInit(&hcan);
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff fe66 	bl	8004de8 <CanInit>
		gui_screen_main();
 800511c:	f7ff fa7c 	bl	8004618 <gui_screen_main>
	while (1) {
 8005120:	e7fc      	b.n	800511c <main+0x60>
 8005122:	bf00      	nop
 8005124:	20000474 	.word	0x20000474

08005128 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005128:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800512a:	480e      	ldr	r0, [pc, #56]	; (8005164 <MX_SPI2_Init+0x3c>)
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <MX_SPI2_Init+0x40>)
 800512e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005130:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005134:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005136:	2300      	movs	r3, #0
 8005138:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800513a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800513c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800513e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005144:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005146:	2218      	movs	r2, #24
 8005148:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	6202      	str	r2, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800514e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005150:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005152:	230a      	movs	r3, #10
 8005154:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005156:	f7fd fa03 	bl	8002560 <HAL_SPI_Init>
 800515a:	b900      	cbnz	r0, 800515e <MX_SPI2_Init+0x36>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800515c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800515e:	f7ff ff79 	bl	8005054 <Error_Handler>
}
 8005162:	e7fb      	b.n	800515c <MX_SPI2_Init+0x34>
 8005164:	20000560 	.word	0x20000560
 8005168:	40003800 	.word	0x40003800

0800516c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800516c:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800516e:	480e      	ldr	r0, [pc, #56]	; (80051a8 <MX_SPI3_Init+0x3c>)
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <MX_SPI3_Init+0x40>)
 8005172:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005174:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005178:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800517a:	2300      	movs	r3, #0
 800517c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800517e:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005180:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005182:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005188:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800518a:	2208      	movs	r2, #8
 800518c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800518e:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005190:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005192:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005194:	230a      	movs	r3, #10
 8005196:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005198:	f7fd f9e2 	bl	8002560 <HAL_SPI_Init>
 800519c:	b900      	cbnz	r0, 80051a0 <MX_SPI3_Init+0x34>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800519e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80051a0:	f7ff ff58 	bl	8005054 <Error_Handler>
}
 80051a4:	e7fb      	b.n	800519e <MX_SPI3_Init+0x32>
 80051a6:	bf00      	nop
 80051a8:	200005b8 	.word	0x200005b8
 80051ac:	40003c00 	.word	0x40003c00

080051b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051b0:	b500      	push	{lr}
 80051b2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	2300      	movs	r3, #0
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	9305      	str	r3, [sp, #20]
 80051ba:	9306      	str	r3, [sp, #24]
 80051bc:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 80051be:	6803      	ldr	r3, [r0, #0]
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <HAL_SPI_MspInit+0x9c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d005      	beq.n	80051d2 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 80051c6:	4a22      	ldr	r2, [pc, #136]	; (8005250 <HAL_SPI_MspInit+0xa0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d021      	beq.n	8005210 <HAL_SPI_MspInit+0x60>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80051cc:	b009      	add	sp, #36	; 0x24
 80051ce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_SPI_MspInit+0xa4>)
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80051e2:	9200      	str	r2, [sp, #0]
 80051e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	f042 0208 	orr.w	r2, r2, #8
 80051ec:	619a      	str	r2, [r3, #24]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80051f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80051fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005202:	2303      	movs	r3, #3
 8005204:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005206:	a904      	add	r1, sp, #16
 8005208:	4813      	ldr	r0, [pc, #76]	; (8005258 <HAL_SPI_MspInit+0xa8>)
 800520a:	f7fc f8c9 	bl	80013a0 <HAL_GPIO_Init>
 800520e:	e7dd      	b.n	80051cc <HAL_SPI_MspInit+0x1c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_SPI_MspInit+0xa4>)
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005218:	61da      	str	r2, [r3, #28]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005220:	9202      	str	r2, [sp, #8]
 8005222:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	619a      	str	r2, [r3, #24]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	9303      	str	r3, [sp, #12]
 8005234:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8005236:	2328      	movs	r3, #40	; 0x28
 8005238:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523a:	2302      	movs	r3, #2
 800523c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800523e:	2303      	movs	r3, #3
 8005240:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005242:	a904      	add	r1, sp, #16
 8005244:	4804      	ldr	r0, [pc, #16]	; (8005258 <HAL_SPI_MspInit+0xa8>)
 8005246:	f7fc f8ab 	bl	80013a0 <HAL_GPIO_Init>
}
 800524a:	e7bf      	b.n	80051cc <HAL_SPI_MspInit+0x1c>
 800524c:	40003800 	.word	0x40003800
 8005250:	40003c00 	.word	0x40003c00
 8005254:	40021000 	.word	0x40021000
 8005258:	40010c00 	.word	0x40010c00

0800525c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800525c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800525e:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <HAL_MspInit+0x3c>)
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	619a      	str	r2, [r3, #24]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	f002 0201 	and.w	r2, r2, #1
 800526e:	9200      	str	r2, [sp, #0]
 8005270:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005278:	61da      	str	r2, [r3, #28]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8005284:	4a05      	ldr	r2, [pc, #20]	; (800529c <HAL_MspInit+0x40>)
 8005286:	6853      	ldr	r3, [r2, #4]
 8005288:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800528c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005292:	b002      	add	sp, #8
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	40010000 	.word	0x40010000

080052a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80052a0:	4770      	bx	lr

080052a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052a2:	e7fe      	b.n	80052a2 <HardFault_Handler>

080052a4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052a4:	e7fe      	b.n	80052a4 <MemManage_Handler>

080052a6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052a6:	e7fe      	b.n	80052a6 <BusFault_Handler>

080052a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052a8:	e7fe      	b.n	80052a8 <UsageFault_Handler>

080052aa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052aa:	4770      	bx	lr

080052ac <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052ac:	4770      	bx	lr

080052ae <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052ae:	4770      	bx	lr

080052b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b2:	f7fb fcad 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052b6:	bd08      	pop	{r3, pc}

080052b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	b088      	sub	sp, #32
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80052bc:	4e0a      	ldr	r6, [pc, #40]	; (80052e8 <CAN1_RX1_IRQHandler+0x30>)
 80052be:	4630      	mov	r0, r6
 80052c0:	f7fb fede 	bl	8001080 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  CanSaveReceivedData(hcan, &CanFrame);
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <CAN1_RX1_IRQHandler+0x34>)
 80052c6:	9306      	str	r3, [sp, #24]
 80052c8:	466c      	mov	r4, sp
 80052ca:	f106 0510 	add.w	r5, r6, #16
 80052ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80052da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80052de:	f7ff fd94 	bl	8004e0a <CanSaveReceivedData>
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80052e2:	b008      	add	sp, #32
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	bf00      	nop
 80052e8:	20000474 	.word	0x20000474
 80052ec:	200004c8 	.word	0x200004c8

080052f0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <SystemInit+0x40>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	4a0d      	ldr	r2, [pc, #52]	; (8005334 <SystemInit+0x44>)
 80052fe:	400a      	ands	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005308:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800530c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005314:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800531c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800531e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005322:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <SystemInit+0x48>)
 8005326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800532a:	609a      	str	r2, [r3, #8]
#endif 
}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	f8ff0000 	.word	0xf8ff0000
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800533c:	6802      	ldr	r2, [r0, #0]
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_TIM_Base_MspInit+0x28>)
 8005340:	429a      	cmp	r2, r3
 8005342:	d000      	beq.n	8005346 <HAL_TIM_Base_MspInit+0xa>
 8005344:	4770      	bx	lr
{
 8005346:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005348:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	f042 0202 	orr.w	r2, r2, #2
 8005352:	61da      	str	r2, [r3, #28]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800535e:	b002      	add	sp, #8
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40000400 	.word	0x40000400

08005368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005368:	b510      	push	{r4, lr}
 800536a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536c:	2300      	movs	r3, #0
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8005376:	6802      	ldr	r2, [r0, #0]
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <HAL_TIM_MspPostInit+0x68>)
 800537a:	429a      	cmp	r2, r3
 800537c:	d001      	beq.n	8005382 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800537e:	b006      	add	sp, #24
 8005380:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005382:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	f042 0204 	orr.w	r2, r2, #4
 800538c:	619a      	str	r2, [r3, #24]
 800538e:	699a      	ldr	r2, [r3, #24]
 8005390:	f002 0204 	and.w	r2, r2, #4
 8005394:	9200      	str	r2, [sp, #0]
 8005396:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	f042 0208 	orr.w	r2, r2, #8
 800539e:	619a      	str	r2, [r3, #24]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053aa:	23c0      	movs	r3, #192	; 0xc0
 80053ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ae:	2402      	movs	r4, #2
 80053b0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b4:	a902      	add	r1, sp, #8
 80053b6:	4807      	ldr	r0, [pc, #28]	; (80053d4 <HAL_TIM_MspPostInit+0x6c>)
 80053b8:	f7fb fff2 	bl	80013a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80053bc:	2301      	movs	r3, #1
 80053be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c4:	a902      	add	r1, sp, #8
 80053c6:	4804      	ldr	r0, [pc, #16]	; (80053d8 <HAL_TIM_MspPostInit+0x70>)
 80053c8:	f7fb ffea 	bl	80013a0 <HAL_GPIO_Init>
}
 80053cc:	e7d7      	b.n	800537e <HAL_TIM_MspPostInit+0x16>
 80053ce:	bf00      	nop
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40010800 	.word	0x40010800
 80053d8:	40010c00 	.word	0x40010c00

080053dc <MX_TIM3_Init>:
{
 80053dc:	b500      	push	{lr}
 80053de:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053e0:	2300      	movs	r3, #0
 80053e2:	930a      	str	r3, [sp, #40]	; 0x28
 80053e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e6:	930c      	str	r3, [sp, #48]	; 0x30
 80053e8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053ea:	9308      	str	r3, [sp, #32]
 80053ec:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	9302      	str	r3, [sp, #8]
 80053f2:	9303      	str	r3, [sp, #12]
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	9305      	str	r3, [sp, #20]
 80053f8:	9306      	str	r3, [sp, #24]
 80053fa:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80053fc:	482a      	ldr	r0, [pc, #168]	; (80054a8 <MX_TIM3_Init+0xcc>)
 80053fe:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <MX_TIM3_Init+0xd0>)
 8005400:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4999;
 8005402:	f241 3287 	movw	r2, #4999	; 0x1387
 8005406:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005408:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 99;
 800540a:	2263      	movs	r2, #99	; 0x63
 800540c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800540e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005410:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005412:	f7fd fae9 	bl	80029e8 <HAL_TIM_Base_Init>
 8005416:	2800      	cmp	r0, #0
 8005418:	d131      	bne.n	800547e <MX_TIM3_Init+0xa2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800541a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800541e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005420:	a90a      	add	r1, sp, #40	; 0x28
 8005422:	4821      	ldr	r0, [pc, #132]	; (80054a8 <MX_TIM3_Init+0xcc>)
 8005424:	f7fd fbe3 	bl	8002bee <HAL_TIM_ConfigClockSource>
 8005428:	bb60      	cbnz	r0, 8005484 <MX_TIM3_Init+0xa8>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800542a:	481f      	ldr	r0, [pc, #124]	; (80054a8 <MX_TIM3_Init+0xcc>)
 800542c:	f7fd fb08 	bl	8002a40 <HAL_TIM_PWM_Init>
 8005430:	bb58      	cbnz	r0, 800548a <MX_TIM3_Init+0xae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005432:	2300      	movs	r3, #0
 8005434:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005436:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005438:	a908      	add	r1, sp, #32
 800543a:	481b      	ldr	r0, [pc, #108]	; (80054a8 <MX_TIM3_Init+0xcc>)
 800543c:	f7fd fcd0 	bl	8002de0 <HAL_TIMEx_MasterConfigSynchronization>
 8005440:	bb30      	cbnz	r0, 8005490 <MX_TIM3_Init+0xb4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005442:	2360      	movs	r3, #96	; 0x60
 8005444:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8005446:	2200      	movs	r2, #0
 8005448:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800544a:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800544c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800544e:	a901      	add	r1, sp, #4
 8005450:	4815      	ldr	r0, [pc, #84]	; (80054a8 <MX_TIM3_Init+0xcc>)
 8005452:	f7fd fb59 	bl	8002b08 <HAL_TIM_PWM_ConfigChannel>
 8005456:	b9f0      	cbnz	r0, 8005496 <MX_TIM3_Init+0xba>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005458:	2204      	movs	r2, #4
 800545a:	eb0d 0102 	add.w	r1, sp, r2
 800545e:	4812      	ldr	r0, [pc, #72]	; (80054a8 <MX_TIM3_Init+0xcc>)
 8005460:	f7fd fb52 	bl	8002b08 <HAL_TIM_PWM_ConfigChannel>
 8005464:	b9d0      	cbnz	r0, 800549c <MX_TIM3_Init+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005466:	2208      	movs	r2, #8
 8005468:	a901      	add	r1, sp, #4
 800546a:	480f      	ldr	r0, [pc, #60]	; (80054a8 <MX_TIM3_Init+0xcc>)
 800546c:	f7fd fb4c 	bl	8002b08 <HAL_TIM_PWM_ConfigChannel>
 8005470:	b9b8      	cbnz	r0, 80054a2 <MX_TIM3_Init+0xc6>
  HAL_TIM_MspPostInit(&htim3);
 8005472:	480d      	ldr	r0, [pc, #52]	; (80054a8 <MX_TIM3_Init+0xcc>)
 8005474:	f7ff ff78 	bl	8005368 <HAL_TIM_MspPostInit>
}
 8005478:	b00f      	add	sp, #60	; 0x3c
 800547a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800547e:	f7ff fde9 	bl	8005054 <Error_Handler>
 8005482:	e7ca      	b.n	800541a <MX_TIM3_Init+0x3e>
    Error_Handler();
 8005484:	f7ff fde6 	bl	8005054 <Error_Handler>
 8005488:	e7cf      	b.n	800542a <MX_TIM3_Init+0x4e>
    Error_Handler();
 800548a:	f7ff fde3 	bl	8005054 <Error_Handler>
 800548e:	e7d0      	b.n	8005432 <MX_TIM3_Init+0x56>
    Error_Handler();
 8005490:	f7ff fde0 	bl	8005054 <Error_Handler>
 8005494:	e7d5      	b.n	8005442 <MX_TIM3_Init+0x66>
    Error_Handler();
 8005496:	f7ff fddd 	bl	8005054 <Error_Handler>
 800549a:	e7dd      	b.n	8005458 <MX_TIM3_Init+0x7c>
    Error_Handler();
 800549c:	f7ff fdda 	bl	8005054 <Error_Handler>
 80054a0:	e7e1      	b.n	8005466 <MX_TIM3_Init+0x8a>
    Error_Handler();
 80054a2:	f7ff fdd7 	bl	8005054 <Error_Handler>
 80054a6:	e7e4      	b.n	8005472 <MX_TIM3_Init+0x96>
 80054a8:	20000610 	.word	0x20000610
 80054ac:	40000400 	.word	0x40000400

080054b0 <set_backlight>:

/* USER CODE BEGIN 1 */
// PWM mode functions and handling
void set_backlight(int bl)
{
	  TIM3->CCR1 = bl;
 80054b0:	4b02      	ldr	r3, [pc, #8]	; (80054bc <set_backlight+0xc>)
 80054b2:	6358      	str	r0, [r3, #52]	; 0x34
	  TIM3->CCR2 = bl;
 80054b4:	6398      	str	r0, [r3, #56]	; 0x38
	  TIM3->CCR3 = bl;
 80054b6:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40000400 	.word	0x40000400

080054c0 <pwm_init>:

void pwm_init()
{
 80054c0:	b510      	push	{r4, lr}
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Uruchamia generowanie PWM przez timer 4 na kanale 1
 80054c2:	4c07      	ldr	r4, [pc, #28]	; (80054e0 <pwm_init+0x20>)
 80054c4:	2100      	movs	r1, #0
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7fd fc10 	bl	8002cec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Uruchamia generowanie PWM przez timer 4 na kanale 2
 80054cc:	2104      	movs	r1, #4
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7fd fc0c 	bl	8002cec <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Uruchamia generowanie PWM przez timer 4 na kanale 3
 80054d4:	2108      	movs	r1, #8
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7fd fc08 	bl	8002cec <HAL_TIM_PWM_Start>
}
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	bf00      	nop
 80054e0:	20000610 	.word	0x20000610

080054e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80054e4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054e6:	480a      	ldr	r0, [pc, #40]	; (8005510 <MX_USART1_UART_Init+0x2c>)
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <MX_USART1_UART_Init+0x30>)
 80054ea:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80054ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80054f0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054f2:	2300      	movs	r3, #0
 80054f4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054f6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054f8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054fa:	220c      	movs	r2, #12
 80054fc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054fe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005500:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005502:	f7fd fd25 	bl	8002f50 <HAL_UART_Init>
 8005506:	b900      	cbnz	r0, 800550a <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005508:	bd08      	pop	{r3, pc}
    Error_Handler();
 800550a:	f7ff fda3 	bl	8005054 <Error_Handler>
}
 800550e:	e7fb      	b.n	8005508 <MX_USART1_UART_Init+0x24>
 8005510:	20000658 	.word	0x20000658
 8005514:	40013800 	.word	0x40013800

08005518 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005518:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800551a:	480a      	ldr	r0, [pc, #40]	; (8005544 <MX_USART2_UART_Init+0x2c>)
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <MX_USART2_UART_Init+0x30>)
 800551e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8005520:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005524:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005526:	2300      	movs	r3, #0
 8005528:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800552a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800552c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800552e:	220c      	movs	r2, #12
 8005530:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005532:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005534:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005536:	f7fd fd0b 	bl	8002f50 <HAL_UART_Init>
 800553a:	b900      	cbnz	r0, 800553e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800553c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800553e:	f7ff fd89 	bl	8005054 <Error_Handler>
}
 8005542:	e7fb      	b.n	800553c <MX_USART2_UART_Init+0x24>
 8005544:	2000069c 	.word	0x2000069c
 8005548:	40004400 	.word	0x40004400

0800554c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800554c:	b510      	push	{r4, lr}
 800554e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005550:	2300      	movs	r3, #0
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	9306      	str	r3, [sp, #24]
 8005558:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800555a:	6803      	ldr	r3, [r0, #0]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <HAL_UART_MspInit+0xc4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8005562:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <HAL_UART_MspInit+0xc8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d02b      	beq.n	80055c0 <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005568:	b008      	add	sp, #32
 800556a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800556c:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <HAL_UART_MspInit+0xcc>)
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005574:	619a      	str	r2, [r3, #24]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800557c:	9200      	str	r2, [sp, #0]
 800557e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	f042 0204 	orr.w	r2, r2, #4
 8005586:	619a      	str	r2, [r3, #24]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005596:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800559c:	2303      	movs	r3, #3
 800559e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a0:	4c1e      	ldr	r4, [pc, #120]	; (800561c <HAL_UART_MspInit+0xd0>)
 80055a2:	a904      	add	r1, sp, #16
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7fb fefb 	bl	80013a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055b0:	2300      	movs	r3, #0
 80055b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b6:	a904      	add	r1, sp, #16
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7fb fef1 	bl	80013a0 <HAL_GPIO_Init>
 80055be:	e7d3      	b.n	8005568 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055c0:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_UART_MspInit+0xcc>)
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80055c8:	61da      	str	r2, [r3, #28]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80055d0:	9202      	str	r2, [sp, #8]
 80055d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	f042 0204 	orr.w	r2, r2, #4
 80055da:	619a      	str	r2, [r3, #24]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055e6:	2304      	movs	r3, #4
 80055e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ea:	2302      	movs	r3, #2
 80055ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055ee:	2303      	movs	r3, #3
 80055f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f2:	4c0a      	ldr	r4, [pc, #40]	; (800561c <HAL_UART_MspInit+0xd0>)
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4620      	mov	r0, r4
 80055f8:	f7fb fed2 	bl	80013a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80055fc:	2308      	movs	r3, #8
 80055fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005600:	2300      	movs	r3, #0
 8005602:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005606:	a904      	add	r1, sp, #16
 8005608:	4620      	mov	r0, r4
 800560a:	f7fb fec9 	bl	80013a0 <HAL_GPIO_Init>
}
 800560e:	e7ab      	b.n	8005568 <HAL_UART_MspInit+0x1c>
 8005610:	40013800 	.word	0x40013800
 8005614:	40004400 	.word	0x40004400
 8005618:	40021000 	.word	0x40021000
 800561c:	40010800 	.word	0x40010800

08005620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005620:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005622:	e003      	b.n	800562c <LoopCopyDataInit>

08005624 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005626:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005628:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800562a:	3104      	adds	r1, #4

0800562c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800562c:	480a      	ldr	r0, [pc, #40]	; (8005658 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005630:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005632:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005634:	d3f6      	bcc.n	8005624 <CopyDataInit>
  ldr r2, =_sbss
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005638:	e002      	b.n	8005640 <LoopFillZerobss>

0800563a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800563a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800563c:	f842 3b04 	str.w	r3, [r2], #4

08005640 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005642:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005644:	d3f9      	bcc.n	800563a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005646:	f7ff fe53 	bl	80052f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800564a:	f000 f80f 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800564e:	f7ff fd35 	bl	80050bc <main>
  bx lr
 8005652:	4770      	bx	lr
  ldr r3, =_sidata
 8005654:	0800c97c 	.word	0x0800c97c
  ldr r0, =_sdata
 8005658:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800565c:	2000021c 	.word	0x2000021c
  ldr r2, =_sbss
 8005660:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8005664:	200006f0 	.word	0x200006f0

08005668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005668:	e7fe      	b.n	8005668 <ADC1_2_IRQHandler>
	...

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	2600      	movs	r6, #0
 8005670:	4d0c      	ldr	r5, [pc, #48]	; (80056a4 <__libc_init_array+0x38>)
 8005672:	4c0d      	ldr	r4, [pc, #52]	; (80056a8 <__libc_init_array+0x3c>)
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	f002 ffc0 	bl	8008600 <_init>
 8005680:	2600      	movs	r6, #0
 8005682:	4d0a      	ldr	r5, [pc, #40]	; (80056ac <__libc_init_array+0x40>)
 8005684:	4c0a      	ldr	r4, [pc, #40]	; (80056b0 <__libc_init_array+0x44>)
 8005686:	1b64      	subs	r4, r4, r5
 8005688:	10a4      	asrs	r4, r4, #2
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	0800c974 	.word	0x0800c974
 80056a8:	0800c974 	.word	0x0800c974
 80056ac:	0800c974 	.word	0x0800c974
 80056b0:	0800c978 	.word	0x0800c978

080056b4 <memset>:
 80056b4:	4603      	mov	r3, r0
 80056b6:	4402      	add	r2, r0
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d100      	bne.n	80056be <memset+0xa>
 80056bc:	4770      	bx	lr
 80056be:	f803 1b01 	strb.w	r1, [r3], #1
 80056c2:	e7f9      	b.n	80056b8 <memset+0x4>

080056c4 <__cvt>:
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ca:	461f      	mov	r7, r3
 80056cc:	bfbb      	ittet	lt
 80056ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056d2:	461f      	movlt	r7, r3
 80056d4:	2300      	movge	r3, #0
 80056d6:	232d      	movlt	r3, #45	; 0x2d
 80056d8:	b088      	sub	sp, #32
 80056da:	4614      	mov	r4, r2
 80056dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056e0:	7013      	strb	r3, [r2, #0]
 80056e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80056e8:	f023 0820 	bic.w	r8, r3, #32
 80056ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056f0:	d005      	beq.n	80056fe <__cvt+0x3a>
 80056f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056f6:	d100      	bne.n	80056fa <__cvt+0x36>
 80056f8:	3501      	adds	r5, #1
 80056fa:	2302      	movs	r3, #2
 80056fc:	e000      	b.n	8005700 <__cvt+0x3c>
 80056fe:	2303      	movs	r3, #3
 8005700:	aa07      	add	r2, sp, #28
 8005702:	9204      	str	r2, [sp, #16]
 8005704:	aa06      	add	r2, sp, #24
 8005706:	e9cd a202 	strd	sl, r2, [sp, #8]
 800570a:	e9cd 3500 	strd	r3, r5, [sp]
 800570e:	4622      	mov	r2, r4
 8005710:	463b      	mov	r3, r7
 8005712:	f000 fd19 	bl	8006148 <_dtoa_r>
 8005716:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800571a:	4606      	mov	r6, r0
 800571c:	d102      	bne.n	8005724 <__cvt+0x60>
 800571e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005720:	07db      	lsls	r3, r3, #31
 8005722:	d522      	bpl.n	800576a <__cvt+0xa6>
 8005724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005728:	eb06 0905 	add.w	r9, r6, r5
 800572c:	d110      	bne.n	8005750 <__cvt+0x8c>
 800572e:	7833      	ldrb	r3, [r6, #0]
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	d10a      	bne.n	800574a <__cvt+0x86>
 8005734:	2200      	movs	r2, #0
 8005736:	2300      	movs	r3, #0
 8005738:	4620      	mov	r0, r4
 800573a:	4639      	mov	r1, r7
 800573c:	f7fb f9a0 	bl	8000a80 <__aeabi_dcmpeq>
 8005740:	b918      	cbnz	r0, 800574a <__cvt+0x86>
 8005742:	f1c5 0501 	rsb	r5, r5, #1
 8005746:	f8ca 5000 	str.w	r5, [sl]
 800574a:	f8da 3000 	ldr.w	r3, [sl]
 800574e:	4499      	add	r9, r3
 8005750:	2200      	movs	r2, #0
 8005752:	2300      	movs	r3, #0
 8005754:	4620      	mov	r0, r4
 8005756:	4639      	mov	r1, r7
 8005758:	f7fb f992 	bl	8000a80 <__aeabi_dcmpeq>
 800575c:	b108      	cbz	r0, 8005762 <__cvt+0x9e>
 800575e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005762:	2230      	movs	r2, #48	; 0x30
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	454b      	cmp	r3, r9
 8005768:	d307      	bcc.n	800577a <__cvt+0xb6>
 800576a:	4630      	mov	r0, r6
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	b008      	add	sp, #32
 8005776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	9107      	str	r1, [sp, #28]
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e7f0      	b.n	8005764 <__cvt+0xa0>

08005782 <__exponent>:
 8005782:	4603      	mov	r3, r0
 8005784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005786:	2900      	cmp	r1, #0
 8005788:	f803 2b02 	strb.w	r2, [r3], #2
 800578c:	bfb6      	itet	lt
 800578e:	222d      	movlt	r2, #45	; 0x2d
 8005790:	222b      	movge	r2, #43	; 0x2b
 8005792:	4249      	neglt	r1, r1
 8005794:	2909      	cmp	r1, #9
 8005796:	7042      	strb	r2, [r0, #1]
 8005798:	dd2b      	ble.n	80057f2 <__exponent+0x70>
 800579a:	f10d 0407 	add.w	r4, sp, #7
 800579e:	46a4      	mov	ip, r4
 80057a0:	270a      	movs	r7, #10
 80057a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80057a6:	460a      	mov	r2, r1
 80057a8:	46a6      	mov	lr, r4
 80057aa:	fb07 1516 	mls	r5, r7, r6, r1
 80057ae:	2a63      	cmp	r2, #99	; 0x63
 80057b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80057b4:	4631      	mov	r1, r6
 80057b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80057ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057be:	dcf0      	bgt.n	80057a2 <__exponent+0x20>
 80057c0:	3130      	adds	r1, #48	; 0x30
 80057c2:	f1ae 0502 	sub.w	r5, lr, #2
 80057c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057ca:	4629      	mov	r1, r5
 80057cc:	1c44      	adds	r4, r0, #1
 80057ce:	4561      	cmp	r1, ip
 80057d0:	d30a      	bcc.n	80057e8 <__exponent+0x66>
 80057d2:	f10d 0209 	add.w	r2, sp, #9
 80057d6:	eba2 020e 	sub.w	r2, r2, lr
 80057da:	4565      	cmp	r5, ip
 80057dc:	bf88      	it	hi
 80057de:	2200      	movhi	r2, #0
 80057e0:	4413      	add	r3, r2
 80057e2:	1a18      	subs	r0, r3, r0
 80057e4:	b003      	add	sp, #12
 80057e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057f0:	e7ed      	b.n	80057ce <__exponent+0x4c>
 80057f2:	2330      	movs	r3, #48	; 0x30
 80057f4:	3130      	adds	r1, #48	; 0x30
 80057f6:	7083      	strb	r3, [r0, #2]
 80057f8:	70c1      	strb	r1, [r0, #3]
 80057fa:	1d03      	adds	r3, r0, #4
 80057fc:	e7f1      	b.n	80057e2 <__exponent+0x60>
	...

08005800 <_printf_float>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	b091      	sub	sp, #68	; 0x44
 8005806:	460c      	mov	r4, r1
 8005808:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800580c:	4616      	mov	r6, r2
 800580e:	461f      	mov	r7, r3
 8005810:	4605      	mov	r5, r0
 8005812:	f001 fa87 	bl	8006d24 <_localeconv_r>
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	9309      	str	r3, [sp, #36]	; 0x24
 800581c:	f7fa fd04 	bl	8000228 <strlen>
 8005820:	2300      	movs	r3, #0
 8005822:	930e      	str	r3, [sp, #56]	; 0x38
 8005824:	f8d8 3000 	ldr.w	r3, [r8]
 8005828:	900a      	str	r0, [sp, #40]	; 0x28
 800582a:	3307      	adds	r3, #7
 800582c:	f023 0307 	bic.w	r3, r3, #7
 8005830:	f103 0208 	add.w	r2, r3, #8
 8005834:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005838:	f8d4 b000 	ldr.w	fp, [r4]
 800583c:	f8c8 2000 	str.w	r2, [r8]
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005848:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800584c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005850:	930b      	str	r3, [sp, #44]	; 0x2c
 8005852:	f04f 32ff 	mov.w	r2, #4294967295
 8005856:	4640      	mov	r0, r8
 8005858:	4b9c      	ldr	r3, [pc, #624]	; (8005acc <_printf_float+0x2cc>)
 800585a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585c:	f7fb f942 	bl	8000ae4 <__aeabi_dcmpun>
 8005860:	bb70      	cbnz	r0, 80058c0 <_printf_float+0xc0>
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	4640      	mov	r0, r8
 8005868:	4b98      	ldr	r3, [pc, #608]	; (8005acc <_printf_float+0x2cc>)
 800586a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800586c:	f7fb f91c 	bl	8000aa8 <__aeabi_dcmple>
 8005870:	bb30      	cbnz	r0, 80058c0 <_printf_float+0xc0>
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	4640      	mov	r0, r8
 8005878:	4651      	mov	r1, sl
 800587a:	f7fb f90b 	bl	8000a94 <__aeabi_dcmplt>
 800587e:	b110      	cbz	r0, 8005886 <_printf_float+0x86>
 8005880:	232d      	movs	r3, #45	; 0x2d
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	4b92      	ldr	r3, [pc, #584]	; (8005ad0 <_printf_float+0x2d0>)
 8005888:	4892      	ldr	r0, [pc, #584]	; (8005ad4 <_printf_float+0x2d4>)
 800588a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800588e:	bf94      	ite	ls
 8005890:	4698      	movls	r8, r3
 8005892:	4680      	movhi	r8, r0
 8005894:	2303      	movs	r3, #3
 8005896:	f04f 0a00 	mov.w	sl, #0
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	f02b 0304 	bic.w	r3, fp, #4
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	4633      	mov	r3, r6
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	9700      	str	r7, [sp, #0]
 80058aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80058ac:	f000 f9d4 	bl	8005c58 <_printf_common>
 80058b0:	3001      	adds	r0, #1
 80058b2:	f040 8090 	bne.w	80059d6 <_printf_float+0x1d6>
 80058b6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ba:	b011      	add	sp, #68	; 0x44
 80058bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c0:	4642      	mov	r2, r8
 80058c2:	4653      	mov	r3, sl
 80058c4:	4640      	mov	r0, r8
 80058c6:	4651      	mov	r1, sl
 80058c8:	f7fb f90c 	bl	8000ae4 <__aeabi_dcmpun>
 80058cc:	b148      	cbz	r0, 80058e2 <_printf_float+0xe2>
 80058ce:	f1ba 0f00 	cmp.w	sl, #0
 80058d2:	bfb8      	it	lt
 80058d4:	232d      	movlt	r3, #45	; 0x2d
 80058d6:	4880      	ldr	r0, [pc, #512]	; (8005ad8 <_printf_float+0x2d8>)
 80058d8:	bfb8      	it	lt
 80058da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058de:	4b7f      	ldr	r3, [pc, #508]	; (8005adc <_printf_float+0x2dc>)
 80058e0:	e7d3      	b.n	800588a <_printf_float+0x8a>
 80058e2:	6863      	ldr	r3, [r4, #4]
 80058e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	d142      	bne.n	8005972 <_printf_float+0x172>
 80058ec:	2306      	movs	r3, #6
 80058ee:	6063      	str	r3, [r4, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	9206      	str	r2, [sp, #24]
 80058f4:	aa0e      	add	r2, sp, #56	; 0x38
 80058f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80058fa:	aa0d      	add	r2, sp, #52	; 0x34
 80058fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005900:	9203      	str	r2, [sp, #12]
 8005902:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	6863      	ldr	r3, [r4, #4]
 800590e:	4642      	mov	r2, r8
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4628      	mov	r0, r5
 8005914:	4653      	mov	r3, sl
 8005916:	910b      	str	r1, [sp, #44]	; 0x2c
 8005918:	f7ff fed4 	bl	80056c4 <__cvt>
 800591c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800591e:	4680      	mov	r8, r0
 8005920:	2947      	cmp	r1, #71	; 0x47
 8005922:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005924:	d108      	bne.n	8005938 <_printf_float+0x138>
 8005926:	1cc8      	adds	r0, r1, #3
 8005928:	db02      	blt.n	8005930 <_printf_float+0x130>
 800592a:	6863      	ldr	r3, [r4, #4]
 800592c:	4299      	cmp	r1, r3
 800592e:	dd40      	ble.n	80059b2 <_printf_float+0x1b2>
 8005930:	f1a9 0902 	sub.w	r9, r9, #2
 8005934:	fa5f f989 	uxtb.w	r9, r9
 8005938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800593c:	d81f      	bhi.n	800597e <_printf_float+0x17e>
 800593e:	464a      	mov	r2, r9
 8005940:	3901      	subs	r1, #1
 8005942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005946:	910d      	str	r1, [sp, #52]	; 0x34
 8005948:	f7ff ff1b 	bl	8005782 <__exponent>
 800594c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800594e:	4682      	mov	sl, r0
 8005950:	1813      	adds	r3, r2, r0
 8005952:	2a01      	cmp	r2, #1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	dc02      	bgt.n	800595e <_printf_float+0x15e>
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	07d2      	lsls	r2, r2, #31
 800595c:	d501      	bpl.n	8005962 <_printf_float+0x162>
 800595e:	3301      	adds	r3, #1
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005966:	2b00      	cmp	r3, #0
 8005968:	d09b      	beq.n	80058a2 <_printf_float+0xa2>
 800596a:	232d      	movs	r3, #45	; 0x2d
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	e797      	b.n	80058a2 <_printf_float+0xa2>
 8005972:	2947      	cmp	r1, #71	; 0x47
 8005974:	d1bc      	bne.n	80058f0 <_printf_float+0xf0>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ba      	bne.n	80058f0 <_printf_float+0xf0>
 800597a:	2301      	movs	r3, #1
 800597c:	e7b7      	b.n	80058ee <_printf_float+0xee>
 800597e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005982:	d118      	bne.n	80059b6 <_printf_float+0x1b6>
 8005984:	2900      	cmp	r1, #0
 8005986:	6863      	ldr	r3, [r4, #4]
 8005988:	dd0b      	ble.n	80059a2 <_printf_float+0x1a2>
 800598a:	6121      	str	r1, [r4, #16]
 800598c:	b913      	cbnz	r3, 8005994 <_printf_float+0x194>
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	07d0      	lsls	r0, r2, #31
 8005992:	d502      	bpl.n	800599a <_printf_float+0x19a>
 8005994:	3301      	adds	r3, #1
 8005996:	440b      	add	r3, r1
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	f04f 0a00 	mov.w	sl, #0
 800599e:	65a1      	str	r1, [r4, #88]	; 0x58
 80059a0:	e7df      	b.n	8005962 <_printf_float+0x162>
 80059a2:	b913      	cbnz	r3, 80059aa <_printf_float+0x1aa>
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	07d2      	lsls	r2, r2, #31
 80059a8:	d501      	bpl.n	80059ae <_printf_float+0x1ae>
 80059aa:	3302      	adds	r3, #2
 80059ac:	e7f4      	b.n	8005998 <_printf_float+0x198>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e7f2      	b.n	8005998 <_printf_float+0x198>
 80059b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b8:	4299      	cmp	r1, r3
 80059ba:	db05      	blt.n	80059c8 <_printf_float+0x1c8>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	6121      	str	r1, [r4, #16]
 80059c0:	07d8      	lsls	r0, r3, #31
 80059c2:	d5ea      	bpl.n	800599a <_printf_float+0x19a>
 80059c4:	1c4b      	adds	r3, r1, #1
 80059c6:	e7e7      	b.n	8005998 <_printf_float+0x198>
 80059c8:	2900      	cmp	r1, #0
 80059ca:	bfcc      	ite	gt
 80059cc:	2201      	movgt	r2, #1
 80059ce:	f1c1 0202 	rsble	r2, r1, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	e7e0      	b.n	8005998 <_printf_float+0x198>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	055a      	lsls	r2, r3, #21
 80059da:	d407      	bmi.n	80059ec <_printf_float+0x1ec>
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	4642      	mov	r2, r8
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	d12b      	bne.n	8005a42 <_printf_float+0x242>
 80059ea:	e764      	b.n	80058b6 <_printf_float+0xb6>
 80059ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059f0:	f240 80dd 	bls.w	8005bae <_printf_float+0x3ae>
 80059f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059f8:	2200      	movs	r2, #0
 80059fa:	2300      	movs	r3, #0
 80059fc:	f7fb f840 	bl	8000a80 <__aeabi_dcmpeq>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d033      	beq.n	8005a6c <_printf_float+0x26c>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	4a35      	ldr	r2, [pc, #212]	; (8005ae0 <_printf_float+0x2e0>)
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f af51 	beq.w	80058b6 <_printf_float+0xb6>
 8005a14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	db02      	blt.n	8005a22 <_printf_float+0x222>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07d8      	lsls	r0, r3, #31
 8005a20:	d50f      	bpl.n	8005a42 <_printf_float+0x242>
 8005a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f43f af42 	beq.w	80058b6 <_printf_float+0xb6>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 091a 	add.w	r9, r4, #26
 8005a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	4543      	cmp	r3, r8
 8005a40:	dc09      	bgt.n	8005a56 <_printf_float+0x256>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	079b      	lsls	r3, r3, #30
 8005a46:	f100 8102 	bmi.w	8005c4e <_printf_float+0x44e>
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a4e:	4298      	cmp	r0, r3
 8005a50:	bfb8      	it	lt
 8005a52:	4618      	movlt	r0, r3
 8005a54:	e731      	b.n	80058ba <_printf_float+0xba>
 8005a56:	2301      	movs	r3, #1
 8005a58:	464a      	mov	r2, r9
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f af28 	beq.w	80058b6 <_printf_float+0xb6>
 8005a66:	f108 0801 	add.w	r8, r8, #1
 8005a6a:	e7e6      	b.n	8005a3a <_printf_float+0x23a>
 8005a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dc38      	bgt.n	8005ae4 <_printf_float+0x2e4>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4631      	mov	r1, r6
 8005a76:	4628      	mov	r0, r5
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <_printf_float+0x2e0>)
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f af1a 	beq.w	80058b6 <_printf_float+0xb6>
 8005a82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a86:	4313      	orrs	r3, r2
 8005a88:	d102      	bne.n	8005a90 <_printf_float+0x290>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	07d9      	lsls	r1, r3, #31
 8005a8e:	d5d8      	bpl.n	8005a42 <_printf_float+0x242>
 8005a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af0b 	beq.w	80058b6 <_printf_float+0xb6>
 8005aa0:	f04f 0900 	mov.w	r9, #0
 8005aa4:	f104 0a1a 	add.w	sl, r4, #26
 8005aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aaa:	425b      	negs	r3, r3
 8005aac:	454b      	cmp	r3, r9
 8005aae:	dc01      	bgt.n	8005ab4 <_printf_float+0x2b4>
 8005ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab2:	e794      	b.n	80059de <_printf_float+0x1de>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4652      	mov	r2, sl
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	f43f aef9 	beq.w	80058b6 <_printf_float+0xb6>
 8005ac4:	f109 0901 	add.w	r9, r9, #1
 8005ac8:	e7ee      	b.n	8005aa8 <_printf_float+0x2a8>
 8005aca:	bf00      	nop
 8005acc:	7fefffff 	.word	0x7fefffff
 8005ad0:	0800c594 	.word	0x0800c594
 8005ad4:	0800c598 	.word	0x0800c598
 8005ad8:	0800c5a0 	.word	0x0800c5a0
 8005adc:	0800c59c 	.word	0x0800c59c
 8005ae0:	0800c5a4 	.word	0x0800c5a4
 8005ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	bfa8      	it	ge
 8005aec:	461a      	movge	r2, r3
 8005aee:	2a00      	cmp	r2, #0
 8005af0:	4691      	mov	r9, r2
 8005af2:	dc37      	bgt.n	8005b64 <_printf_float+0x364>
 8005af4:	f04f 0b00 	mov.w	fp, #0
 8005af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005afc:	f104 021a 	add.w	r2, r4, #26
 8005b00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b04:	ebaa 0309 	sub.w	r3, sl, r9
 8005b08:	455b      	cmp	r3, fp
 8005b0a:	dc33      	bgt.n	8005b74 <_printf_float+0x374>
 8005b0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b10:	429a      	cmp	r2, r3
 8005b12:	db3b      	blt.n	8005b8c <_printf_float+0x38c>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	07da      	lsls	r2, r3, #31
 8005b18:	d438      	bmi.n	8005b8c <_printf_float+0x38c>
 8005b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b1e:	eba2 030a 	sub.w	r3, r2, sl
 8005b22:	eba2 0901 	sub.w	r9, r2, r1
 8005b26:	4599      	cmp	r9, r3
 8005b28:	bfa8      	it	ge
 8005b2a:	4699      	movge	r9, r3
 8005b2c:	f1b9 0f00 	cmp.w	r9, #0
 8005b30:	dc34      	bgt.n	8005b9c <_printf_float+0x39c>
 8005b32:	f04f 0800 	mov.w	r8, #0
 8005b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b3a:	f104 0a1a 	add.w	sl, r4, #26
 8005b3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	eba3 0309 	sub.w	r3, r3, r9
 8005b48:	4543      	cmp	r3, r8
 8005b4a:	f77f af7a 	ble.w	8005a42 <_printf_float+0x242>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f aeac 	beq.w	80058b6 <_printf_float+0xb6>
 8005b5e:	f108 0801 	add.w	r8, r8, #1
 8005b62:	e7ec      	b.n	8005b3e <_printf_float+0x33e>
 8005b64:	4613      	mov	r3, r2
 8005b66:	4631      	mov	r1, r6
 8005b68:	4642      	mov	r2, r8
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d1c0      	bne.n	8005af4 <_printf_float+0x2f4>
 8005b72:	e6a0      	b.n	80058b6 <_printf_float+0xb6>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f43f ae99 	beq.w	80058b6 <_printf_float+0xb6>
 8005b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b86:	f10b 0b01 	add.w	fp, fp, #1
 8005b8a:	e7b9      	b.n	8005b00 <_printf_float+0x300>
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1bf      	bne.n	8005b1a <_printf_float+0x31a>
 8005b9a:	e68c      	b.n	80058b6 <_printf_float+0xb6>
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	eb08 020a 	add.w	r2, r8, sl
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d1c2      	bne.n	8005b32 <_printf_float+0x332>
 8005bac:	e683      	b.n	80058b6 <_printf_float+0xb6>
 8005bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bb0:	2a01      	cmp	r2, #1
 8005bb2:	dc01      	bgt.n	8005bb8 <_printf_float+0x3b8>
 8005bb4:	07db      	lsls	r3, r3, #31
 8005bb6:	d537      	bpl.n	8005c28 <_printf_float+0x428>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4642      	mov	r2, r8
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f ae77 	beq.w	80058b6 <_printf_float+0xb6>
 8005bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f ae6f 	beq.w	80058b6 <_printf_float+0xb6>
 8005bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	f7fa ff4e 	bl	8000a80 <__aeabi_dcmpeq>
 8005be4:	b9d8      	cbnz	r0, 8005c1e <_printf_float+0x41e>
 8005be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005be8:	f108 0201 	add.w	r2, r8, #1
 8005bec:	3b01      	subs	r3, #1
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d10e      	bne.n	8005c16 <_printf_float+0x416>
 8005bf8:	e65d      	b.n	80058b6 <_printf_float+0xb6>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	464a      	mov	r2, r9
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f ae56 	beq.w	80058b6 <_printf_float+0xb6>
 8005c0a:	f108 0801 	add.w	r8, r8, #1
 8005c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c10:	3b01      	subs	r3, #1
 8005c12:	4543      	cmp	r3, r8
 8005c14:	dcf1      	bgt.n	8005bfa <_printf_float+0x3fa>
 8005c16:	4653      	mov	r3, sl
 8005c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c1c:	e6e0      	b.n	80059e0 <_printf_float+0x1e0>
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	f104 091a 	add.w	r9, r4, #26
 8005c26:	e7f2      	b.n	8005c0e <_printf_float+0x40e>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	e7df      	b.n	8005bee <_printf_float+0x3ee>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	464a      	mov	r2, r9
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f ae3c 	beq.w	80058b6 <_printf_float+0xb6>
 8005c3e:	f108 0801 	add.w	r8, r8, #1
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c46:	1a5b      	subs	r3, r3, r1
 8005c48:	4543      	cmp	r3, r8
 8005c4a:	dcf0      	bgt.n	8005c2e <_printf_float+0x42e>
 8005c4c:	e6fd      	b.n	8005a4a <_printf_float+0x24a>
 8005c4e:	f04f 0800 	mov.w	r8, #0
 8005c52:	f104 0919 	add.w	r9, r4, #25
 8005c56:	e7f4      	b.n	8005c42 <_printf_float+0x442>

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	4699      	mov	r9, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	4607      	mov	r7, r0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bfb8      	it	lt
 8005c6a:	4613      	movlt	r3, r2
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c72:	460c      	mov	r4, r1
 8005c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c78:	b10a      	cbz	r2, 8005c7e <_printf_common+0x26>
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	0699      	lsls	r1, r3, #26
 8005c82:	bf42      	ittt	mi
 8005c84:	6833      	ldrmi	r3, [r6, #0]
 8005c86:	3302      	addmi	r3, #2
 8005c88:	6033      	strmi	r3, [r6, #0]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	f015 0506 	ands.w	r5, r5, #6
 8005c90:	d106      	bne.n	8005ca0 <_printf_common+0x48>
 8005c92:	f104 0a19 	add.w	sl, r4, #25
 8005c96:	68e3      	ldr	r3, [r4, #12]
 8005c98:	6832      	ldr	r2, [r6, #0]
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	42ab      	cmp	r3, r5
 8005c9e:	dc28      	bgt.n	8005cf2 <_printf_common+0x9a>
 8005ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ca4:	1e13      	subs	r3, r2, #0
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	0692      	lsls	r2, r2, #26
 8005cae:	d42d      	bmi.n	8005d0c <_printf_common+0xb4>
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d020      	beq.n	8005d00 <_printf_common+0xa8>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	68e5      	ldr	r5, [r4, #12]
 8005cc2:	f003 0306 	and.w	r3, r3, #6
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	bf18      	it	ne
 8005cca:	2500      	movne	r5, #0
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	f04f 0600 	mov.w	r6, #0
 8005cd2:	68a3      	ldr	r3, [r4, #8]
 8005cd4:	bf08      	it	eq
 8005cd6:	1aad      	subeq	r5, r5, r2
 8005cd8:	6922      	ldr	r2, [r4, #16]
 8005cda:	bf08      	it	eq
 8005cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	bfc4      	itt	gt
 8005ce4:	1a9b      	subgt	r3, r3, r2
 8005ce6:	18ed      	addgt	r5, r5, r3
 8005ce8:	341a      	adds	r4, #26
 8005cea:	42b5      	cmp	r5, r6
 8005cec:	d11a      	bne.n	8005d24 <_printf_common+0xcc>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e008      	b.n	8005d04 <_printf_common+0xac>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c0      	blx	r8
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_printf_common+0xb0>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d08:	3501      	adds	r5, #1
 8005d0a:	e7c4      	b.n	8005c96 <_printf_common+0x3e>
 8005d0c:	2030      	movs	r0, #48	; 0x30
 8005d0e:	18e1      	adds	r1, r4, r3
 8005d10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d1a:	4422      	add	r2, r4
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d22:	e7c5      	b.n	8005cb0 <_printf_common+0x58>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4622      	mov	r2, r4
 8005d28:	4649      	mov	r1, r9
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	47c0      	blx	r8
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d0e6      	beq.n	8005d00 <_printf_common+0xa8>
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7d9      	b.n	8005cea <_printf_common+0x92>
	...

08005d38 <_printf_i>:
 8005d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	7e27      	ldrb	r7, [r4, #24]
 8005d40:	4691      	mov	r9, r2
 8005d42:	2f78      	cmp	r7, #120	; 0x78
 8005d44:	4680      	mov	r8, r0
 8005d46:	469a      	mov	sl, r3
 8005d48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d4e:	d807      	bhi.n	8005d60 <_printf_i+0x28>
 8005d50:	2f62      	cmp	r7, #98	; 0x62
 8005d52:	d80a      	bhi.n	8005d6a <_printf_i+0x32>
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	f000 80d9 	beq.w	8005f0c <_printf_i+0x1d4>
 8005d5a:	2f58      	cmp	r7, #88	; 0x58
 8005d5c:	f000 80a4 	beq.w	8005ea8 <_printf_i+0x170>
 8005d60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d68:	e03a      	b.n	8005de0 <_printf_i+0xa8>
 8005d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d6e:	2b15      	cmp	r3, #21
 8005d70:	d8f6      	bhi.n	8005d60 <_printf_i+0x28>
 8005d72:	a001      	add	r0, pc, #4	; (adr r0, 8005d78 <_printf_i+0x40>)
 8005d74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005d61 	.word	0x08005d61
 8005d84:	08005d61 	.word	0x08005d61
 8005d88:	08005d61 	.word	0x08005d61
 8005d8c:	08005d61 	.word	0x08005d61
 8005d90:	08005de5 	.word	0x08005de5
 8005d94:	08005d61 	.word	0x08005d61
 8005d98:	08005d61 	.word	0x08005d61
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005ef3 	.word	0x08005ef3
 8005da8:	08005e15 	.word	0x08005e15
 8005dac:	08005ed5 	.word	0x08005ed5
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005f15 	.word	0x08005f15
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005edd 	.word	0x08005edd
 8005dd0:	680b      	ldr	r3, [r1, #0]
 8005dd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dd6:	1d1a      	adds	r2, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	600a      	str	r2, [r1, #0]
 8005ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0a4      	b.n	8005f2e <_printf_i+0x1f6>
 8005de4:	6825      	ldr	r5, [r4, #0]
 8005de6:	6808      	ldr	r0, [r1, #0]
 8005de8:	062e      	lsls	r6, r5, #24
 8005dea:	f100 0304 	add.w	r3, r0, #4
 8005dee:	d50a      	bpl.n	8005e06 <_printf_i+0xce>
 8005df0:	6805      	ldr	r5, [r0, #0]
 8005df2:	600b      	str	r3, [r1, #0]
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	da03      	bge.n	8005e00 <_printf_i+0xc8>
 8005df8:	232d      	movs	r3, #45	; 0x2d
 8005dfa:	426d      	negs	r5, r5
 8005dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e00:	230a      	movs	r3, #10
 8005e02:	485e      	ldr	r0, [pc, #376]	; (8005f7c <_printf_i+0x244>)
 8005e04:	e019      	b.n	8005e3a <_printf_i+0x102>
 8005e06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e0a:	6805      	ldr	r5, [r0, #0]
 8005e0c:	600b      	str	r3, [r1, #0]
 8005e0e:	bf18      	it	ne
 8005e10:	b22d      	sxthne	r5, r5
 8005e12:	e7ef      	b.n	8005df4 <_printf_i+0xbc>
 8005e14:	680b      	ldr	r3, [r1, #0]
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	1d18      	adds	r0, r3, #4
 8005e1a:	6008      	str	r0, [r1, #0]
 8005e1c:	0628      	lsls	r0, r5, #24
 8005e1e:	d501      	bpl.n	8005e24 <_printf_i+0xec>
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	e002      	b.n	8005e2a <_printf_i+0xf2>
 8005e24:	0669      	lsls	r1, r5, #25
 8005e26:	d5fb      	bpl.n	8005e20 <_printf_i+0xe8>
 8005e28:	881d      	ldrh	r5, [r3, #0]
 8005e2a:	2f6f      	cmp	r7, #111	; 0x6f
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2308      	moveq	r3, #8
 8005e30:	230a      	movne	r3, #10
 8005e32:	4852      	ldr	r0, [pc, #328]	; (8005f7c <_printf_i+0x244>)
 8005e34:	2100      	movs	r1, #0
 8005e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e3a:	6866      	ldr	r6, [r4, #4]
 8005e3c:	2e00      	cmp	r6, #0
 8005e3e:	bfa8      	it	ge
 8005e40:	6821      	ldrge	r1, [r4, #0]
 8005e42:	60a6      	str	r6, [r4, #8]
 8005e44:	bfa4      	itt	ge
 8005e46:	f021 0104 	bicge.w	r1, r1, #4
 8005e4a:	6021      	strge	r1, [r4, #0]
 8005e4c:	b90d      	cbnz	r5, 8005e52 <_printf_i+0x11a>
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	d04d      	beq.n	8005eee <_printf_i+0x1b6>
 8005e52:	4616      	mov	r6, r2
 8005e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e58:	fb03 5711 	mls	r7, r3, r1, r5
 8005e5c:	5dc7      	ldrb	r7, [r0, r7]
 8005e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e62:	462f      	mov	r7, r5
 8005e64:	42bb      	cmp	r3, r7
 8005e66:	460d      	mov	r5, r1
 8005e68:	d9f4      	bls.n	8005e54 <_printf_i+0x11c>
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d10b      	bne.n	8005e86 <_printf_i+0x14e>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	07df      	lsls	r7, r3, #31
 8005e72:	d508      	bpl.n	8005e86 <_printf_i+0x14e>
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	6861      	ldr	r1, [r4, #4]
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	bfde      	ittt	le
 8005e7c:	2330      	movle	r3, #48	; 0x30
 8005e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e86:	1b92      	subs	r2, r2, r6
 8005e88:	6122      	str	r2, [r4, #16]
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f8cd a000 	str.w	sl, [sp]
 8005e94:	aa03      	add	r2, sp, #12
 8005e96:	f7ff fedf 	bl	8005c58 <_printf_common>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d14c      	bne.n	8005f38 <_printf_i+0x200>
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	b004      	add	sp, #16
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	4834      	ldr	r0, [pc, #208]	; (8005f7c <_printf_i+0x244>)
 8005eaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eae:	680e      	ldr	r6, [r1, #0]
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005eb6:	061f      	lsls	r7, r3, #24
 8005eb8:	600e      	str	r6, [r1, #0]
 8005eba:	d514      	bpl.n	8005ee6 <_printf_i+0x1ae>
 8005ebc:	07d9      	lsls	r1, r3, #31
 8005ebe:	bf44      	itt	mi
 8005ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ec4:	6023      	strmi	r3, [r4, #0]
 8005ec6:	b91d      	cbnz	r5, 8005ed0 <_printf_i+0x198>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	f023 0320 	bic.w	r3, r3, #32
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	e7af      	b.n	8005e34 <_printf_i+0xfc>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f043 0320 	orr.w	r3, r3, #32
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	2378      	movs	r3, #120	; 0x78
 8005ede:	4828      	ldr	r0, [pc, #160]	; (8005f80 <_printf_i+0x248>)
 8005ee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ee4:	e7e3      	b.n	8005eae <_printf_i+0x176>
 8005ee6:	065e      	lsls	r6, r3, #25
 8005ee8:	bf48      	it	mi
 8005eea:	b2ad      	uxthmi	r5, r5
 8005eec:	e7e6      	b.n	8005ebc <_printf_i+0x184>
 8005eee:	4616      	mov	r6, r2
 8005ef0:	e7bb      	b.n	8005e6a <_printf_i+0x132>
 8005ef2:	680b      	ldr	r3, [r1, #0]
 8005ef4:	6826      	ldr	r6, [r4, #0]
 8005ef6:	1d1d      	adds	r5, r3, #4
 8005ef8:	6960      	ldr	r0, [r4, #20]
 8005efa:	600d      	str	r5, [r1, #0]
 8005efc:	0635      	lsls	r5, r6, #24
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	d501      	bpl.n	8005f06 <_printf_i+0x1ce>
 8005f02:	6018      	str	r0, [r3, #0]
 8005f04:	e002      	b.n	8005f0c <_printf_i+0x1d4>
 8005f06:	0671      	lsls	r1, r6, #25
 8005f08:	d5fb      	bpl.n	8005f02 <_printf_i+0x1ca>
 8005f0a:	8018      	strh	r0, [r3, #0]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4616      	mov	r6, r2
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	e7ba      	b.n	8005e8a <_printf_i+0x152>
 8005f14:	680b      	ldr	r3, [r1, #0]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	600a      	str	r2, [r1, #0]
 8005f1a:	681e      	ldr	r6, [r3, #0]
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	6862      	ldr	r2, [r4, #4]
 8005f22:	f000 ff0b 	bl	8006d3c <memchr>
 8005f26:	b108      	cbz	r0, 8005f2c <_printf_i+0x1f4>
 8005f28:	1b80      	subs	r0, r0, r6
 8005f2a:	6060      	str	r0, [r4, #4]
 8005f2c:	6863      	ldr	r3, [r4, #4]
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	2300      	movs	r3, #0
 8005f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f36:	e7a8      	b.n	8005e8a <_printf_i+0x152>
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	47d0      	blx	sl
 8005f42:	3001      	adds	r0, #1
 8005f44:	d0ab      	beq.n	8005e9e <_printf_i+0x166>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	079b      	lsls	r3, r3, #30
 8005f4a:	d413      	bmi.n	8005f74 <_printf_i+0x23c>
 8005f4c:	68e0      	ldr	r0, [r4, #12]
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	4298      	cmp	r0, r3
 8005f52:	bfb8      	it	lt
 8005f54:	4618      	movlt	r0, r3
 8005f56:	e7a4      	b.n	8005ea2 <_printf_i+0x16a>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4640      	mov	r0, r8
 8005f60:	47d0      	blx	sl
 8005f62:	3001      	adds	r0, #1
 8005f64:	d09b      	beq.n	8005e9e <_printf_i+0x166>
 8005f66:	3501      	adds	r5, #1
 8005f68:	68e3      	ldr	r3, [r4, #12]
 8005f6a:	9903      	ldr	r1, [sp, #12]
 8005f6c:	1a5b      	subs	r3, r3, r1
 8005f6e:	42ab      	cmp	r3, r5
 8005f70:	dcf2      	bgt.n	8005f58 <_printf_i+0x220>
 8005f72:	e7eb      	b.n	8005f4c <_printf_i+0x214>
 8005f74:	2500      	movs	r5, #0
 8005f76:	f104 0619 	add.w	r6, r4, #25
 8005f7a:	e7f5      	b.n	8005f68 <_printf_i+0x230>
 8005f7c:	0800c5a6 	.word	0x0800c5a6
 8005f80:	0800c5b7 	.word	0x0800c5b7

08005f84 <sniprintf>:
 8005f84:	b40c      	push	{r2, r3}
 8005f86:	b530      	push	{r4, r5, lr}
 8005f88:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <sniprintf+0x64>)
 8005f8a:	1e0c      	subs	r4, r1, #0
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	b09d      	sub	sp, #116	; 0x74
 8005f90:	da08      	bge.n	8005fa4 <sniprintf+0x20>
 8005f92:	238b      	movs	r3, #139	; 0x8b
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	b01d      	add	sp, #116	; 0x74
 8005f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fa0:	b002      	add	sp, #8
 8005fa2:	4770      	bx	lr
 8005fa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fac:	bf0c      	ite	eq
 8005fae:	4623      	moveq	r3, r4
 8005fb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9006      	str	r0, [sp, #24]
 8005fc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	ab21      	add	r3, sp, #132	; 0x84
 8005fc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fca:	a902      	add	r1, sp, #8
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	f001 fb63 	bl	8007698 <_svfiprintf_r>
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	bfbc      	itt	lt
 8005fd6:	238b      	movlt	r3, #139	; 0x8b
 8005fd8:	602b      	strlt	r3, [r5, #0]
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	d0dd      	beq.n	8005f9a <sniprintf+0x16>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e7d9      	b.n	8005f9a <sniprintf+0x16>
 8005fe6:	bf00      	nop
 8005fe8:	2000004c 	.word	0x2000004c

08005fec <siprintf>:
 8005fec:	b40e      	push	{r1, r2, r3}
 8005fee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ff2:	b500      	push	{lr}
 8005ff4:	b09c      	sub	sp, #112	; 0x70
 8005ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	9006      	str	r0, [sp, #24]
 8005ffc:	9107      	str	r1, [sp, #28]
 8005ffe:	9104      	str	r1, [sp, #16]
 8006000:	4808      	ldr	r0, [pc, #32]	; (8006024 <siprintf+0x38>)
 8006002:	4909      	ldr	r1, [pc, #36]	; (8006028 <siprintf+0x3c>)
 8006004:	f853 2b04 	ldr.w	r2, [r3], #4
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	a902      	add	r1, sp, #8
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	f001 fb42 	bl	8007698 <_svfiprintf_r>
 8006014:	2200      	movs	r2, #0
 8006016:	9b02      	ldr	r3, [sp, #8]
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	b01c      	add	sp, #112	; 0x70
 800601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr
 8006024:	2000004c 	.word	0x2000004c
 8006028:	ffff0208 	.word	0xffff0208

0800602c <quorem>:
 800602c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	6903      	ldr	r3, [r0, #16]
 8006032:	690c      	ldr	r4, [r1, #16]
 8006034:	4607      	mov	r7, r0
 8006036:	42a3      	cmp	r3, r4
 8006038:	f2c0 8083 	blt.w	8006142 <quorem+0x116>
 800603c:	3c01      	subs	r4, #1
 800603e:	f100 0514 	add.w	r5, r0, #20
 8006042:	f101 0814 	add.w	r8, r1, #20
 8006046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006054:	3301      	adds	r3, #1
 8006056:	429a      	cmp	r2, r3
 8006058:	fbb2 f6f3 	udiv	r6, r2, r3
 800605c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006064:	d332      	bcc.n	80060cc <quorem+0xa0>
 8006066:	f04f 0e00 	mov.w	lr, #0
 800606a:	4640      	mov	r0, r8
 800606c:	46ac      	mov	ip, r5
 800606e:	46f2      	mov	sl, lr
 8006070:	f850 2b04 	ldr.w	r2, [r0], #4
 8006074:	b293      	uxth	r3, r2
 8006076:	fb06 e303 	mla	r3, r6, r3, lr
 800607a:	0c12      	lsrs	r2, r2, #16
 800607c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006080:	fb06 e202 	mla	r2, r6, r2, lr
 8006084:	b29b      	uxth	r3, r3
 8006086:	ebaa 0303 	sub.w	r3, sl, r3
 800608a:	f8dc a000 	ldr.w	sl, [ip]
 800608e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006092:	fa1f fa8a 	uxth.w	sl, sl
 8006096:	4453      	add	r3, sl
 8006098:	fa1f fa82 	uxth.w	sl, r2
 800609c:	f8dc 2000 	ldr.w	r2, [ip]
 80060a0:	4581      	cmp	r9, r0
 80060a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060b4:	f84c 3b04 	str.w	r3, [ip], #4
 80060b8:	d2da      	bcs.n	8006070 <quorem+0x44>
 80060ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80060be:	b92b      	cbnz	r3, 80060cc <quorem+0xa0>
 80060c0:	9b01      	ldr	r3, [sp, #4]
 80060c2:	3b04      	subs	r3, #4
 80060c4:	429d      	cmp	r5, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	d32f      	bcc.n	800612a <quorem+0xfe>
 80060ca:	613c      	str	r4, [r7, #16]
 80060cc:	4638      	mov	r0, r7
 80060ce:	f001 f8cb 	bl	8007268 <__mcmp>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	db25      	blt.n	8006122 <quorem+0xf6>
 80060d6:	4628      	mov	r0, r5
 80060d8:	f04f 0c00 	mov.w	ip, #0
 80060dc:	3601      	adds	r6, #1
 80060de:	f858 1b04 	ldr.w	r1, [r8], #4
 80060e2:	f8d0 e000 	ldr.w	lr, [r0]
 80060e6:	b28b      	uxth	r3, r1
 80060e8:	ebac 0303 	sub.w	r3, ip, r3
 80060ec:	fa1f f28e 	uxth.w	r2, lr
 80060f0:	4413      	add	r3, r2
 80060f2:	0c0a      	lsrs	r2, r1, #16
 80060f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006102:	45c1      	cmp	r9, r8
 8006104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006108:	f840 3b04 	str.w	r3, [r0], #4
 800610c:	d2e7      	bcs.n	80060de <quorem+0xb2>
 800610e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006116:	b922      	cbnz	r2, 8006122 <quorem+0xf6>
 8006118:	3b04      	subs	r3, #4
 800611a:	429d      	cmp	r5, r3
 800611c:	461a      	mov	r2, r3
 800611e:	d30a      	bcc.n	8006136 <quorem+0x10a>
 8006120:	613c      	str	r4, [r7, #16]
 8006122:	4630      	mov	r0, r6
 8006124:	b003      	add	sp, #12
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	3b04      	subs	r3, #4
 800612e:	2a00      	cmp	r2, #0
 8006130:	d1cb      	bne.n	80060ca <quorem+0x9e>
 8006132:	3c01      	subs	r4, #1
 8006134:	e7c6      	b.n	80060c4 <quorem+0x98>
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	3b04      	subs	r3, #4
 800613a:	2a00      	cmp	r2, #0
 800613c:	d1f0      	bne.n	8006120 <quorem+0xf4>
 800613e:	3c01      	subs	r4, #1
 8006140:	e7eb      	b.n	800611a <quorem+0xee>
 8006142:	2000      	movs	r0, #0
 8006144:	e7ee      	b.n	8006124 <quorem+0xf8>
	...

08006148 <_dtoa_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4616      	mov	r6, r2
 800614e:	461f      	mov	r7, r3
 8006150:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006152:	b099      	sub	sp, #100	; 0x64
 8006154:	4605      	mov	r5, r0
 8006156:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800615a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800615e:	b974      	cbnz	r4, 800617e <_dtoa_r+0x36>
 8006160:	2010      	movs	r0, #16
 8006162:	f000 fde3 	bl	8006d2c <malloc>
 8006166:	4602      	mov	r2, r0
 8006168:	6268      	str	r0, [r5, #36]	; 0x24
 800616a:	b920      	cbnz	r0, 8006176 <_dtoa_r+0x2e>
 800616c:	21ea      	movs	r1, #234	; 0xea
 800616e:	4bae      	ldr	r3, [pc, #696]	; (8006428 <_dtoa_r+0x2e0>)
 8006170:	48ae      	ldr	r0, [pc, #696]	; (800642c <_dtoa_r+0x2e4>)
 8006172:	f001 fba1 	bl	80078b8 <__assert_func>
 8006176:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800617a:	6004      	str	r4, [r0, #0]
 800617c:	60c4      	str	r4, [r0, #12]
 800617e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006180:	6819      	ldr	r1, [r3, #0]
 8006182:	b151      	cbz	r1, 800619a <_dtoa_r+0x52>
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	2301      	movs	r3, #1
 8006188:	4093      	lsls	r3, r2
 800618a:	604a      	str	r2, [r1, #4]
 800618c:	608b      	str	r3, [r1, #8]
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fe30 	bl	8006df4 <_Bfree>
 8006194:	2200      	movs	r2, #0
 8006196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	1e3b      	subs	r3, r7, #0
 800619c:	bfaf      	iteee	ge
 800619e:	2300      	movge	r3, #0
 80061a0:	2201      	movlt	r2, #1
 80061a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061a6:	9305      	strlt	r3, [sp, #20]
 80061a8:	bfa8      	it	ge
 80061aa:	f8c8 3000 	strge.w	r3, [r8]
 80061ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80061b2:	4b9f      	ldr	r3, [pc, #636]	; (8006430 <_dtoa_r+0x2e8>)
 80061b4:	bfb8      	it	lt
 80061b6:	f8c8 2000 	strlt.w	r2, [r8]
 80061ba:	ea33 0309 	bics.w	r3, r3, r9
 80061be:	d119      	bne.n	80061f4 <_dtoa_r+0xac>
 80061c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80061c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061cc:	4333      	orrs	r3, r6
 80061ce:	f000 8580 	beq.w	8006cd2 <_dtoa_r+0xb8a>
 80061d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061d4:	b953      	cbnz	r3, 80061ec <_dtoa_r+0xa4>
 80061d6:	4b97      	ldr	r3, [pc, #604]	; (8006434 <_dtoa_r+0x2ec>)
 80061d8:	e022      	b.n	8006220 <_dtoa_r+0xd8>
 80061da:	4b97      	ldr	r3, [pc, #604]	; (8006438 <_dtoa_r+0x2f0>)
 80061dc:	9308      	str	r3, [sp, #32]
 80061de:	3308      	adds	r3, #8
 80061e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	9808      	ldr	r0, [sp, #32]
 80061e6:	b019      	add	sp, #100	; 0x64
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	4b91      	ldr	r3, [pc, #580]	; (8006434 <_dtoa_r+0x2ec>)
 80061ee:	9308      	str	r3, [sp, #32]
 80061f0:	3303      	adds	r3, #3
 80061f2:	e7f5      	b.n	80061e0 <_dtoa_r+0x98>
 80061f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006200:	2200      	movs	r2, #0
 8006202:	2300      	movs	r3, #0
 8006204:	f7fa fc3c 	bl	8000a80 <__aeabi_dcmpeq>
 8006208:	4680      	mov	r8, r0
 800620a:	b158      	cbz	r0, 8006224 <_dtoa_r+0xdc>
 800620c:	2301      	movs	r3, #1
 800620e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8559 	beq.w	8006ccc <_dtoa_r+0xb84>
 800621a:	4888      	ldr	r0, [pc, #544]	; (800643c <_dtoa_r+0x2f4>)
 800621c:	6018      	str	r0, [r3, #0]
 800621e:	1e43      	subs	r3, r0, #1
 8006220:	9308      	str	r3, [sp, #32]
 8006222:	e7df      	b.n	80061e4 <_dtoa_r+0x9c>
 8006224:	ab16      	add	r3, sp, #88	; 0x58
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	ab17      	add	r3, sp, #92	; 0x5c
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4628      	mov	r0, r5
 800622e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006232:	f001 f8c5 	bl	80073c0 <__d2b>
 8006236:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800623a:	4682      	mov	sl, r0
 800623c:	2c00      	cmp	r4, #0
 800623e:	d07e      	beq.n	800633e <_dtoa_r+0x1f6>
 8006240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006246:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800624a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800624e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006252:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006256:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800625a:	2200      	movs	r2, #0
 800625c:	4b78      	ldr	r3, [pc, #480]	; (8006440 <_dtoa_r+0x2f8>)
 800625e:	f7f9 ffef 	bl	8000240 <__aeabi_dsub>
 8006262:	a36b      	add	r3, pc, #428	; (adr r3, 8006410 <_dtoa_r+0x2c8>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f9a2 	bl	80005b0 <__aeabi_dmul>
 800626c:	a36a      	add	r3, pc, #424	; (adr r3, 8006418 <_dtoa_r+0x2d0>)
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f7f9 ffe7 	bl	8000244 <__adddf3>
 8006276:	4606      	mov	r6, r0
 8006278:	4620      	mov	r0, r4
 800627a:	460f      	mov	r7, r1
 800627c:	f7fa f92e 	bl	80004dc <__aeabi_i2d>
 8006280:	a367      	add	r3, pc, #412	; (adr r3, 8006420 <_dtoa_r+0x2d8>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa f993 	bl	80005b0 <__aeabi_dmul>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7f9 ffd7 	bl	8000244 <__adddf3>
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	f7fa fc39 	bl	8000b10 <__aeabi_d2iz>
 800629e:	2200      	movs	r2, #0
 80062a0:	4681      	mov	r9, r0
 80062a2:	2300      	movs	r3, #0
 80062a4:	4630      	mov	r0, r6
 80062a6:	4639      	mov	r1, r7
 80062a8:	f7fa fbf4 	bl	8000a94 <__aeabi_dcmplt>
 80062ac:	b148      	cbz	r0, 80062c2 <_dtoa_r+0x17a>
 80062ae:	4648      	mov	r0, r9
 80062b0:	f7fa f914 	bl	80004dc <__aeabi_i2d>
 80062b4:	4632      	mov	r2, r6
 80062b6:	463b      	mov	r3, r7
 80062b8:	f7fa fbe2 	bl	8000a80 <__aeabi_dcmpeq>
 80062bc:	b908      	cbnz	r0, 80062c2 <_dtoa_r+0x17a>
 80062be:	f109 39ff 	add.w	r9, r9, #4294967295
 80062c2:	f1b9 0f16 	cmp.w	r9, #22
 80062c6:	d857      	bhi.n	8006378 <_dtoa_r+0x230>
 80062c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062cc:	4b5d      	ldr	r3, [pc, #372]	; (8006444 <_dtoa_r+0x2fc>)
 80062ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f7fa fbdd 	bl	8000a94 <__aeabi_dcmplt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d04e      	beq.n	800637c <_dtoa_r+0x234>
 80062de:	2300      	movs	r3, #0
 80062e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80062e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062e8:	1b1c      	subs	r4, r3, r4
 80062ea:	1e63      	subs	r3, r4, #1
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	bf49      	itett	mi
 80062f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80062f4:	2300      	movpl	r3, #0
 80062f6:	9306      	strmi	r3, [sp, #24]
 80062f8:	2300      	movmi	r3, #0
 80062fa:	bf54      	ite	pl
 80062fc:	9306      	strpl	r3, [sp, #24]
 80062fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006300:	f1b9 0f00 	cmp.w	r9, #0
 8006304:	db3c      	blt.n	8006380 <_dtoa_r+0x238>
 8006306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006308:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800630c:	444b      	add	r3, r9
 800630e:	9309      	str	r3, [sp, #36]	; 0x24
 8006310:	2300      	movs	r3, #0
 8006312:	930a      	str	r3, [sp, #40]	; 0x28
 8006314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006316:	2b09      	cmp	r3, #9
 8006318:	d86c      	bhi.n	80063f4 <_dtoa_r+0x2ac>
 800631a:	2b05      	cmp	r3, #5
 800631c:	bfc4      	itt	gt
 800631e:	3b04      	subgt	r3, #4
 8006320:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006324:	bfc8      	it	gt
 8006326:	2400      	movgt	r4, #0
 8006328:	f1a3 0302 	sub.w	r3, r3, #2
 800632c:	bfd8      	it	le
 800632e:	2401      	movle	r4, #1
 8006330:	2b03      	cmp	r3, #3
 8006332:	f200 808b 	bhi.w	800644c <_dtoa_r+0x304>
 8006336:	e8df f003 	tbb	[pc, r3]
 800633a:	4f2d      	.short	0x4f2d
 800633c:	5b4d      	.short	0x5b4d
 800633e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006342:	441c      	add	r4, r3
 8006344:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006348:	2b20      	cmp	r3, #32
 800634a:	bfc3      	ittte	gt
 800634c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006350:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006354:	fa09 f303 	lslgt.w	r3, r9, r3
 8006358:	f1c3 0320 	rsble	r3, r3, #32
 800635c:	bfc6      	itte	gt
 800635e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006362:	4318      	orrgt	r0, r3
 8006364:	fa06 f003 	lslle.w	r0, r6, r3
 8006368:	f7fa f8a8 	bl	80004bc <__aeabi_ui2d>
 800636c:	2301      	movs	r3, #1
 800636e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006372:	3c01      	subs	r4, #1
 8006374:	9313      	str	r3, [sp, #76]	; 0x4c
 8006376:	e770      	b.n	800625a <_dtoa_r+0x112>
 8006378:	2301      	movs	r3, #1
 800637a:	e7b3      	b.n	80062e4 <_dtoa_r+0x19c>
 800637c:	900f      	str	r0, [sp, #60]	; 0x3c
 800637e:	e7b2      	b.n	80062e6 <_dtoa_r+0x19e>
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	eba3 0309 	sub.w	r3, r3, r9
 8006386:	9306      	str	r3, [sp, #24]
 8006388:	f1c9 0300 	rsb	r3, r9, #0
 800638c:	930a      	str	r3, [sp, #40]	; 0x28
 800638e:	2300      	movs	r3, #0
 8006390:	930e      	str	r3, [sp, #56]	; 0x38
 8006392:	e7bf      	b.n	8006314 <_dtoa_r+0x1cc>
 8006394:	2300      	movs	r3, #0
 8006396:	930b      	str	r3, [sp, #44]	; 0x2c
 8006398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800639a:	2b00      	cmp	r3, #0
 800639c:	dc59      	bgt.n	8006452 <_dtoa_r+0x30a>
 800639e:	f04f 0b01 	mov.w	fp, #1
 80063a2:	465b      	mov	r3, fp
 80063a4:	f8cd b008 	str.w	fp, [sp, #8]
 80063a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80063ac:	2200      	movs	r2, #0
 80063ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80063b0:	6042      	str	r2, [r0, #4]
 80063b2:	2204      	movs	r2, #4
 80063b4:	f102 0614 	add.w	r6, r2, #20
 80063b8:	429e      	cmp	r6, r3
 80063ba:	6841      	ldr	r1, [r0, #4]
 80063bc:	d94f      	bls.n	800645e <_dtoa_r+0x316>
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 fcd8 	bl	8006d74 <_Balloc>
 80063c4:	9008      	str	r0, [sp, #32]
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d14d      	bne.n	8006466 <_dtoa_r+0x31e>
 80063ca:	4602      	mov	r2, r0
 80063cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063d0:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <_dtoa_r+0x300>)
 80063d2:	e6cd      	b.n	8006170 <_dtoa_r+0x28>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e7de      	b.n	8006396 <_dtoa_r+0x24e>
 80063d8:	2300      	movs	r3, #0
 80063da:	930b      	str	r3, [sp, #44]	; 0x2c
 80063dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063de:	eb09 0b03 	add.w	fp, r9, r3
 80063e2:	f10b 0301 	add.w	r3, fp, #1
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	9302      	str	r3, [sp, #8]
 80063ea:	bfb8      	it	lt
 80063ec:	2301      	movlt	r3, #1
 80063ee:	e7dd      	b.n	80063ac <_dtoa_r+0x264>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e7f2      	b.n	80063da <_dtoa_r+0x292>
 80063f4:	2401      	movs	r4, #1
 80063f6:	2300      	movs	r3, #0
 80063f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80063fa:	9322      	str	r3, [sp, #136]	; 0x88
 80063fc:	f04f 3bff 	mov.w	fp, #4294967295
 8006400:	2200      	movs	r2, #0
 8006402:	2312      	movs	r3, #18
 8006404:	f8cd b008 	str.w	fp, [sp, #8]
 8006408:	9223      	str	r2, [sp, #140]	; 0x8c
 800640a:	e7cf      	b.n	80063ac <_dtoa_r+0x264>
 800640c:	f3af 8000 	nop.w
 8006410:	636f4361 	.word	0x636f4361
 8006414:	3fd287a7 	.word	0x3fd287a7
 8006418:	8b60c8b3 	.word	0x8b60c8b3
 800641c:	3fc68a28 	.word	0x3fc68a28
 8006420:	509f79fb 	.word	0x509f79fb
 8006424:	3fd34413 	.word	0x3fd34413
 8006428:	0800c5d5 	.word	0x0800c5d5
 800642c:	0800c5ec 	.word	0x0800c5ec
 8006430:	7ff00000 	.word	0x7ff00000
 8006434:	0800c5d1 	.word	0x0800c5d1
 8006438:	0800c5c8 	.word	0x0800c5c8
 800643c:	0800c5a5 	.word	0x0800c5a5
 8006440:	3ff80000 	.word	0x3ff80000
 8006444:	0800c6e8 	.word	0x0800c6e8
 8006448:	0800c64b 	.word	0x0800c64b
 800644c:	2301      	movs	r3, #1
 800644e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006450:	e7d4      	b.n	80063fc <_dtoa_r+0x2b4>
 8006452:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006456:	465b      	mov	r3, fp
 8006458:	f8cd b008 	str.w	fp, [sp, #8]
 800645c:	e7a6      	b.n	80063ac <_dtoa_r+0x264>
 800645e:	3101      	adds	r1, #1
 8006460:	6041      	str	r1, [r0, #4]
 8006462:	0052      	lsls	r2, r2, #1
 8006464:	e7a6      	b.n	80063b4 <_dtoa_r+0x26c>
 8006466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006468:	9a08      	ldr	r2, [sp, #32]
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	2b0e      	cmp	r3, #14
 8006470:	f200 80a8 	bhi.w	80065c4 <_dtoa_r+0x47c>
 8006474:	2c00      	cmp	r4, #0
 8006476:	f000 80a5 	beq.w	80065c4 <_dtoa_r+0x47c>
 800647a:	f1b9 0f00 	cmp.w	r9, #0
 800647e:	dd34      	ble.n	80064ea <_dtoa_r+0x3a2>
 8006480:	4a9a      	ldr	r2, [pc, #616]	; (80066ec <_dtoa_r+0x5a4>)
 8006482:	f009 030f 	and.w	r3, r9, #15
 8006486:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800648a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800648e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006492:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006496:	ea4f 1429 	mov.w	r4, r9, asr #4
 800649a:	d016      	beq.n	80064ca <_dtoa_r+0x382>
 800649c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064a0:	4b93      	ldr	r3, [pc, #588]	; (80066f0 <_dtoa_r+0x5a8>)
 80064a2:	2703      	movs	r7, #3
 80064a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a8:	f7fa f9ac 	bl	8000804 <__aeabi_ddiv>
 80064ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b0:	f004 040f 	and.w	r4, r4, #15
 80064b4:	4e8e      	ldr	r6, [pc, #568]	; (80066f0 <_dtoa_r+0x5a8>)
 80064b6:	b954      	cbnz	r4, 80064ce <_dtoa_r+0x386>
 80064b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c0:	f7fa f9a0 	bl	8000804 <__aeabi_ddiv>
 80064c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c8:	e029      	b.n	800651e <_dtoa_r+0x3d6>
 80064ca:	2702      	movs	r7, #2
 80064cc:	e7f2      	b.n	80064b4 <_dtoa_r+0x36c>
 80064ce:	07e1      	lsls	r1, r4, #31
 80064d0:	d508      	bpl.n	80064e4 <_dtoa_r+0x39c>
 80064d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064da:	f7fa f869 	bl	80005b0 <__aeabi_dmul>
 80064de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064e2:	3701      	adds	r7, #1
 80064e4:	1064      	asrs	r4, r4, #1
 80064e6:	3608      	adds	r6, #8
 80064e8:	e7e5      	b.n	80064b6 <_dtoa_r+0x36e>
 80064ea:	f000 80a5 	beq.w	8006638 <_dtoa_r+0x4f0>
 80064ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064f2:	f1c9 0400 	rsb	r4, r9, #0
 80064f6:	4b7d      	ldr	r3, [pc, #500]	; (80066ec <_dtoa_r+0x5a4>)
 80064f8:	f004 020f 	and.w	r2, r4, #15
 80064fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7fa f854 	bl	80005b0 <__aeabi_dmul>
 8006508:	2702      	movs	r7, #2
 800650a:	2300      	movs	r3, #0
 800650c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006510:	4e77      	ldr	r6, [pc, #476]	; (80066f0 <_dtoa_r+0x5a8>)
 8006512:	1124      	asrs	r4, r4, #4
 8006514:	2c00      	cmp	r4, #0
 8006516:	f040 8084 	bne.w	8006622 <_dtoa_r+0x4da>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1d2      	bne.n	80064c4 <_dtoa_r+0x37c>
 800651e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 808b 	beq.w	800663c <_dtoa_r+0x4f4>
 8006526:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800652a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800652e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006532:	2200      	movs	r2, #0
 8006534:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <_dtoa_r+0x5ac>)
 8006536:	f7fa faad 	bl	8000a94 <__aeabi_dcmplt>
 800653a:	2800      	cmp	r0, #0
 800653c:	d07e      	beq.n	800663c <_dtoa_r+0x4f4>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d07b      	beq.n	800663c <_dtoa_r+0x4f4>
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	dd38      	ble.n	80065bc <_dtoa_r+0x474>
 800654a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800654e:	2200      	movs	r2, #0
 8006550:	4b69      	ldr	r3, [pc, #420]	; (80066f8 <_dtoa_r+0x5b0>)
 8006552:	f7fa f82d 	bl	80005b0 <__aeabi_dmul>
 8006556:	465c      	mov	r4, fp
 8006558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800655c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006560:	3701      	adds	r7, #1
 8006562:	4638      	mov	r0, r7
 8006564:	f7f9 ffba 	bl	80004dc <__aeabi_i2d>
 8006568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800656c:	f7fa f820 	bl	80005b0 <__aeabi_dmul>
 8006570:	2200      	movs	r2, #0
 8006572:	4b62      	ldr	r3, [pc, #392]	; (80066fc <_dtoa_r+0x5b4>)
 8006574:	f7f9 fe66 	bl	8000244 <__adddf3>
 8006578:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800657c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006580:	9611      	str	r6, [sp, #68]	; 0x44
 8006582:	2c00      	cmp	r4, #0
 8006584:	d15d      	bne.n	8006642 <_dtoa_r+0x4fa>
 8006586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800658a:	2200      	movs	r2, #0
 800658c:	4b5c      	ldr	r3, [pc, #368]	; (8006700 <_dtoa_r+0x5b8>)
 800658e:	f7f9 fe57 	bl	8000240 <__aeabi_dsub>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800659a:	4633      	mov	r3, r6
 800659c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800659e:	f7fa fa97 	bl	8000ad0 <__aeabi_dcmpgt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f040 829e 	bne.w	8006ae4 <_dtoa_r+0x99c>
 80065a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065b2:	f7fa fa6f 	bl	8000a94 <__aeabi_dcmplt>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f040 8292 	bne.w	8006ae0 <_dtoa_r+0x998>
 80065bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80065c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f2c0 8153 	blt.w	8006872 <_dtoa_r+0x72a>
 80065cc:	f1b9 0f0e 	cmp.w	r9, #14
 80065d0:	f300 814f 	bgt.w	8006872 <_dtoa_r+0x72a>
 80065d4:	4b45      	ldr	r3, [pc, #276]	; (80066ec <_dtoa_r+0x5a4>)
 80065d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80065da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f280 80db 	bge.w	80067a0 <_dtoa_r+0x658>
 80065ea:	9b02      	ldr	r3, [sp, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f300 80d7 	bgt.w	80067a0 <_dtoa_r+0x658>
 80065f2:	f040 8274 	bne.w	8006ade <_dtoa_r+0x996>
 80065f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b40      	ldr	r3, [pc, #256]	; (8006700 <_dtoa_r+0x5b8>)
 80065fe:	f7f9 ffd7 	bl	80005b0 <__aeabi_dmul>
 8006602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006606:	f7fa fa59 	bl	8000abc <__aeabi_dcmpge>
 800660a:	9c02      	ldr	r4, [sp, #8]
 800660c:	4626      	mov	r6, r4
 800660e:	2800      	cmp	r0, #0
 8006610:	f040 824a 	bne.w	8006aa8 <_dtoa_r+0x960>
 8006614:	2331      	movs	r3, #49	; 0x31
 8006616:	9f08      	ldr	r7, [sp, #32]
 8006618:	f109 0901 	add.w	r9, r9, #1
 800661c:	f807 3b01 	strb.w	r3, [r7], #1
 8006620:	e246      	b.n	8006ab0 <_dtoa_r+0x968>
 8006622:	07e2      	lsls	r2, r4, #31
 8006624:	d505      	bpl.n	8006632 <_dtoa_r+0x4ea>
 8006626:	e9d6 2300 	ldrd	r2, r3, [r6]
 800662a:	f7f9 ffc1 	bl	80005b0 <__aeabi_dmul>
 800662e:	2301      	movs	r3, #1
 8006630:	3701      	adds	r7, #1
 8006632:	1064      	asrs	r4, r4, #1
 8006634:	3608      	adds	r6, #8
 8006636:	e76d      	b.n	8006514 <_dtoa_r+0x3cc>
 8006638:	2702      	movs	r7, #2
 800663a:	e770      	b.n	800651e <_dtoa_r+0x3d6>
 800663c:	46c8      	mov	r8, r9
 800663e:	9c02      	ldr	r4, [sp, #8]
 8006640:	e78f      	b.n	8006562 <_dtoa_r+0x41a>
 8006642:	9908      	ldr	r1, [sp, #32]
 8006644:	4b29      	ldr	r3, [pc, #164]	; (80066ec <_dtoa_r+0x5a4>)
 8006646:	4421      	add	r1, r4
 8006648:	9112      	str	r1, [sp, #72]	; 0x48
 800664a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800664c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006650:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006654:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006658:	2900      	cmp	r1, #0
 800665a:	d055      	beq.n	8006708 <_dtoa_r+0x5c0>
 800665c:	2000      	movs	r0, #0
 800665e:	4929      	ldr	r1, [pc, #164]	; (8006704 <_dtoa_r+0x5bc>)
 8006660:	f7fa f8d0 	bl	8000804 <__aeabi_ddiv>
 8006664:	463b      	mov	r3, r7
 8006666:	4632      	mov	r2, r6
 8006668:	f7f9 fdea 	bl	8000240 <__aeabi_dsub>
 800666c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006670:	9f08      	ldr	r7, [sp, #32]
 8006672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006676:	f7fa fa4b 	bl	8000b10 <__aeabi_d2iz>
 800667a:	4604      	mov	r4, r0
 800667c:	f7f9 ff2e 	bl	80004dc <__aeabi_i2d>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006688:	f7f9 fdda 	bl	8000240 <__aeabi_dsub>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	3430      	adds	r4, #48	; 0x30
 8006692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800669a:	f807 4b01 	strb.w	r4, [r7], #1
 800669e:	f7fa f9f9 	bl	8000a94 <__aeabi_dcmplt>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d174      	bne.n	8006790 <_dtoa_r+0x648>
 80066a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066aa:	2000      	movs	r0, #0
 80066ac:	4911      	ldr	r1, [pc, #68]	; (80066f4 <_dtoa_r+0x5ac>)
 80066ae:	f7f9 fdc7 	bl	8000240 <__aeabi_dsub>
 80066b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066b6:	f7fa f9ed 	bl	8000a94 <__aeabi_dcmplt>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	f040 80b6 	bne.w	800682c <_dtoa_r+0x6e4>
 80066c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066c2:	429f      	cmp	r7, r3
 80066c4:	f43f af7a 	beq.w	80065bc <_dtoa_r+0x474>
 80066c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066cc:	2200      	movs	r2, #0
 80066ce:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <_dtoa_r+0x5b0>)
 80066d0:	f7f9 ff6e 	bl	80005b0 <__aeabi_dmul>
 80066d4:	2200      	movs	r2, #0
 80066d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <_dtoa_r+0x5b0>)
 80066e0:	f7f9 ff66 	bl	80005b0 <__aeabi_dmul>
 80066e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e8:	e7c3      	b.n	8006672 <_dtoa_r+0x52a>
 80066ea:	bf00      	nop
 80066ec:	0800c6e8 	.word	0x0800c6e8
 80066f0:	0800c6c0 	.word	0x0800c6c0
 80066f4:	3ff00000 	.word	0x3ff00000
 80066f8:	40240000 	.word	0x40240000
 80066fc:	401c0000 	.word	0x401c0000
 8006700:	40140000 	.word	0x40140000
 8006704:	3fe00000 	.word	0x3fe00000
 8006708:	4630      	mov	r0, r6
 800670a:	4639      	mov	r1, r7
 800670c:	f7f9 ff50 	bl	80005b0 <__aeabi_dmul>
 8006710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006712:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006716:	9c08      	ldr	r4, [sp, #32]
 8006718:	9314      	str	r3, [sp, #80]	; 0x50
 800671a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800671e:	f7fa f9f7 	bl	8000b10 <__aeabi_d2iz>
 8006722:	9015      	str	r0, [sp, #84]	; 0x54
 8006724:	f7f9 feda 	bl	80004dc <__aeabi_i2d>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006730:	f7f9 fd86 	bl	8000240 <__aeabi_dsub>
 8006734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006736:	4606      	mov	r6, r0
 8006738:	3330      	adds	r3, #48	; 0x30
 800673a:	f804 3b01 	strb.w	r3, [r4], #1
 800673e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006740:	460f      	mov	r7, r1
 8006742:	429c      	cmp	r4, r3
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	d124      	bne.n	8006794 <_dtoa_r+0x64c>
 800674a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800674e:	4bb3      	ldr	r3, [pc, #716]	; (8006a1c <_dtoa_r+0x8d4>)
 8006750:	f7f9 fd78 	bl	8000244 <__adddf3>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9b8 	bl	8000ad0 <__aeabi_dcmpgt>
 8006760:	2800      	cmp	r0, #0
 8006762:	d162      	bne.n	800682a <_dtoa_r+0x6e2>
 8006764:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006768:	2000      	movs	r0, #0
 800676a:	49ac      	ldr	r1, [pc, #688]	; (8006a1c <_dtoa_r+0x8d4>)
 800676c:	f7f9 fd68 	bl	8000240 <__aeabi_dsub>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4630      	mov	r0, r6
 8006776:	4639      	mov	r1, r7
 8006778:	f7fa f98c 	bl	8000a94 <__aeabi_dcmplt>
 800677c:	2800      	cmp	r0, #0
 800677e:	f43f af1d 	beq.w	80065bc <_dtoa_r+0x474>
 8006782:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006784:	1e7b      	subs	r3, r7, #1
 8006786:	9314      	str	r3, [sp, #80]	; 0x50
 8006788:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800678c:	2b30      	cmp	r3, #48	; 0x30
 800678e:	d0f8      	beq.n	8006782 <_dtoa_r+0x63a>
 8006790:	46c1      	mov	r9, r8
 8006792:	e03a      	b.n	800680a <_dtoa_r+0x6c2>
 8006794:	4ba2      	ldr	r3, [pc, #648]	; (8006a20 <_dtoa_r+0x8d8>)
 8006796:	f7f9 ff0b 	bl	80005b0 <__aeabi_dmul>
 800679a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800679e:	e7bc      	b.n	800671a <_dtoa_r+0x5d2>
 80067a0:	9f08      	ldr	r7, [sp, #32]
 80067a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067aa:	f7fa f82b 	bl	8000804 <__aeabi_ddiv>
 80067ae:	f7fa f9af 	bl	8000b10 <__aeabi_d2iz>
 80067b2:	4604      	mov	r4, r0
 80067b4:	f7f9 fe92 	bl	80004dc <__aeabi_i2d>
 80067b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067bc:	f7f9 fef8 	bl	80005b0 <__aeabi_dmul>
 80067c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80067c4:	460b      	mov	r3, r1
 80067c6:	4602      	mov	r2, r0
 80067c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067cc:	f7f9 fd38 	bl	8000240 <__aeabi_dsub>
 80067d0:	f807 6b01 	strb.w	r6, [r7], #1
 80067d4:	9e08      	ldr	r6, [sp, #32]
 80067d6:	9b02      	ldr	r3, [sp, #8]
 80067d8:	1bbe      	subs	r6, r7, r6
 80067da:	42b3      	cmp	r3, r6
 80067dc:	d13a      	bne.n	8006854 <_dtoa_r+0x70c>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	f7f9 fd2f 	bl	8000244 <__adddf3>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067f2:	f7fa f96d 	bl	8000ad0 <__aeabi_dcmpgt>
 80067f6:	bb58      	cbnz	r0, 8006850 <_dtoa_r+0x708>
 80067f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006800:	f7fa f93e 	bl	8000a80 <__aeabi_dcmpeq>
 8006804:	b108      	cbz	r0, 800680a <_dtoa_r+0x6c2>
 8006806:	07e1      	lsls	r1, r4, #31
 8006808:	d422      	bmi.n	8006850 <_dtoa_r+0x708>
 800680a:	4628      	mov	r0, r5
 800680c:	4651      	mov	r1, sl
 800680e:	f000 faf1 	bl	8006df4 <_Bfree>
 8006812:	2300      	movs	r3, #0
 8006814:	703b      	strb	r3, [r7, #0]
 8006816:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006818:	f109 0001 	add.w	r0, r9, #1
 800681c:	6018      	str	r0, [r3, #0]
 800681e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006820:	2b00      	cmp	r3, #0
 8006822:	f43f acdf 	beq.w	80061e4 <_dtoa_r+0x9c>
 8006826:	601f      	str	r7, [r3, #0]
 8006828:	e4dc      	b.n	80061e4 <_dtoa_r+0x9c>
 800682a:	4627      	mov	r7, r4
 800682c:	463b      	mov	r3, r7
 800682e:	461f      	mov	r7, r3
 8006830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006834:	2a39      	cmp	r2, #57	; 0x39
 8006836:	d107      	bne.n	8006848 <_dtoa_r+0x700>
 8006838:	9a08      	ldr	r2, [sp, #32]
 800683a:	429a      	cmp	r2, r3
 800683c:	d1f7      	bne.n	800682e <_dtoa_r+0x6e6>
 800683e:	2230      	movs	r2, #48	; 0x30
 8006840:	9908      	ldr	r1, [sp, #32]
 8006842:	f108 0801 	add.w	r8, r8, #1
 8006846:	700a      	strb	r2, [r1, #0]
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	3201      	adds	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e79f      	b.n	8006790 <_dtoa_r+0x648>
 8006850:	46c8      	mov	r8, r9
 8006852:	e7eb      	b.n	800682c <_dtoa_r+0x6e4>
 8006854:	2200      	movs	r2, #0
 8006856:	4b72      	ldr	r3, [pc, #456]	; (8006a20 <_dtoa_r+0x8d8>)
 8006858:	f7f9 feaa 	bl	80005b0 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f90a 	bl	8000a80 <__aeabi_dcmpeq>
 800686c:	2800      	cmp	r0, #0
 800686e:	d098      	beq.n	80067a2 <_dtoa_r+0x65a>
 8006870:	e7cb      	b.n	800680a <_dtoa_r+0x6c2>
 8006872:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006874:	2a00      	cmp	r2, #0
 8006876:	f000 80cd 	beq.w	8006a14 <_dtoa_r+0x8cc>
 800687a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800687c:	2a01      	cmp	r2, #1
 800687e:	f300 80af 	bgt.w	80069e0 <_dtoa_r+0x898>
 8006882:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006884:	2a00      	cmp	r2, #0
 8006886:	f000 80a7 	beq.w	80069d8 <_dtoa_r+0x890>
 800688a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800688e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006890:	9f06      	ldr	r7, [sp, #24]
 8006892:	9a06      	ldr	r2, [sp, #24]
 8006894:	2101      	movs	r1, #1
 8006896:	441a      	add	r2, r3
 8006898:	9206      	str	r2, [sp, #24]
 800689a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800689c:	4628      	mov	r0, r5
 800689e:	441a      	add	r2, r3
 80068a0:	9209      	str	r2, [sp, #36]	; 0x24
 80068a2:	f000 fb61 	bl	8006f68 <__i2b>
 80068a6:	4606      	mov	r6, r0
 80068a8:	2f00      	cmp	r7, #0
 80068aa:	dd0c      	ble.n	80068c6 <_dtoa_r+0x77e>
 80068ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dd09      	ble.n	80068c6 <_dtoa_r+0x77e>
 80068b2:	42bb      	cmp	r3, r7
 80068b4:	bfa8      	it	ge
 80068b6:	463b      	movge	r3, r7
 80068b8:	9a06      	ldr	r2, [sp, #24]
 80068ba:	1aff      	subs	r7, r7, r3
 80068bc:	1ad2      	subs	r2, r2, r3
 80068be:	9206      	str	r2, [sp, #24]
 80068c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	9309      	str	r3, [sp, #36]	; 0x24
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	b1f3      	cbz	r3, 8006908 <_dtoa_r+0x7c0>
 80068ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80a9 	beq.w	8006a24 <_dtoa_r+0x8dc>
 80068d2:	2c00      	cmp	r4, #0
 80068d4:	dd10      	ble.n	80068f8 <_dtoa_r+0x7b0>
 80068d6:	4631      	mov	r1, r6
 80068d8:	4622      	mov	r2, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 fbfe 	bl	80070dc <__pow5mult>
 80068e0:	4652      	mov	r2, sl
 80068e2:	4601      	mov	r1, r0
 80068e4:	4606      	mov	r6, r0
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 fb54 	bl	8006f94 <__multiply>
 80068ec:	4680      	mov	r8, r0
 80068ee:	4651      	mov	r1, sl
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 fa7f 	bl	8006df4 <_Bfree>
 80068f6:	46c2      	mov	sl, r8
 80068f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fa:	1b1a      	subs	r2, r3, r4
 80068fc:	d004      	beq.n	8006908 <_dtoa_r+0x7c0>
 80068fe:	4651      	mov	r1, sl
 8006900:	4628      	mov	r0, r5
 8006902:	f000 fbeb 	bl	80070dc <__pow5mult>
 8006906:	4682      	mov	sl, r0
 8006908:	2101      	movs	r1, #1
 800690a:	4628      	mov	r0, r5
 800690c:	f000 fb2c 	bl	8006f68 <__i2b>
 8006910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006912:	4604      	mov	r4, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	f340 8087 	ble.w	8006a28 <_dtoa_r+0x8e0>
 800691a:	461a      	mov	r2, r3
 800691c:	4601      	mov	r1, r0
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fbdc 	bl	80070dc <__pow5mult>
 8006924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006926:	4604      	mov	r4, r0
 8006928:	2b01      	cmp	r3, #1
 800692a:	f340 8080 	ble.w	8006a2e <_dtoa_r+0x8e6>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006938:	6918      	ldr	r0, [r3, #16]
 800693a:	f000 fac7 	bl	8006ecc <__hi0bits>
 800693e:	f1c0 0020 	rsb	r0, r0, #32
 8006942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006944:	4418      	add	r0, r3
 8006946:	f010 001f 	ands.w	r0, r0, #31
 800694a:	f000 8092 	beq.w	8006a72 <_dtoa_r+0x92a>
 800694e:	f1c0 0320 	rsb	r3, r0, #32
 8006952:	2b04      	cmp	r3, #4
 8006954:	f340 808a 	ble.w	8006a6c <_dtoa_r+0x924>
 8006958:	f1c0 001c 	rsb	r0, r0, #28
 800695c:	9b06      	ldr	r3, [sp, #24]
 800695e:	4407      	add	r7, r0
 8006960:	4403      	add	r3, r0
 8006962:	9306      	str	r3, [sp, #24]
 8006964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006966:	4403      	add	r3, r0
 8006968:	9309      	str	r3, [sp, #36]	; 0x24
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd05      	ble.n	800697c <_dtoa_r+0x834>
 8006970:	4651      	mov	r1, sl
 8006972:	461a      	mov	r2, r3
 8006974:	4628      	mov	r0, r5
 8006976:	f000 fc0b 	bl	8007190 <__lshift>
 800697a:	4682      	mov	sl, r0
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	dd05      	ble.n	800698e <_dtoa_r+0x846>
 8006982:	4621      	mov	r1, r4
 8006984:	461a      	mov	r2, r3
 8006986:	4628      	mov	r0, r5
 8006988:	f000 fc02 	bl	8007190 <__lshift>
 800698c:	4604      	mov	r4, r0
 800698e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d070      	beq.n	8006a76 <_dtoa_r+0x92e>
 8006994:	4621      	mov	r1, r4
 8006996:	4650      	mov	r0, sl
 8006998:	f000 fc66 	bl	8007268 <__mcmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	da6a      	bge.n	8006a76 <_dtoa_r+0x92e>
 80069a0:	2300      	movs	r3, #0
 80069a2:	4651      	mov	r1, sl
 80069a4:	220a      	movs	r2, #10
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 fa46 	bl	8006e38 <__multadd>
 80069ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ae:	4682      	mov	sl, r0
 80069b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8193 	beq.w	8006ce0 <_dtoa_r+0xb98>
 80069ba:	4631      	mov	r1, r6
 80069bc:	2300      	movs	r3, #0
 80069be:	220a      	movs	r2, #10
 80069c0:	4628      	mov	r0, r5
 80069c2:	f000 fa39 	bl	8006e38 <__multadd>
 80069c6:	f1bb 0f00 	cmp.w	fp, #0
 80069ca:	4606      	mov	r6, r0
 80069cc:	f300 8093 	bgt.w	8006af6 <_dtoa_r+0x9ae>
 80069d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	dc57      	bgt.n	8006a86 <_dtoa_r+0x93e>
 80069d6:	e08e      	b.n	8006af6 <_dtoa_r+0x9ae>
 80069d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069de:	e756      	b.n	800688e <_dtoa_r+0x746>
 80069e0:	9b02      	ldr	r3, [sp, #8]
 80069e2:	1e5c      	subs	r4, r3, #1
 80069e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	bfb7      	itett	lt
 80069ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069ec:	1b1c      	subge	r4, r3, r4
 80069ee:	1ae2      	sublt	r2, r4, r3
 80069f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80069f2:	bfbe      	ittt	lt
 80069f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069f6:	189b      	addlt	r3, r3, r2
 80069f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069fa:	9b02      	ldr	r3, [sp, #8]
 80069fc:	bfb8      	it	lt
 80069fe:	2400      	movlt	r4, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfbb      	ittet	lt
 8006a04:	9b06      	ldrlt	r3, [sp, #24]
 8006a06:	9a02      	ldrlt	r2, [sp, #8]
 8006a08:	9f06      	ldrge	r7, [sp, #24]
 8006a0a:	1a9f      	sublt	r7, r3, r2
 8006a0c:	bfac      	ite	ge
 8006a0e:	9b02      	ldrge	r3, [sp, #8]
 8006a10:	2300      	movlt	r3, #0
 8006a12:	e73e      	b.n	8006892 <_dtoa_r+0x74a>
 8006a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a16:	9f06      	ldr	r7, [sp, #24]
 8006a18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a1a:	e745      	b.n	80068a8 <_dtoa_r+0x760>
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	40240000 	.word	0x40240000
 8006a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a26:	e76a      	b.n	80068fe <_dtoa_r+0x7b6>
 8006a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	dc19      	bgt.n	8006a62 <_dtoa_r+0x91a>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	b9bb      	cbnz	r3, 8006a62 <_dtoa_r+0x91a>
 8006a32:	9b05      	ldr	r3, [sp, #20]
 8006a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a38:	b99b      	cbnz	r3, 8006a62 <_dtoa_r+0x91a>
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	0d1b      	lsrs	r3, r3, #20
 8006a42:	051b      	lsls	r3, r3, #20
 8006a44:	b183      	cbz	r3, 8006a68 <_dtoa_r+0x920>
 8006a46:	f04f 0801 	mov.w	r8, #1
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	9306      	str	r3, [sp, #24]
 8006a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a52:	3301      	adds	r3, #1
 8006a54:	9309      	str	r3, [sp, #36]	; 0x24
 8006a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f47f af6a 	bne.w	8006932 <_dtoa_r+0x7ea>
 8006a5e:	2001      	movs	r0, #1
 8006a60:	e76f      	b.n	8006942 <_dtoa_r+0x7fa>
 8006a62:	f04f 0800 	mov.w	r8, #0
 8006a66:	e7f6      	b.n	8006a56 <_dtoa_r+0x90e>
 8006a68:	4698      	mov	r8, r3
 8006a6a:	e7f4      	b.n	8006a56 <_dtoa_r+0x90e>
 8006a6c:	f43f af7d 	beq.w	800696a <_dtoa_r+0x822>
 8006a70:	4618      	mov	r0, r3
 8006a72:	301c      	adds	r0, #28
 8006a74:	e772      	b.n	800695c <_dtoa_r+0x814>
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dc36      	bgt.n	8006aea <_dtoa_r+0x9a2>
 8006a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	dd33      	ble.n	8006aea <_dtoa_r+0x9a2>
 8006a82:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a86:	f1bb 0f00 	cmp.w	fp, #0
 8006a8a:	d10d      	bne.n	8006aa8 <_dtoa_r+0x960>
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	465b      	mov	r3, fp
 8006a90:	2205      	movs	r2, #5
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f9d0 	bl	8006e38 <__multadd>
 8006a98:	4601      	mov	r1, r0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	f000 fbe3 	bl	8007268 <__mcmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f73f adb6 	bgt.w	8006614 <_dtoa_r+0x4cc>
 8006aa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aaa:	9f08      	ldr	r7, [sp, #32]
 8006aac:	ea6f 0903 	mvn.w	r9, r3
 8006ab0:	f04f 0800 	mov.w	r8, #0
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 f99c 	bl	8006df4 <_Bfree>
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	f43f aea4 	beq.w	800680a <_dtoa_r+0x6c2>
 8006ac2:	f1b8 0f00 	cmp.w	r8, #0
 8006ac6:	d005      	beq.n	8006ad4 <_dtoa_r+0x98c>
 8006ac8:	45b0      	cmp	r8, r6
 8006aca:	d003      	beq.n	8006ad4 <_dtoa_r+0x98c>
 8006acc:	4641      	mov	r1, r8
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 f990 	bl	8006df4 <_Bfree>
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f98c 	bl	8006df4 <_Bfree>
 8006adc:	e695      	b.n	800680a <_dtoa_r+0x6c2>
 8006ade:	2400      	movs	r4, #0
 8006ae0:	4626      	mov	r6, r4
 8006ae2:	e7e1      	b.n	8006aa8 <_dtoa_r+0x960>
 8006ae4:	46c1      	mov	r9, r8
 8006ae6:	4626      	mov	r6, r4
 8006ae8:	e594      	b.n	8006614 <_dtoa_r+0x4cc>
 8006aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aec:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80fc 	beq.w	8006cee <_dtoa_r+0xba6>
 8006af6:	2f00      	cmp	r7, #0
 8006af8:	dd05      	ble.n	8006b06 <_dtoa_r+0x9be>
 8006afa:	4631      	mov	r1, r6
 8006afc:	463a      	mov	r2, r7
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fb46 	bl	8007190 <__lshift>
 8006b04:	4606      	mov	r6, r0
 8006b06:	f1b8 0f00 	cmp.w	r8, #0
 8006b0a:	d05c      	beq.n	8006bc6 <_dtoa_r+0xa7e>
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	6871      	ldr	r1, [r6, #4]
 8006b10:	f000 f930 	bl	8006d74 <_Balloc>
 8006b14:	4607      	mov	r7, r0
 8006b16:	b928      	cbnz	r0, 8006b24 <_dtoa_r+0x9dc>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b1e:	4b7e      	ldr	r3, [pc, #504]	; (8006d18 <_dtoa_r+0xbd0>)
 8006b20:	f7ff bb26 	b.w	8006170 <_dtoa_r+0x28>
 8006b24:	6932      	ldr	r2, [r6, #16]
 8006b26:	f106 010c 	add.w	r1, r6, #12
 8006b2a:	3202      	adds	r2, #2
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	300c      	adds	r0, #12
 8006b30:	f000 f912 	bl	8006d58 <memcpy>
 8006b34:	2201      	movs	r2, #1
 8006b36:	4639      	mov	r1, r7
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 fb29 	bl	8007190 <__lshift>
 8006b3e:	46b0      	mov	r8, r6
 8006b40:	4606      	mov	r6, r0
 8006b42:	9b08      	ldr	r3, [sp, #32]
 8006b44:	3301      	adds	r3, #1
 8006b46:	9302      	str	r3, [sp, #8]
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	445b      	add	r3, fp
 8006b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	9309      	str	r3, [sp, #36]	; 0x24
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b60:	f7ff fa64 	bl	800602c <quorem>
 8006b64:	4603      	mov	r3, r0
 8006b66:	4641      	mov	r1, r8
 8006b68:	3330      	adds	r3, #48	; 0x30
 8006b6a:	9004      	str	r0, [sp, #16]
 8006b6c:	4650      	mov	r0, sl
 8006b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b70:	f000 fb7a 	bl	8007268 <__mcmp>
 8006b74:	4632      	mov	r2, r6
 8006b76:	9006      	str	r0, [sp, #24]
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 fb90 	bl	80072a0 <__mdiff>
 8006b80:	68c2      	ldr	r2, [r0, #12]
 8006b82:	4607      	mov	r7, r0
 8006b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b86:	bb02      	cbnz	r2, 8006bca <_dtoa_r+0xa82>
 8006b88:	4601      	mov	r1, r0
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	f000 fb6c 	bl	8007268 <__mcmp>
 8006b90:	4602      	mov	r2, r0
 8006b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b94:	4639      	mov	r1, r7
 8006b96:	4628      	mov	r0, r5
 8006b98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006b9c:	f000 f92a 	bl	8006df4 <_Bfree>
 8006ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba4:	9f02      	ldr	r7, [sp, #8]
 8006ba6:	ea43 0102 	orr.w	r1, r3, r2
 8006baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bac:	430b      	orrs	r3, r1
 8006bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb0:	d10d      	bne.n	8006bce <_dtoa_r+0xa86>
 8006bb2:	2b39      	cmp	r3, #57	; 0x39
 8006bb4:	d027      	beq.n	8006c06 <_dtoa_r+0xabe>
 8006bb6:	9a06      	ldr	r2, [sp, #24]
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	dd01      	ble.n	8006bc0 <_dtoa_r+0xa78>
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	3331      	adds	r3, #49	; 0x31
 8006bc0:	f88b 3000 	strb.w	r3, [fp]
 8006bc4:	e776      	b.n	8006ab4 <_dtoa_r+0x96c>
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	e7b9      	b.n	8006b3e <_dtoa_r+0x9f6>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	e7e2      	b.n	8006b94 <_dtoa_r+0xa4c>
 8006bce:	9906      	ldr	r1, [sp, #24]
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	db04      	blt.n	8006bde <_dtoa_r+0xa96>
 8006bd4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006bd6:	4301      	orrs	r1, r0
 8006bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bda:	4301      	orrs	r1, r0
 8006bdc:	d120      	bne.n	8006c20 <_dtoa_r+0xad8>
 8006bde:	2a00      	cmp	r2, #0
 8006be0:	ddee      	ble.n	8006bc0 <_dtoa_r+0xa78>
 8006be2:	4651      	mov	r1, sl
 8006be4:	2201      	movs	r2, #1
 8006be6:	4628      	mov	r0, r5
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	f000 fad1 	bl	8007190 <__lshift>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	f000 fb39 	bl	8007268 <__mcmp>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	dc02      	bgt.n	8006c02 <_dtoa_r+0xaba>
 8006bfc:	d1e0      	bne.n	8006bc0 <_dtoa_r+0xa78>
 8006bfe:	07da      	lsls	r2, r3, #31
 8006c00:	d5de      	bpl.n	8006bc0 <_dtoa_r+0xa78>
 8006c02:	2b39      	cmp	r3, #57	; 0x39
 8006c04:	d1da      	bne.n	8006bbc <_dtoa_r+0xa74>
 8006c06:	2339      	movs	r3, #57	; 0x39
 8006c08:	f88b 3000 	strb.w	r3, [fp]
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	461f      	mov	r7, r3
 8006c10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	2a39      	cmp	r2, #57	; 0x39
 8006c18:	d050      	beq.n	8006cbc <_dtoa_r+0xb74>
 8006c1a:	3201      	adds	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	e749      	b.n	8006ab4 <_dtoa_r+0x96c>
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	dd03      	ble.n	8006c2c <_dtoa_r+0xae4>
 8006c24:	2b39      	cmp	r3, #57	; 0x39
 8006c26:	d0ee      	beq.n	8006c06 <_dtoa_r+0xabe>
 8006c28:	3301      	adds	r3, #1
 8006c2a:	e7c9      	b.n	8006bc0 <_dtoa_r+0xa78>
 8006c2c:	9a02      	ldr	r2, [sp, #8]
 8006c2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c34:	428a      	cmp	r2, r1
 8006c36:	d02a      	beq.n	8006c8e <_dtoa_r+0xb46>
 8006c38:	4651      	mov	r1, sl
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f8fa 	bl	8006e38 <__multadd>
 8006c44:	45b0      	cmp	r8, r6
 8006c46:	4682      	mov	sl, r0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	f04f 020a 	mov.w	r2, #10
 8006c50:	4641      	mov	r1, r8
 8006c52:	4628      	mov	r0, r5
 8006c54:	d107      	bne.n	8006c66 <_dtoa_r+0xb1e>
 8006c56:	f000 f8ef 	bl	8006e38 <__multadd>
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	9b02      	ldr	r3, [sp, #8]
 8006c60:	3301      	adds	r3, #1
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	e777      	b.n	8006b56 <_dtoa_r+0xa0e>
 8006c66:	f000 f8e7 	bl	8006e38 <__multadd>
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	2300      	movs	r3, #0
 8006c70:	220a      	movs	r2, #10
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f8e0 	bl	8006e38 <__multadd>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	e7f0      	b.n	8006c5e <_dtoa_r+0xb16>
 8006c7c:	f1bb 0f00 	cmp.w	fp, #0
 8006c80:	bfcc      	ite	gt
 8006c82:	465f      	movgt	r7, fp
 8006c84:	2701      	movle	r7, #1
 8006c86:	f04f 0800 	mov.w	r8, #0
 8006c8a:	9a08      	ldr	r2, [sp, #32]
 8006c8c:	4417      	add	r7, r2
 8006c8e:	4651      	mov	r1, sl
 8006c90:	2201      	movs	r2, #1
 8006c92:	4628      	mov	r0, r5
 8006c94:	9302      	str	r3, [sp, #8]
 8006c96:	f000 fa7b 	bl	8007190 <__lshift>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	f000 fae3 	bl	8007268 <__mcmp>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	dcb2      	bgt.n	8006c0c <_dtoa_r+0xac4>
 8006ca6:	d102      	bne.n	8006cae <_dtoa_r+0xb66>
 8006ca8:	9b02      	ldr	r3, [sp, #8]
 8006caa:	07db      	lsls	r3, r3, #31
 8006cac:	d4ae      	bmi.n	8006c0c <_dtoa_r+0xac4>
 8006cae:	463b      	mov	r3, r7
 8006cb0:	461f      	mov	r7, r3
 8006cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cb6:	2a30      	cmp	r2, #48	; 0x30
 8006cb8:	d0fa      	beq.n	8006cb0 <_dtoa_r+0xb68>
 8006cba:	e6fb      	b.n	8006ab4 <_dtoa_r+0x96c>
 8006cbc:	9a08      	ldr	r2, [sp, #32]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d1a5      	bne.n	8006c0e <_dtoa_r+0xac6>
 8006cc2:	2331      	movs	r3, #49	; 0x31
 8006cc4:	f109 0901 	add.w	r9, r9, #1
 8006cc8:	7013      	strb	r3, [r2, #0]
 8006cca:	e6f3      	b.n	8006ab4 <_dtoa_r+0x96c>
 8006ccc:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <_dtoa_r+0xbd4>)
 8006cce:	f7ff baa7 	b.w	8006220 <_dtoa_r+0xd8>
 8006cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f47f aa80 	bne.w	80061da <_dtoa_r+0x92>
 8006cda:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <_dtoa_r+0xbd8>)
 8006cdc:	f7ff baa0 	b.w	8006220 <_dtoa_r+0xd8>
 8006ce0:	f1bb 0f00 	cmp.w	fp, #0
 8006ce4:	dc03      	bgt.n	8006cee <_dtoa_r+0xba6>
 8006ce6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	f73f aecc 	bgt.w	8006a86 <_dtoa_r+0x93e>
 8006cee:	9f08      	ldr	r7, [sp, #32]
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	f7ff f99a 	bl	800602c <quorem>
 8006cf8:	9a08      	ldr	r2, [sp, #32]
 8006cfa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006cfe:	f807 3b01 	strb.w	r3, [r7], #1
 8006d02:	1aba      	subs	r2, r7, r2
 8006d04:	4593      	cmp	fp, r2
 8006d06:	ddb9      	ble.n	8006c7c <_dtoa_r+0xb34>
 8006d08:	4651      	mov	r1, sl
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f892 	bl	8006e38 <__multadd>
 8006d14:	4682      	mov	sl, r0
 8006d16:	e7eb      	b.n	8006cf0 <_dtoa_r+0xba8>
 8006d18:	0800c64b 	.word	0x0800c64b
 8006d1c:	0800c5a4 	.word	0x0800c5a4
 8006d20:	0800c5c8 	.word	0x0800c5c8

08006d24 <_localeconv_r>:
 8006d24:	4800      	ldr	r0, [pc, #0]	; (8006d28 <_localeconv_r+0x4>)
 8006d26:	4770      	bx	lr
 8006d28:	200001a0 	.word	0x200001a0

08006d2c <malloc>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <malloc+0xc>)
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f000 bbfb 	b.w	800752c <_malloc_r>
 8006d36:	bf00      	nop
 8006d38:	2000004c 	.word	0x2000004c

08006d3c <memchr>:
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	b2c9      	uxtb	r1, r1
 8006d42:	4402      	add	r2, r0
 8006d44:	4293      	cmp	r3, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	d101      	bne.n	8006d4e <memchr+0x12>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e003      	b.n	8006d56 <memchr+0x1a>
 8006d4e:	7804      	ldrb	r4, [r0, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	428c      	cmp	r4, r1
 8006d54:	d1f6      	bne.n	8006d44 <memchr+0x8>
 8006d56:	bd10      	pop	{r4, pc}

08006d58 <memcpy>:
 8006d58:	440a      	add	r2, r1
 8006d5a:	4291      	cmp	r1, r2
 8006d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d60:	d100      	bne.n	8006d64 <memcpy+0xc>
 8006d62:	4770      	bx	lr
 8006d64:	b510      	push	{r4, lr}
 8006d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d70:	d1f9      	bne.n	8006d66 <memcpy+0xe>
 8006d72:	bd10      	pop	{r4, pc}

08006d74 <_Balloc>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d78:	4604      	mov	r4, r0
 8006d7a:	460d      	mov	r5, r1
 8006d7c:	b976      	cbnz	r6, 8006d9c <_Balloc+0x28>
 8006d7e:	2010      	movs	r0, #16
 8006d80:	f7ff ffd4 	bl	8006d2c <malloc>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6260      	str	r0, [r4, #36]	; 0x24
 8006d88:	b920      	cbnz	r0, 8006d94 <_Balloc+0x20>
 8006d8a:	2166      	movs	r1, #102	; 0x66
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <_Balloc+0x78>)
 8006d8e:	4818      	ldr	r0, [pc, #96]	; (8006df0 <_Balloc+0x7c>)
 8006d90:	f000 fd92 	bl	80078b8 <__assert_func>
 8006d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d98:	6006      	str	r6, [r0, #0]
 8006d9a:	60c6      	str	r6, [r0, #12]
 8006d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d9e:	68f3      	ldr	r3, [r6, #12]
 8006da0:	b183      	cbz	r3, 8006dc4 <_Balloc+0x50>
 8006da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006daa:	b9b8      	cbnz	r0, 8006ddc <_Balloc+0x68>
 8006dac:	2101      	movs	r1, #1
 8006dae:	fa01 f605 	lsl.w	r6, r1, r5
 8006db2:	1d72      	adds	r2, r6, #5
 8006db4:	4620      	mov	r0, r4
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	f000 fb5e 	bl	8007478 <_calloc_r>
 8006dbc:	b160      	cbz	r0, 8006dd8 <_Balloc+0x64>
 8006dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dc2:	e00e      	b.n	8006de2 <_Balloc+0x6e>
 8006dc4:	2221      	movs	r2, #33	; 0x21
 8006dc6:	2104      	movs	r1, #4
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fb55 	bl	8007478 <_calloc_r>
 8006dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd0:	60f0      	str	r0, [r6, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <_Balloc+0x2e>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	6802      	ldr	r2, [r0, #0]
 8006dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006de2:	2300      	movs	r3, #0
 8006de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006de8:	e7f7      	b.n	8006dda <_Balloc+0x66>
 8006dea:	bf00      	nop
 8006dec:	0800c5d5 	.word	0x0800c5d5
 8006df0:	0800c65c 	.word	0x0800c65c

08006df4 <_Bfree>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006df8:	4605      	mov	r5, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	b976      	cbnz	r6, 8006e1c <_Bfree+0x28>
 8006dfe:	2010      	movs	r0, #16
 8006e00:	f7ff ff94 	bl	8006d2c <malloc>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6268      	str	r0, [r5, #36]	; 0x24
 8006e08:	b920      	cbnz	r0, 8006e14 <_Bfree+0x20>
 8006e0a:	218a      	movs	r1, #138	; 0x8a
 8006e0c:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <_Bfree+0x3c>)
 8006e0e:	4809      	ldr	r0, [pc, #36]	; (8006e34 <_Bfree+0x40>)
 8006e10:	f000 fd52 	bl	80078b8 <__assert_func>
 8006e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e18:	6006      	str	r6, [r0, #0]
 8006e1a:	60c6      	str	r6, [r0, #12]
 8006e1c:	b13c      	cbz	r4, 8006e2e <_Bfree+0x3a>
 8006e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e20:	6862      	ldr	r2, [r4, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e28:	6021      	str	r1, [r4, #0]
 8006e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	0800c5d5 	.word	0x0800c5d5
 8006e34:	0800c65c 	.word	0x0800c65c

08006e38 <__multadd>:
 8006e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3c:	4698      	mov	r8, r3
 8006e3e:	460c      	mov	r4, r1
 8006e40:	2300      	movs	r3, #0
 8006e42:	690e      	ldr	r6, [r1, #16]
 8006e44:	4607      	mov	r7, r0
 8006e46:	f101 0014 	add.w	r0, r1, #20
 8006e4a:	6805      	ldr	r5, [r0, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	b2a9      	uxth	r1, r5
 8006e50:	fb02 8101 	mla	r1, r2, r1, r8
 8006e54:	0c2d      	lsrs	r5, r5, #16
 8006e56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e5a:	fb02 c505 	mla	r5, r2, r5, ip
 8006e5e:	b289      	uxth	r1, r1
 8006e60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e64:	429e      	cmp	r6, r3
 8006e66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e6a:	f840 1b04 	str.w	r1, [r0], #4
 8006e6e:	dcec      	bgt.n	8006e4a <__multadd+0x12>
 8006e70:	f1b8 0f00 	cmp.w	r8, #0
 8006e74:	d022      	beq.n	8006ebc <__multadd+0x84>
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	42b3      	cmp	r3, r6
 8006e7a:	dc19      	bgt.n	8006eb0 <__multadd+0x78>
 8006e7c:	6861      	ldr	r1, [r4, #4]
 8006e7e:	4638      	mov	r0, r7
 8006e80:	3101      	adds	r1, #1
 8006e82:	f7ff ff77 	bl	8006d74 <_Balloc>
 8006e86:	4605      	mov	r5, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <__multadd+0x5e>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	21b5      	movs	r1, #181	; 0xb5
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <__multadd+0x8c>)
 8006e90:	480d      	ldr	r0, [pc, #52]	; (8006ec8 <__multadd+0x90>)
 8006e92:	f000 fd11 	bl	80078b8 <__assert_func>
 8006e96:	6922      	ldr	r2, [r4, #16]
 8006e98:	f104 010c 	add.w	r1, r4, #12
 8006e9c:	3202      	adds	r2, #2
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	300c      	adds	r0, #12
 8006ea2:	f7ff ff59 	bl	8006d58 <memcpy>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ffa3 	bl	8006df4 <_Bfree>
 8006eae:	462c      	mov	r4, r5
 8006eb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8006eba:	6126      	str	r6, [r4, #16]
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0800c64b 	.word	0x0800c64b
 8006ec8:	0800c65c 	.word	0x0800c65c

08006ecc <__hi0bits>:
 8006ecc:	0c02      	lsrs	r2, r0, #16
 8006ece:	0412      	lsls	r2, r2, #16
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	b9ca      	cbnz	r2, 8006f08 <__hi0bits+0x3c>
 8006ed4:	0403      	lsls	r3, r0, #16
 8006ed6:	2010      	movs	r0, #16
 8006ed8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006edc:	bf04      	itt	eq
 8006ede:	021b      	lsleq	r3, r3, #8
 8006ee0:	3008      	addeq	r0, #8
 8006ee2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ee6:	bf04      	itt	eq
 8006ee8:	011b      	lsleq	r3, r3, #4
 8006eea:	3004      	addeq	r0, #4
 8006eec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ef0:	bf04      	itt	eq
 8006ef2:	009b      	lsleq	r3, r3, #2
 8006ef4:	3002      	addeq	r0, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	db05      	blt.n	8006f06 <__hi0bits+0x3a>
 8006efa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006efe:	f100 0001 	add.w	r0, r0, #1
 8006f02:	bf08      	it	eq
 8006f04:	2020      	moveq	r0, #32
 8006f06:	4770      	bx	lr
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e7e5      	b.n	8006ed8 <__hi0bits+0xc>

08006f0c <__lo0bits>:
 8006f0c:	6803      	ldr	r3, [r0, #0]
 8006f0e:	4602      	mov	r2, r0
 8006f10:	f013 0007 	ands.w	r0, r3, #7
 8006f14:	d00b      	beq.n	8006f2e <__lo0bits+0x22>
 8006f16:	07d9      	lsls	r1, r3, #31
 8006f18:	d422      	bmi.n	8006f60 <__lo0bits+0x54>
 8006f1a:	0798      	lsls	r0, r3, #30
 8006f1c:	bf49      	itett	mi
 8006f1e:	085b      	lsrmi	r3, r3, #1
 8006f20:	089b      	lsrpl	r3, r3, #2
 8006f22:	2001      	movmi	r0, #1
 8006f24:	6013      	strmi	r3, [r2, #0]
 8006f26:	bf5c      	itt	pl
 8006f28:	2002      	movpl	r0, #2
 8006f2a:	6013      	strpl	r3, [r2, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	b299      	uxth	r1, r3
 8006f30:	b909      	cbnz	r1, 8006f36 <__lo0bits+0x2a>
 8006f32:	2010      	movs	r0, #16
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f3a:	bf04      	itt	eq
 8006f3c:	0a1b      	lsreq	r3, r3, #8
 8006f3e:	3008      	addeq	r0, #8
 8006f40:	0719      	lsls	r1, r3, #28
 8006f42:	bf04      	itt	eq
 8006f44:	091b      	lsreq	r3, r3, #4
 8006f46:	3004      	addeq	r0, #4
 8006f48:	0799      	lsls	r1, r3, #30
 8006f4a:	bf04      	itt	eq
 8006f4c:	089b      	lsreq	r3, r3, #2
 8006f4e:	3002      	addeq	r0, #2
 8006f50:	07d9      	lsls	r1, r3, #31
 8006f52:	d403      	bmi.n	8006f5c <__lo0bits+0x50>
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	f100 0001 	add.w	r0, r0, #1
 8006f5a:	d003      	beq.n	8006f64 <__lo0bits+0x58>
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	4770      	bx	lr
 8006f60:	2000      	movs	r0, #0
 8006f62:	4770      	bx	lr
 8006f64:	2020      	movs	r0, #32
 8006f66:	4770      	bx	lr

08006f68 <__i2b>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	f7ff ff01 	bl	8006d74 <_Balloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	b928      	cbnz	r0, 8006f82 <__i2b+0x1a>
 8006f76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <__i2b+0x24>)
 8006f7c:	4804      	ldr	r0, [pc, #16]	; (8006f90 <__i2b+0x28>)
 8006f7e:	f000 fc9b 	bl	80078b8 <__assert_func>
 8006f82:	2301      	movs	r3, #1
 8006f84:	6144      	str	r4, [r0, #20]
 8006f86:	6103      	str	r3, [r0, #16]
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	0800c64b 	.word	0x0800c64b
 8006f90:	0800c65c 	.word	0x0800c65c

08006f94 <__multiply>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	4614      	mov	r4, r2
 8006f9a:	690a      	ldr	r2, [r1, #16]
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bfbe      	ittt	lt
 8006fa4:	460b      	movlt	r3, r1
 8006fa6:	4625      	movlt	r5, r4
 8006fa8:	461c      	movlt	r4, r3
 8006faa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006fae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006fb2:	68ab      	ldr	r3, [r5, #8]
 8006fb4:	6869      	ldr	r1, [r5, #4]
 8006fb6:	eb0a 0709 	add.w	r7, sl, r9
 8006fba:	42bb      	cmp	r3, r7
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	bfb8      	it	lt
 8006fc0:	3101      	addlt	r1, #1
 8006fc2:	f7ff fed7 	bl	8006d74 <_Balloc>
 8006fc6:	b930      	cbnz	r0, 8006fd6 <__multiply+0x42>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	f240 115d 	movw	r1, #349	; 0x15d
 8006fce:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <__multiply+0x140>)
 8006fd0:	4841      	ldr	r0, [pc, #260]	; (80070d8 <__multiply+0x144>)
 8006fd2:	f000 fc71 	bl	80078b8 <__assert_func>
 8006fd6:	f100 0614 	add.w	r6, r0, #20
 8006fda:	4633      	mov	r3, r6
 8006fdc:	2200      	movs	r2, #0
 8006fde:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006fe2:	4543      	cmp	r3, r8
 8006fe4:	d31e      	bcc.n	8007024 <__multiply+0x90>
 8006fe6:	f105 0c14 	add.w	ip, r5, #20
 8006fea:	f104 0314 	add.w	r3, r4, #20
 8006fee:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ff2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006ff6:	9202      	str	r2, [sp, #8]
 8006ff8:	ebac 0205 	sub.w	r2, ip, r5
 8006ffc:	3a15      	subs	r2, #21
 8006ffe:	f022 0203 	bic.w	r2, r2, #3
 8007002:	3204      	adds	r2, #4
 8007004:	f105 0115 	add.w	r1, r5, #21
 8007008:	458c      	cmp	ip, r1
 800700a:	bf38      	it	cc
 800700c:	2204      	movcc	r2, #4
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9a02      	ldr	r2, [sp, #8]
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d808      	bhi.n	800702a <__multiply+0x96>
 8007018:	2f00      	cmp	r7, #0
 800701a:	dc55      	bgt.n	80070c8 <__multiply+0x134>
 800701c:	6107      	str	r7, [r0, #16]
 800701e:	b005      	add	sp, #20
 8007020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007024:	f843 2b04 	str.w	r2, [r3], #4
 8007028:	e7db      	b.n	8006fe2 <__multiply+0x4e>
 800702a:	f8b3 a000 	ldrh.w	sl, [r3]
 800702e:	f1ba 0f00 	cmp.w	sl, #0
 8007032:	d020      	beq.n	8007076 <__multiply+0xe2>
 8007034:	46b1      	mov	r9, r6
 8007036:	2200      	movs	r2, #0
 8007038:	f105 0e14 	add.w	lr, r5, #20
 800703c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007040:	f8d9 b000 	ldr.w	fp, [r9]
 8007044:	b2a1      	uxth	r1, r4
 8007046:	fa1f fb8b 	uxth.w	fp, fp
 800704a:	fb0a b101 	mla	r1, sl, r1, fp
 800704e:	4411      	add	r1, r2
 8007050:	f8d9 2000 	ldr.w	r2, [r9]
 8007054:	0c24      	lsrs	r4, r4, #16
 8007056:	0c12      	lsrs	r2, r2, #16
 8007058:	fb0a 2404 	mla	r4, sl, r4, r2
 800705c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007060:	b289      	uxth	r1, r1
 8007062:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007066:	45f4      	cmp	ip, lr
 8007068:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800706c:	f849 1b04 	str.w	r1, [r9], #4
 8007070:	d8e4      	bhi.n	800703c <__multiply+0xa8>
 8007072:	9901      	ldr	r1, [sp, #4]
 8007074:	5072      	str	r2, [r6, r1]
 8007076:	9a03      	ldr	r2, [sp, #12]
 8007078:	3304      	adds	r3, #4
 800707a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800707e:	f1b9 0f00 	cmp.w	r9, #0
 8007082:	d01f      	beq.n	80070c4 <__multiply+0x130>
 8007084:	46b6      	mov	lr, r6
 8007086:	f04f 0a00 	mov.w	sl, #0
 800708a:	6834      	ldr	r4, [r6, #0]
 800708c:	f105 0114 	add.w	r1, r5, #20
 8007090:	880a      	ldrh	r2, [r1, #0]
 8007092:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007096:	b2a4      	uxth	r4, r4
 8007098:	fb09 b202 	mla	r2, r9, r2, fp
 800709c:	4492      	add	sl, r2
 800709e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070a2:	f84e 4b04 	str.w	r4, [lr], #4
 80070a6:	f851 4b04 	ldr.w	r4, [r1], #4
 80070aa:	f8be 2000 	ldrh.w	r2, [lr]
 80070ae:	0c24      	lsrs	r4, r4, #16
 80070b0:	fb09 2404 	mla	r4, r9, r4, r2
 80070b4:	458c      	cmp	ip, r1
 80070b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80070ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070be:	d8e7      	bhi.n	8007090 <__multiply+0xfc>
 80070c0:	9a01      	ldr	r2, [sp, #4]
 80070c2:	50b4      	str	r4, [r6, r2]
 80070c4:	3604      	adds	r6, #4
 80070c6:	e7a3      	b.n	8007010 <__multiply+0x7c>
 80070c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1a5      	bne.n	800701c <__multiply+0x88>
 80070d0:	3f01      	subs	r7, #1
 80070d2:	e7a1      	b.n	8007018 <__multiply+0x84>
 80070d4:	0800c64b 	.word	0x0800c64b
 80070d8:	0800c65c 	.word	0x0800c65c

080070dc <__pow5mult>:
 80070dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e0:	4615      	mov	r5, r2
 80070e2:	f012 0203 	ands.w	r2, r2, #3
 80070e6:	4606      	mov	r6, r0
 80070e8:	460f      	mov	r7, r1
 80070ea:	d007      	beq.n	80070fc <__pow5mult+0x20>
 80070ec:	4c25      	ldr	r4, [pc, #148]	; (8007184 <__pow5mult+0xa8>)
 80070ee:	3a01      	subs	r2, #1
 80070f0:	2300      	movs	r3, #0
 80070f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070f6:	f7ff fe9f 	bl	8006e38 <__multadd>
 80070fa:	4607      	mov	r7, r0
 80070fc:	10ad      	asrs	r5, r5, #2
 80070fe:	d03d      	beq.n	800717c <__pow5mult+0xa0>
 8007100:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007102:	b97c      	cbnz	r4, 8007124 <__pow5mult+0x48>
 8007104:	2010      	movs	r0, #16
 8007106:	f7ff fe11 	bl	8006d2c <malloc>
 800710a:	4602      	mov	r2, r0
 800710c:	6270      	str	r0, [r6, #36]	; 0x24
 800710e:	b928      	cbnz	r0, 800711c <__pow5mult+0x40>
 8007110:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007114:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <__pow5mult+0xac>)
 8007116:	481d      	ldr	r0, [pc, #116]	; (800718c <__pow5mult+0xb0>)
 8007118:	f000 fbce 	bl	80078b8 <__assert_func>
 800711c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007120:	6004      	str	r4, [r0, #0]
 8007122:	60c4      	str	r4, [r0, #12]
 8007124:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800712c:	b94c      	cbnz	r4, 8007142 <__pow5mult+0x66>
 800712e:	f240 2171 	movw	r1, #625	; 0x271
 8007132:	4630      	mov	r0, r6
 8007134:	f7ff ff18 	bl	8006f68 <__i2b>
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	07eb      	lsls	r3, r5, #31
 8007148:	d50a      	bpl.n	8007160 <__pow5mult+0x84>
 800714a:	4639      	mov	r1, r7
 800714c:	4622      	mov	r2, r4
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ff20 	bl	8006f94 <__multiply>
 8007154:	4680      	mov	r8, r0
 8007156:	4639      	mov	r1, r7
 8007158:	4630      	mov	r0, r6
 800715a:	f7ff fe4b 	bl	8006df4 <_Bfree>
 800715e:	4647      	mov	r7, r8
 8007160:	106d      	asrs	r5, r5, #1
 8007162:	d00b      	beq.n	800717c <__pow5mult+0xa0>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	b938      	cbnz	r0, 8007178 <__pow5mult+0x9c>
 8007168:	4622      	mov	r2, r4
 800716a:	4621      	mov	r1, r4
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff ff11 	bl	8006f94 <__multiply>
 8007172:	6020      	str	r0, [r4, #0]
 8007174:	f8c0 9000 	str.w	r9, [r0]
 8007178:	4604      	mov	r4, r0
 800717a:	e7e4      	b.n	8007146 <__pow5mult+0x6a>
 800717c:	4638      	mov	r0, r7
 800717e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007182:	bf00      	nop
 8007184:	0800c7b0 	.word	0x0800c7b0
 8007188:	0800c5d5 	.word	0x0800c5d5
 800718c:	0800c65c 	.word	0x0800c65c

08007190 <__lshift>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	460c      	mov	r4, r1
 8007196:	4607      	mov	r7, r0
 8007198:	4691      	mov	r9, r2
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6849      	ldr	r1, [r1, #4]
 800719e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071a8:	f108 0601 	add.w	r6, r8, #1
 80071ac:	42b3      	cmp	r3, r6
 80071ae:	db0b      	blt.n	80071c8 <__lshift+0x38>
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff fddf 	bl	8006d74 <_Balloc>
 80071b6:	4605      	mov	r5, r0
 80071b8:	b948      	cbnz	r0, 80071ce <__lshift+0x3e>
 80071ba:	4602      	mov	r2, r0
 80071bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071c0:	4b27      	ldr	r3, [pc, #156]	; (8007260 <__lshift+0xd0>)
 80071c2:	4828      	ldr	r0, [pc, #160]	; (8007264 <__lshift+0xd4>)
 80071c4:	f000 fb78 	bl	80078b8 <__assert_func>
 80071c8:	3101      	adds	r1, #1
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	e7ee      	b.n	80071ac <__lshift+0x1c>
 80071ce:	2300      	movs	r3, #0
 80071d0:	f100 0114 	add.w	r1, r0, #20
 80071d4:	f100 0210 	add.w	r2, r0, #16
 80071d8:	4618      	mov	r0, r3
 80071da:	4553      	cmp	r3, sl
 80071dc:	db33      	blt.n	8007246 <__lshift+0xb6>
 80071de:	6920      	ldr	r0, [r4, #16]
 80071e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071e4:	f104 0314 	add.w	r3, r4, #20
 80071e8:	f019 091f 	ands.w	r9, r9, #31
 80071ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071f4:	d02b      	beq.n	800724e <__lshift+0xbe>
 80071f6:	468a      	mov	sl, r1
 80071f8:	2200      	movs	r2, #0
 80071fa:	f1c9 0e20 	rsb	lr, r9, #32
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	fa00 f009 	lsl.w	r0, r0, r9
 8007204:	4302      	orrs	r2, r0
 8007206:	f84a 2b04 	str.w	r2, [sl], #4
 800720a:	f853 2b04 	ldr.w	r2, [r3], #4
 800720e:	459c      	cmp	ip, r3
 8007210:	fa22 f20e 	lsr.w	r2, r2, lr
 8007214:	d8f3      	bhi.n	80071fe <__lshift+0x6e>
 8007216:	ebac 0304 	sub.w	r3, ip, r4
 800721a:	3b15      	subs	r3, #21
 800721c:	f023 0303 	bic.w	r3, r3, #3
 8007220:	3304      	adds	r3, #4
 8007222:	f104 0015 	add.w	r0, r4, #21
 8007226:	4584      	cmp	ip, r0
 8007228:	bf38      	it	cc
 800722a:	2304      	movcc	r3, #4
 800722c:	50ca      	str	r2, [r1, r3]
 800722e:	b10a      	cbz	r2, 8007234 <__lshift+0xa4>
 8007230:	f108 0602 	add.w	r6, r8, #2
 8007234:	3e01      	subs	r6, #1
 8007236:	4638      	mov	r0, r7
 8007238:	4621      	mov	r1, r4
 800723a:	612e      	str	r6, [r5, #16]
 800723c:	f7ff fdda 	bl	8006df4 <_Bfree>
 8007240:	4628      	mov	r0, r5
 8007242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007246:	f842 0f04 	str.w	r0, [r2, #4]!
 800724a:	3301      	adds	r3, #1
 800724c:	e7c5      	b.n	80071da <__lshift+0x4a>
 800724e:	3904      	subs	r1, #4
 8007250:	f853 2b04 	ldr.w	r2, [r3], #4
 8007254:	459c      	cmp	ip, r3
 8007256:	f841 2f04 	str.w	r2, [r1, #4]!
 800725a:	d8f9      	bhi.n	8007250 <__lshift+0xc0>
 800725c:	e7ea      	b.n	8007234 <__lshift+0xa4>
 800725e:	bf00      	nop
 8007260:	0800c64b 	.word	0x0800c64b
 8007264:	0800c65c 	.word	0x0800c65c

08007268 <__mcmp>:
 8007268:	4603      	mov	r3, r0
 800726a:	690a      	ldr	r2, [r1, #16]
 800726c:	6900      	ldr	r0, [r0, #16]
 800726e:	b530      	push	{r4, r5, lr}
 8007270:	1a80      	subs	r0, r0, r2
 8007272:	d10d      	bne.n	8007290 <__mcmp+0x28>
 8007274:	3314      	adds	r3, #20
 8007276:	3114      	adds	r1, #20
 8007278:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800727c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007280:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007284:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007288:	4295      	cmp	r5, r2
 800728a:	d002      	beq.n	8007292 <__mcmp+0x2a>
 800728c:	d304      	bcc.n	8007298 <__mcmp+0x30>
 800728e:	2001      	movs	r0, #1
 8007290:	bd30      	pop	{r4, r5, pc}
 8007292:	42a3      	cmp	r3, r4
 8007294:	d3f4      	bcc.n	8007280 <__mcmp+0x18>
 8007296:	e7fb      	b.n	8007290 <__mcmp+0x28>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	e7f8      	b.n	8007290 <__mcmp+0x28>
	...

080072a0 <__mdiff>:
 80072a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	4606      	mov	r6, r0
 80072a8:	4611      	mov	r1, r2
 80072aa:	4620      	mov	r0, r4
 80072ac:	4692      	mov	sl, r2
 80072ae:	f7ff ffdb 	bl	8007268 <__mcmp>
 80072b2:	1e05      	subs	r5, r0, #0
 80072b4:	d111      	bne.n	80072da <__mdiff+0x3a>
 80072b6:	4629      	mov	r1, r5
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff fd5b 	bl	8006d74 <_Balloc>
 80072be:	4602      	mov	r2, r0
 80072c0:	b928      	cbnz	r0, 80072ce <__mdiff+0x2e>
 80072c2:	f240 2132 	movw	r1, #562	; 0x232
 80072c6:	4b3c      	ldr	r3, [pc, #240]	; (80073b8 <__mdiff+0x118>)
 80072c8:	483c      	ldr	r0, [pc, #240]	; (80073bc <__mdiff+0x11c>)
 80072ca:	f000 faf5 	bl	80078b8 <__assert_func>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072d4:	4610      	mov	r0, r2
 80072d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072da:	bfa4      	itt	ge
 80072dc:	4653      	movge	r3, sl
 80072de:	46a2      	movge	sl, r4
 80072e0:	4630      	mov	r0, r6
 80072e2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80072e6:	bfa6      	itte	ge
 80072e8:	461c      	movge	r4, r3
 80072ea:	2500      	movge	r5, #0
 80072ec:	2501      	movlt	r5, #1
 80072ee:	f7ff fd41 	bl	8006d74 <_Balloc>
 80072f2:	4602      	mov	r2, r0
 80072f4:	b918      	cbnz	r0, 80072fe <__mdiff+0x5e>
 80072f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <__mdiff+0x118>)
 80072fc:	e7e4      	b.n	80072c8 <__mdiff+0x28>
 80072fe:	f100 0814 	add.w	r8, r0, #20
 8007302:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007306:	60c5      	str	r5, [r0, #12]
 8007308:	f04f 0c00 	mov.w	ip, #0
 800730c:	f10a 0514 	add.w	r5, sl, #20
 8007310:	f10a 0010 	add.w	r0, sl, #16
 8007314:	46c2      	mov	sl, r8
 8007316:	6926      	ldr	r6, [r4, #16]
 8007318:	f104 0914 	add.w	r9, r4, #20
 800731c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007324:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007328:	f859 3b04 	ldr.w	r3, [r9], #4
 800732c:	fa1f f18b 	uxth.w	r1, fp
 8007330:	4461      	add	r1, ip
 8007332:	fa1f fc83 	uxth.w	ip, r3
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	eba1 010c 	sub.w	r1, r1, ip
 800733c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007340:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007344:	b289      	uxth	r1, r1
 8007346:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800734a:	454e      	cmp	r6, r9
 800734c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007350:	f84a 3b04 	str.w	r3, [sl], #4
 8007354:	d8e6      	bhi.n	8007324 <__mdiff+0x84>
 8007356:	1b33      	subs	r3, r6, r4
 8007358:	3b15      	subs	r3, #21
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	3415      	adds	r4, #21
 8007360:	3304      	adds	r3, #4
 8007362:	42a6      	cmp	r6, r4
 8007364:	bf38      	it	cc
 8007366:	2304      	movcc	r3, #4
 8007368:	441d      	add	r5, r3
 800736a:	4443      	add	r3, r8
 800736c:	461e      	mov	r6, r3
 800736e:	462c      	mov	r4, r5
 8007370:	4574      	cmp	r4, lr
 8007372:	d30e      	bcc.n	8007392 <__mdiff+0xf2>
 8007374:	f10e 0103 	add.w	r1, lr, #3
 8007378:	1b49      	subs	r1, r1, r5
 800737a:	f021 0103 	bic.w	r1, r1, #3
 800737e:	3d03      	subs	r5, #3
 8007380:	45ae      	cmp	lr, r5
 8007382:	bf38      	it	cc
 8007384:	2100      	movcc	r1, #0
 8007386:	4419      	add	r1, r3
 8007388:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800738c:	b18b      	cbz	r3, 80073b2 <__mdiff+0x112>
 800738e:	6117      	str	r7, [r2, #16]
 8007390:	e7a0      	b.n	80072d4 <__mdiff+0x34>
 8007392:	f854 8b04 	ldr.w	r8, [r4], #4
 8007396:	fa1f f188 	uxth.w	r1, r8
 800739a:	4461      	add	r1, ip
 800739c:	1408      	asrs	r0, r1, #16
 800739e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80073a2:	b289      	uxth	r1, r1
 80073a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073ac:	f846 1b04 	str.w	r1, [r6], #4
 80073b0:	e7de      	b.n	8007370 <__mdiff+0xd0>
 80073b2:	3f01      	subs	r7, #1
 80073b4:	e7e8      	b.n	8007388 <__mdiff+0xe8>
 80073b6:	bf00      	nop
 80073b8:	0800c64b 	.word	0x0800c64b
 80073bc:	0800c65c 	.word	0x0800c65c

080073c0 <__d2b>:
 80073c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073c4:	2101      	movs	r1, #1
 80073c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80073ca:	4690      	mov	r8, r2
 80073cc:	461d      	mov	r5, r3
 80073ce:	f7ff fcd1 	bl	8006d74 <_Balloc>
 80073d2:	4604      	mov	r4, r0
 80073d4:	b930      	cbnz	r0, 80073e4 <__d2b+0x24>
 80073d6:	4602      	mov	r2, r0
 80073d8:	f240 310a 	movw	r1, #778	; 0x30a
 80073dc:	4b24      	ldr	r3, [pc, #144]	; (8007470 <__d2b+0xb0>)
 80073de:	4825      	ldr	r0, [pc, #148]	; (8007474 <__d2b+0xb4>)
 80073e0:	f000 fa6a 	bl	80078b8 <__assert_func>
 80073e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80073e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80073ec:	bb2d      	cbnz	r5, 800743a <__d2b+0x7a>
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	f1b8 0300 	subs.w	r3, r8, #0
 80073f4:	d026      	beq.n	8007444 <__d2b+0x84>
 80073f6:	4668      	mov	r0, sp
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	f7ff fd87 	bl	8006f0c <__lo0bits>
 80073fe:	9900      	ldr	r1, [sp, #0]
 8007400:	b1f0      	cbz	r0, 8007440 <__d2b+0x80>
 8007402:	9a01      	ldr	r2, [sp, #4]
 8007404:	f1c0 0320 	rsb	r3, r0, #32
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	430b      	orrs	r3, r1
 800740e:	40c2      	lsrs	r2, r0
 8007410:	6163      	str	r3, [r4, #20]
 8007412:	9201      	str	r2, [sp, #4]
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bf14      	ite	ne
 800741a:	2102      	movne	r1, #2
 800741c:	2101      	moveq	r1, #1
 800741e:	61a3      	str	r3, [r4, #24]
 8007420:	6121      	str	r1, [r4, #16]
 8007422:	b1c5      	cbz	r5, 8007456 <__d2b+0x96>
 8007424:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007428:	4405      	add	r5, r0
 800742a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800742e:	603d      	str	r5, [r7, #0]
 8007430:	6030      	str	r0, [r6, #0]
 8007432:	4620      	mov	r0, r4
 8007434:	b002      	add	sp, #8
 8007436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800743e:	e7d6      	b.n	80073ee <__d2b+0x2e>
 8007440:	6161      	str	r1, [r4, #20]
 8007442:	e7e7      	b.n	8007414 <__d2b+0x54>
 8007444:	a801      	add	r0, sp, #4
 8007446:	f7ff fd61 	bl	8006f0c <__lo0bits>
 800744a:	2101      	movs	r1, #1
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	6121      	str	r1, [r4, #16]
 8007450:	6163      	str	r3, [r4, #20]
 8007452:	3020      	adds	r0, #32
 8007454:	e7e5      	b.n	8007422 <__d2b+0x62>
 8007456:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800745a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800745e:	6038      	str	r0, [r7, #0]
 8007460:	6918      	ldr	r0, [r3, #16]
 8007462:	f7ff fd33 	bl	8006ecc <__hi0bits>
 8007466:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800746a:	6031      	str	r1, [r6, #0]
 800746c:	e7e1      	b.n	8007432 <__d2b+0x72>
 800746e:	bf00      	nop
 8007470:	0800c64b 	.word	0x0800c64b
 8007474:	0800c65c 	.word	0x0800c65c

08007478 <_calloc_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	fb02 f501 	mul.w	r5, r2, r1
 800747e:	4629      	mov	r1, r5
 8007480:	f000 f854 	bl	800752c <_malloc_r>
 8007484:	4604      	mov	r4, r0
 8007486:	b118      	cbz	r0, 8007490 <_calloc_r+0x18>
 8007488:	462a      	mov	r2, r5
 800748a:	2100      	movs	r1, #0
 800748c:	f7fe f912 	bl	80056b4 <memset>
 8007490:	4620      	mov	r0, r4
 8007492:	bd38      	pop	{r3, r4, r5, pc}

08007494 <_free_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4605      	mov	r5, r0
 8007498:	2900      	cmp	r1, #0
 800749a:	d043      	beq.n	8007524 <_free_r+0x90>
 800749c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a0:	1f0c      	subs	r4, r1, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bfb8      	it	lt
 80074a6:	18e4      	addlt	r4, r4, r3
 80074a8:	f000 fa62 	bl	8007970 <__malloc_lock>
 80074ac:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <_free_r+0x94>)
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	4610      	mov	r0, r2
 80074b2:	b933      	cbnz	r3, 80074c2 <_free_r+0x2e>
 80074b4:	6063      	str	r3, [r4, #4]
 80074b6:	6014      	str	r4, [r2, #0]
 80074b8:	4628      	mov	r0, r5
 80074ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074be:	f000 ba5d 	b.w	800797c <__malloc_unlock>
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	d90a      	bls.n	80074dc <_free_r+0x48>
 80074c6:	6821      	ldr	r1, [r4, #0]
 80074c8:	1862      	adds	r2, r4, r1
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bf01      	itttt	eq
 80074ce:	681a      	ldreq	r2, [r3, #0]
 80074d0:	685b      	ldreq	r3, [r3, #4]
 80074d2:	1852      	addeq	r2, r2, r1
 80074d4:	6022      	streq	r2, [r4, #0]
 80074d6:	6063      	str	r3, [r4, #4]
 80074d8:	6004      	str	r4, [r0, #0]
 80074da:	e7ed      	b.n	80074b8 <_free_r+0x24>
 80074dc:	461a      	mov	r2, r3
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	b10b      	cbz	r3, 80074e6 <_free_r+0x52>
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	d9fa      	bls.n	80074dc <_free_r+0x48>
 80074e6:	6811      	ldr	r1, [r2, #0]
 80074e8:	1850      	adds	r0, r2, r1
 80074ea:	42a0      	cmp	r0, r4
 80074ec:	d10b      	bne.n	8007506 <_free_r+0x72>
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	4401      	add	r1, r0
 80074f2:	1850      	adds	r0, r2, r1
 80074f4:	4283      	cmp	r3, r0
 80074f6:	6011      	str	r1, [r2, #0]
 80074f8:	d1de      	bne.n	80074b8 <_free_r+0x24>
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4401      	add	r1, r0
 8007500:	6011      	str	r1, [r2, #0]
 8007502:	6053      	str	r3, [r2, #4]
 8007504:	e7d8      	b.n	80074b8 <_free_r+0x24>
 8007506:	d902      	bls.n	800750e <_free_r+0x7a>
 8007508:	230c      	movs	r3, #12
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	e7d4      	b.n	80074b8 <_free_r+0x24>
 800750e:	6820      	ldr	r0, [r4, #0]
 8007510:	1821      	adds	r1, r4, r0
 8007512:	428b      	cmp	r3, r1
 8007514:	bf01      	itttt	eq
 8007516:	6819      	ldreq	r1, [r3, #0]
 8007518:	685b      	ldreq	r3, [r3, #4]
 800751a:	1809      	addeq	r1, r1, r0
 800751c:	6021      	streq	r1, [r4, #0]
 800751e:	6063      	str	r3, [r4, #4]
 8007520:	6054      	str	r4, [r2, #4]
 8007522:	e7c9      	b.n	80074b8 <_free_r+0x24>
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	bf00      	nop
 8007528:	200003ec 	.word	0x200003ec

0800752c <_malloc_r>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	1ccd      	adds	r5, r1, #3
 8007530:	f025 0503 	bic.w	r5, r5, #3
 8007534:	3508      	adds	r5, #8
 8007536:	2d0c      	cmp	r5, #12
 8007538:	bf38      	it	cc
 800753a:	250c      	movcc	r5, #12
 800753c:	2d00      	cmp	r5, #0
 800753e:	4606      	mov	r6, r0
 8007540:	db01      	blt.n	8007546 <_malloc_r+0x1a>
 8007542:	42a9      	cmp	r1, r5
 8007544:	d903      	bls.n	800754e <_malloc_r+0x22>
 8007546:	230c      	movs	r3, #12
 8007548:	6033      	str	r3, [r6, #0]
 800754a:	2000      	movs	r0, #0
 800754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754e:	f000 fa0f 	bl	8007970 <__malloc_lock>
 8007552:	4921      	ldr	r1, [pc, #132]	; (80075d8 <_malloc_r+0xac>)
 8007554:	680a      	ldr	r2, [r1, #0]
 8007556:	4614      	mov	r4, r2
 8007558:	b99c      	cbnz	r4, 8007582 <_malloc_r+0x56>
 800755a:	4f20      	ldr	r7, [pc, #128]	; (80075dc <_malloc_r+0xb0>)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	b923      	cbnz	r3, 800756a <_malloc_r+0x3e>
 8007560:	4621      	mov	r1, r4
 8007562:	4630      	mov	r0, r6
 8007564:	f000 f998 	bl	8007898 <_sbrk_r>
 8007568:	6038      	str	r0, [r7, #0]
 800756a:	4629      	mov	r1, r5
 800756c:	4630      	mov	r0, r6
 800756e:	f000 f993 	bl	8007898 <_sbrk_r>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d123      	bne.n	80075be <_malloc_r+0x92>
 8007576:	230c      	movs	r3, #12
 8007578:	4630      	mov	r0, r6
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	f000 f9fe 	bl	800797c <__malloc_unlock>
 8007580:	e7e3      	b.n	800754a <_malloc_r+0x1e>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	1b5b      	subs	r3, r3, r5
 8007586:	d417      	bmi.n	80075b8 <_malloc_r+0x8c>
 8007588:	2b0b      	cmp	r3, #11
 800758a:	d903      	bls.n	8007594 <_malloc_r+0x68>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	441c      	add	r4, r3
 8007590:	6025      	str	r5, [r4, #0]
 8007592:	e004      	b.n	800759e <_malloc_r+0x72>
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	42a2      	cmp	r2, r4
 8007598:	bf0c      	ite	eq
 800759a:	600b      	streq	r3, [r1, #0]
 800759c:	6053      	strne	r3, [r2, #4]
 800759e:	4630      	mov	r0, r6
 80075a0:	f000 f9ec 	bl	800797c <__malloc_unlock>
 80075a4:	f104 000b 	add.w	r0, r4, #11
 80075a8:	1d23      	adds	r3, r4, #4
 80075aa:	f020 0007 	bic.w	r0, r0, #7
 80075ae:	1ac2      	subs	r2, r0, r3
 80075b0:	d0cc      	beq.n	800754c <_malloc_r+0x20>
 80075b2:	1a1b      	subs	r3, r3, r0
 80075b4:	50a3      	str	r3, [r4, r2]
 80075b6:	e7c9      	b.n	800754c <_malloc_r+0x20>
 80075b8:	4622      	mov	r2, r4
 80075ba:	6864      	ldr	r4, [r4, #4]
 80075bc:	e7cc      	b.n	8007558 <_malloc_r+0x2c>
 80075be:	1cc4      	adds	r4, r0, #3
 80075c0:	f024 0403 	bic.w	r4, r4, #3
 80075c4:	42a0      	cmp	r0, r4
 80075c6:	d0e3      	beq.n	8007590 <_malloc_r+0x64>
 80075c8:	1a21      	subs	r1, r4, r0
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 f964 	bl	8007898 <_sbrk_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d1dd      	bne.n	8007590 <_malloc_r+0x64>
 80075d4:	e7cf      	b.n	8007576 <_malloc_r+0x4a>
 80075d6:	bf00      	nop
 80075d8:	200003ec 	.word	0x200003ec
 80075dc:	200003f0 	.word	0x200003f0

080075e0 <__ssputs_r>:
 80075e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e4:	688e      	ldr	r6, [r1, #8]
 80075e6:	4682      	mov	sl, r0
 80075e8:	429e      	cmp	r6, r3
 80075ea:	460c      	mov	r4, r1
 80075ec:	4690      	mov	r8, r2
 80075ee:	461f      	mov	r7, r3
 80075f0:	d838      	bhi.n	8007664 <__ssputs_r+0x84>
 80075f2:	898a      	ldrh	r2, [r1, #12]
 80075f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075f8:	d032      	beq.n	8007660 <__ssputs_r+0x80>
 80075fa:	6825      	ldr	r5, [r4, #0]
 80075fc:	6909      	ldr	r1, [r1, #16]
 80075fe:	3301      	adds	r3, #1
 8007600:	eba5 0901 	sub.w	r9, r5, r1
 8007604:	6965      	ldr	r5, [r4, #20]
 8007606:	444b      	add	r3, r9
 8007608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800760c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007610:	106d      	asrs	r5, r5, #1
 8007612:	429d      	cmp	r5, r3
 8007614:	bf38      	it	cc
 8007616:	461d      	movcc	r5, r3
 8007618:	0553      	lsls	r3, r2, #21
 800761a:	d531      	bpl.n	8007680 <__ssputs_r+0xa0>
 800761c:	4629      	mov	r1, r5
 800761e:	f7ff ff85 	bl	800752c <_malloc_r>
 8007622:	4606      	mov	r6, r0
 8007624:	b950      	cbnz	r0, 800763c <__ssputs_r+0x5c>
 8007626:	230c      	movs	r3, #12
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	f8ca 3000 	str.w	r3, [sl]
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763c:	464a      	mov	r2, r9
 800763e:	6921      	ldr	r1, [r4, #16]
 8007640:	f7ff fb8a 	bl	8006d58 <memcpy>
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800764a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	6126      	str	r6, [r4, #16]
 8007652:	444e      	add	r6, r9
 8007654:	6026      	str	r6, [r4, #0]
 8007656:	463e      	mov	r6, r7
 8007658:	6165      	str	r5, [r4, #20]
 800765a:	eba5 0509 	sub.w	r5, r5, r9
 800765e:	60a5      	str	r5, [r4, #8]
 8007660:	42be      	cmp	r6, r7
 8007662:	d900      	bls.n	8007666 <__ssputs_r+0x86>
 8007664:	463e      	mov	r6, r7
 8007666:	4632      	mov	r2, r6
 8007668:	4641      	mov	r1, r8
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	f000 f966 	bl	800793c <memmove>
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	4432      	add	r2, r6
 8007678:	2000      	movs	r0, #0
 800767a:	60a3      	str	r3, [r4, #8]
 800767c:	6022      	str	r2, [r4, #0]
 800767e:	e7db      	b.n	8007638 <__ssputs_r+0x58>
 8007680:	462a      	mov	r2, r5
 8007682:	f000 f981 	bl	8007988 <_realloc_r>
 8007686:	4606      	mov	r6, r0
 8007688:	2800      	cmp	r0, #0
 800768a:	d1e1      	bne.n	8007650 <__ssputs_r+0x70>
 800768c:	4650      	mov	r0, sl
 800768e:	6921      	ldr	r1, [r4, #16]
 8007690:	f7ff ff00 	bl	8007494 <_free_r>
 8007694:	e7c7      	b.n	8007626 <__ssputs_r+0x46>
	...

08007698 <_svfiprintf_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	4698      	mov	r8, r3
 800769e:	898b      	ldrh	r3, [r1, #12]
 80076a0:	4607      	mov	r7, r0
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	460d      	mov	r5, r1
 80076a6:	4614      	mov	r4, r2
 80076a8:	b09d      	sub	sp, #116	; 0x74
 80076aa:	d50e      	bpl.n	80076ca <_svfiprintf_r+0x32>
 80076ac:	690b      	ldr	r3, [r1, #16]
 80076ae:	b963      	cbnz	r3, 80076ca <_svfiprintf_r+0x32>
 80076b0:	2140      	movs	r1, #64	; 0x40
 80076b2:	f7ff ff3b 	bl	800752c <_malloc_r>
 80076b6:	6028      	str	r0, [r5, #0]
 80076b8:	6128      	str	r0, [r5, #16]
 80076ba:	b920      	cbnz	r0, 80076c6 <_svfiprintf_r+0x2e>
 80076bc:	230c      	movs	r3, #12
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	e0d1      	b.n	800786a <_svfiprintf_r+0x1d2>
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	616b      	str	r3, [r5, #20]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9309      	str	r3, [sp, #36]	; 0x24
 80076ce:	2320      	movs	r3, #32
 80076d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d4:	2330      	movs	r3, #48	; 0x30
 80076d6:	f04f 0901 	mov.w	r9, #1
 80076da:	f8cd 800c 	str.w	r8, [sp, #12]
 80076de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007884 <_svfiprintf_r+0x1ec>
 80076e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e6:	4623      	mov	r3, r4
 80076e8:	469a      	mov	sl, r3
 80076ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ee:	b10a      	cbz	r2, 80076f4 <_svfiprintf_r+0x5c>
 80076f0:	2a25      	cmp	r2, #37	; 0x25
 80076f2:	d1f9      	bne.n	80076e8 <_svfiprintf_r+0x50>
 80076f4:	ebba 0b04 	subs.w	fp, sl, r4
 80076f8:	d00b      	beq.n	8007712 <_svfiprintf_r+0x7a>
 80076fa:	465b      	mov	r3, fp
 80076fc:	4622      	mov	r2, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ff6d 	bl	80075e0 <__ssputs_r>
 8007706:	3001      	adds	r0, #1
 8007708:	f000 80aa 	beq.w	8007860 <_svfiprintf_r+0x1c8>
 800770c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800770e:	445a      	add	r2, fp
 8007710:	9209      	str	r2, [sp, #36]	; 0x24
 8007712:	f89a 3000 	ldrb.w	r3, [sl]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80a2 	beq.w	8007860 <_svfiprintf_r+0x1c8>
 800771c:	2300      	movs	r3, #0
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007726:	f10a 0a01 	add.w	sl, sl, #1
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	9307      	str	r3, [sp, #28]
 800772e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007732:	931a      	str	r3, [sp, #104]	; 0x68
 8007734:	4654      	mov	r4, sl
 8007736:	2205      	movs	r2, #5
 8007738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773c:	4851      	ldr	r0, [pc, #324]	; (8007884 <_svfiprintf_r+0x1ec>)
 800773e:	f7ff fafd 	bl	8006d3c <memchr>
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	b9d8      	cbnz	r0, 800777e <_svfiprintf_r+0xe6>
 8007746:	06d0      	lsls	r0, r2, #27
 8007748:	bf44      	itt	mi
 800774a:	2320      	movmi	r3, #32
 800774c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007750:	0711      	lsls	r1, r2, #28
 8007752:	bf44      	itt	mi
 8007754:	232b      	movmi	r3, #43	; 0x2b
 8007756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800775a:	f89a 3000 	ldrb.w	r3, [sl]
 800775e:	2b2a      	cmp	r3, #42	; 0x2a
 8007760:	d015      	beq.n	800778e <_svfiprintf_r+0xf6>
 8007762:	4654      	mov	r4, sl
 8007764:	2000      	movs	r0, #0
 8007766:	f04f 0c0a 	mov.w	ip, #10
 800776a:	9a07      	ldr	r2, [sp, #28]
 800776c:	4621      	mov	r1, r4
 800776e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007772:	3b30      	subs	r3, #48	; 0x30
 8007774:	2b09      	cmp	r3, #9
 8007776:	d94e      	bls.n	8007816 <_svfiprintf_r+0x17e>
 8007778:	b1b0      	cbz	r0, 80077a8 <_svfiprintf_r+0x110>
 800777a:	9207      	str	r2, [sp, #28]
 800777c:	e014      	b.n	80077a8 <_svfiprintf_r+0x110>
 800777e:	eba0 0308 	sub.w	r3, r0, r8
 8007782:	fa09 f303 	lsl.w	r3, r9, r3
 8007786:	4313      	orrs	r3, r2
 8007788:	46a2      	mov	sl, r4
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	e7d2      	b.n	8007734 <_svfiprintf_r+0x9c>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d19      	adds	r1, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9103      	str	r1, [sp, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfbb      	ittet	lt
 800779a:	425b      	neglt	r3, r3
 800779c:	f042 0202 	orrlt.w	r2, r2, #2
 80077a0:	9307      	strge	r3, [sp, #28]
 80077a2:	9307      	strlt	r3, [sp, #28]
 80077a4:	bfb8      	it	lt
 80077a6:	9204      	strlt	r2, [sp, #16]
 80077a8:	7823      	ldrb	r3, [r4, #0]
 80077aa:	2b2e      	cmp	r3, #46	; 0x2e
 80077ac:	d10c      	bne.n	80077c8 <_svfiprintf_r+0x130>
 80077ae:	7863      	ldrb	r3, [r4, #1]
 80077b0:	2b2a      	cmp	r3, #42	; 0x2a
 80077b2:	d135      	bne.n	8007820 <_svfiprintf_r+0x188>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3402      	adds	r4, #2
 80077b8:	1d1a      	adds	r2, r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	9203      	str	r2, [sp, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfb8      	it	lt
 80077c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007894 <_svfiprintf_r+0x1fc>
 80077cc:	2203      	movs	r2, #3
 80077ce:	4650      	mov	r0, sl
 80077d0:	7821      	ldrb	r1, [r4, #0]
 80077d2:	f7ff fab3 	bl	8006d3c <memchr>
 80077d6:	b140      	cbz	r0, 80077ea <_svfiprintf_r+0x152>
 80077d8:	2340      	movs	r3, #64	; 0x40
 80077da:	eba0 000a 	sub.w	r0, r0, sl
 80077de:	fa03 f000 	lsl.w	r0, r3, r0
 80077e2:	9b04      	ldr	r3, [sp, #16]
 80077e4:	3401      	adds	r4, #1
 80077e6:	4303      	orrs	r3, r0
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	2206      	movs	r2, #6
 80077f0:	4825      	ldr	r0, [pc, #148]	; (8007888 <_svfiprintf_r+0x1f0>)
 80077f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077f6:	f7ff faa1 	bl	8006d3c <memchr>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d038      	beq.n	8007870 <_svfiprintf_r+0x1d8>
 80077fe:	4b23      	ldr	r3, [pc, #140]	; (800788c <_svfiprintf_r+0x1f4>)
 8007800:	bb1b      	cbnz	r3, 800784a <_svfiprintf_r+0x1b2>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	3307      	adds	r3, #7
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	3308      	adds	r3, #8
 800780c:	9303      	str	r3, [sp, #12]
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	4433      	add	r3, r6
 8007812:	9309      	str	r3, [sp, #36]	; 0x24
 8007814:	e767      	b.n	80076e6 <_svfiprintf_r+0x4e>
 8007816:	460c      	mov	r4, r1
 8007818:	2001      	movs	r0, #1
 800781a:	fb0c 3202 	mla	r2, ip, r2, r3
 800781e:	e7a5      	b.n	800776c <_svfiprintf_r+0xd4>
 8007820:	2300      	movs	r3, #0
 8007822:	f04f 0c0a 	mov.w	ip, #10
 8007826:	4619      	mov	r1, r3
 8007828:	3401      	adds	r4, #1
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	4620      	mov	r0, r4
 800782e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007832:	3a30      	subs	r2, #48	; 0x30
 8007834:	2a09      	cmp	r2, #9
 8007836:	d903      	bls.n	8007840 <_svfiprintf_r+0x1a8>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0c5      	beq.n	80077c8 <_svfiprintf_r+0x130>
 800783c:	9105      	str	r1, [sp, #20]
 800783e:	e7c3      	b.n	80077c8 <_svfiprintf_r+0x130>
 8007840:	4604      	mov	r4, r0
 8007842:	2301      	movs	r3, #1
 8007844:	fb0c 2101 	mla	r1, ip, r1, r2
 8007848:	e7f0      	b.n	800782c <_svfiprintf_r+0x194>
 800784a:	ab03      	add	r3, sp, #12
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	462a      	mov	r2, r5
 8007850:	4638      	mov	r0, r7
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <_svfiprintf_r+0x1f8>)
 8007854:	a904      	add	r1, sp, #16
 8007856:	f7fd ffd3 	bl	8005800 <_printf_float>
 800785a:	1c42      	adds	r2, r0, #1
 800785c:	4606      	mov	r6, r0
 800785e:	d1d6      	bne.n	800780e <_svfiprintf_r+0x176>
 8007860:	89ab      	ldrh	r3, [r5, #12]
 8007862:	065b      	lsls	r3, r3, #25
 8007864:	f53f af2c 	bmi.w	80076c0 <_svfiprintf_r+0x28>
 8007868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800786a:	b01d      	add	sp, #116	; 0x74
 800786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007870:	ab03      	add	r3, sp, #12
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	462a      	mov	r2, r5
 8007876:	4638      	mov	r0, r7
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <_svfiprintf_r+0x1f8>)
 800787a:	a904      	add	r1, sp, #16
 800787c:	f7fe fa5c 	bl	8005d38 <_printf_i>
 8007880:	e7eb      	b.n	800785a <_svfiprintf_r+0x1c2>
 8007882:	bf00      	nop
 8007884:	0800c7bc 	.word	0x0800c7bc
 8007888:	0800c7c6 	.word	0x0800c7c6
 800788c:	08005801 	.word	0x08005801
 8007890:	080075e1 	.word	0x080075e1
 8007894:	0800c7c2 	.word	0x0800c7c2

08007898 <_sbrk_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d05      	ldr	r5, [pc, #20]	; (80078b4 <_sbrk_r+0x1c>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	f000 fe94 	bl	80085d0 <_sbrk>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_sbrk_r+0x1a>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_sbrk_r+0x1a>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	200006e0 	.word	0x200006e0

080078b8 <__assert_func>:
 80078b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ba:	4614      	mov	r4, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <__assert_func+0x2c>)
 80078c0:	4605      	mov	r5, r0
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68d8      	ldr	r0, [r3, #12]
 80078c6:	b14c      	cbz	r4, 80078dc <__assert_func+0x24>
 80078c8:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <__assert_func+0x30>)
 80078ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078ce:	9100      	str	r1, [sp, #0]
 80078d0:	462b      	mov	r3, r5
 80078d2:	4906      	ldr	r1, [pc, #24]	; (80078ec <__assert_func+0x34>)
 80078d4:	f000 f80e 	bl	80078f4 <fiprintf>
 80078d8:	f000 faa2 	bl	8007e20 <abort>
 80078dc:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <__assert_func+0x38>)
 80078de:	461c      	mov	r4, r3
 80078e0:	e7f3      	b.n	80078ca <__assert_func+0x12>
 80078e2:	bf00      	nop
 80078e4:	2000004c 	.word	0x2000004c
 80078e8:	0800c7cd 	.word	0x0800c7cd
 80078ec:	0800c7da 	.word	0x0800c7da
 80078f0:	0800c808 	.word	0x0800c808

080078f4 <fiprintf>:
 80078f4:	b40e      	push	{r1, r2, r3}
 80078f6:	b503      	push	{r0, r1, lr}
 80078f8:	4601      	mov	r1, r0
 80078fa:	ab03      	add	r3, sp, #12
 80078fc:	4805      	ldr	r0, [pc, #20]	; (8007914 <fiprintf+0x20>)
 80078fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007902:	6800      	ldr	r0, [r0, #0]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	f000 f88d 	bl	8007a24 <_vfiprintf_r>
 800790a:	b002      	add	sp, #8
 800790c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007910:	b003      	add	sp, #12
 8007912:	4770      	bx	lr
 8007914:	2000004c 	.word	0x2000004c

08007918 <__ascii_mbtowc>:
 8007918:	b082      	sub	sp, #8
 800791a:	b901      	cbnz	r1, 800791e <__ascii_mbtowc+0x6>
 800791c:	a901      	add	r1, sp, #4
 800791e:	b142      	cbz	r2, 8007932 <__ascii_mbtowc+0x1a>
 8007920:	b14b      	cbz	r3, 8007936 <__ascii_mbtowc+0x1e>
 8007922:	7813      	ldrb	r3, [r2, #0]
 8007924:	600b      	str	r3, [r1, #0]
 8007926:	7812      	ldrb	r2, [r2, #0]
 8007928:	1e10      	subs	r0, r2, #0
 800792a:	bf18      	it	ne
 800792c:	2001      	movne	r0, #1
 800792e:	b002      	add	sp, #8
 8007930:	4770      	bx	lr
 8007932:	4610      	mov	r0, r2
 8007934:	e7fb      	b.n	800792e <__ascii_mbtowc+0x16>
 8007936:	f06f 0001 	mvn.w	r0, #1
 800793a:	e7f8      	b.n	800792e <__ascii_mbtowc+0x16>

0800793c <memmove>:
 800793c:	4288      	cmp	r0, r1
 800793e:	b510      	push	{r4, lr}
 8007940:	eb01 0402 	add.w	r4, r1, r2
 8007944:	d902      	bls.n	800794c <memmove+0x10>
 8007946:	4284      	cmp	r4, r0
 8007948:	4623      	mov	r3, r4
 800794a:	d807      	bhi.n	800795c <memmove+0x20>
 800794c:	1e43      	subs	r3, r0, #1
 800794e:	42a1      	cmp	r1, r4
 8007950:	d008      	beq.n	8007964 <memmove+0x28>
 8007952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800795a:	e7f8      	b.n	800794e <memmove+0x12>
 800795c:	4601      	mov	r1, r0
 800795e:	4402      	add	r2, r0
 8007960:	428a      	cmp	r2, r1
 8007962:	d100      	bne.n	8007966 <memmove+0x2a>
 8007964:	bd10      	pop	{r4, pc}
 8007966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800796e:	e7f7      	b.n	8007960 <memmove+0x24>

08007970 <__malloc_lock>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__malloc_lock+0x8>)
 8007972:	f000 bc15 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	200006e8 	.word	0x200006e8

0800797c <__malloc_unlock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_unlock+0x8>)
 800797e:	f000 bc10 	b.w	80081a2 <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	200006e8 	.word	0x200006e8

08007988 <_realloc_r>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	4607      	mov	r7, r0
 800798c:	4614      	mov	r4, r2
 800798e:	460e      	mov	r6, r1
 8007990:	b921      	cbnz	r1, 800799c <_realloc_r+0x14>
 8007992:	4611      	mov	r1, r2
 8007994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007998:	f7ff bdc8 	b.w	800752c <_malloc_r>
 800799c:	b922      	cbnz	r2, 80079a8 <_realloc_r+0x20>
 800799e:	f7ff fd79 	bl	8007494 <_free_r>
 80079a2:	4625      	mov	r5, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a8:	f000 fc60 	bl	800826c <_malloc_usable_size_r>
 80079ac:	42a0      	cmp	r0, r4
 80079ae:	d20f      	bcs.n	80079d0 <_realloc_r+0x48>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4638      	mov	r0, r7
 80079b4:	f7ff fdba 	bl	800752c <_malloc_r>
 80079b8:	4605      	mov	r5, r0
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d0f2      	beq.n	80079a4 <_realloc_r+0x1c>
 80079be:	4631      	mov	r1, r6
 80079c0:	4622      	mov	r2, r4
 80079c2:	f7ff f9c9 	bl	8006d58 <memcpy>
 80079c6:	4631      	mov	r1, r6
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff fd63 	bl	8007494 <_free_r>
 80079ce:	e7e9      	b.n	80079a4 <_realloc_r+0x1c>
 80079d0:	4635      	mov	r5, r6
 80079d2:	e7e7      	b.n	80079a4 <_realloc_r+0x1c>

080079d4 <__sfputc_r>:
 80079d4:	6893      	ldr	r3, [r2, #8]
 80079d6:	b410      	push	{r4}
 80079d8:	3b01      	subs	r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	6093      	str	r3, [r2, #8]
 80079de:	da07      	bge.n	80079f0 <__sfputc_r+0x1c>
 80079e0:	6994      	ldr	r4, [r2, #24]
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	db01      	blt.n	80079ea <__sfputc_r+0x16>
 80079e6:	290a      	cmp	r1, #10
 80079e8:	d102      	bne.n	80079f0 <__sfputc_r+0x1c>
 80079ea:	bc10      	pop	{r4}
 80079ec:	f000 b94a 	b.w	8007c84 <__swbuf_r>
 80079f0:	6813      	ldr	r3, [r2, #0]
 80079f2:	1c58      	adds	r0, r3, #1
 80079f4:	6010      	str	r0, [r2, #0]
 80079f6:	7019      	strb	r1, [r3, #0]
 80079f8:	4608      	mov	r0, r1
 80079fa:	bc10      	pop	{r4}
 80079fc:	4770      	bx	lr

080079fe <__sfputs_r>:
 80079fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	4614      	mov	r4, r2
 8007a06:	18d5      	adds	r5, r2, r3
 8007a08:	42ac      	cmp	r4, r5
 8007a0a:	d101      	bne.n	8007a10 <__sfputs_r+0x12>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e007      	b.n	8007a20 <__sfputs_r+0x22>
 8007a10:	463a      	mov	r2, r7
 8007a12:	4630      	mov	r0, r6
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	f7ff ffdc 	bl	80079d4 <__sfputc_r>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d1f3      	bne.n	8007a08 <__sfputs_r+0xa>
 8007a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a24 <_vfiprintf_r>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	460d      	mov	r5, r1
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	4698      	mov	r8, r3
 8007a2e:	4606      	mov	r6, r0
 8007a30:	b09d      	sub	sp, #116	; 0x74
 8007a32:	b118      	cbz	r0, 8007a3c <_vfiprintf_r+0x18>
 8007a34:	6983      	ldr	r3, [r0, #24]
 8007a36:	b90b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x18>
 8007a38:	f000 fb14 	bl	8008064 <__sinit>
 8007a3c:	4b89      	ldr	r3, [pc, #548]	; (8007c64 <_vfiprintf_r+0x240>)
 8007a3e:	429d      	cmp	r5, r3
 8007a40:	d11b      	bne.n	8007a7a <_vfiprintf_r+0x56>
 8007a42:	6875      	ldr	r5, [r6, #4]
 8007a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a46:	07d9      	lsls	r1, r3, #31
 8007a48:	d405      	bmi.n	8007a56 <_vfiprintf_r+0x32>
 8007a4a:	89ab      	ldrh	r3, [r5, #12]
 8007a4c:	059a      	lsls	r2, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_vfiprintf_r+0x32>
 8007a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a52:	f000 fba5 	bl	80081a0 <__retarget_lock_acquire_recursive>
 8007a56:	89ab      	ldrh	r3, [r5, #12]
 8007a58:	071b      	lsls	r3, r3, #28
 8007a5a:	d501      	bpl.n	8007a60 <_vfiprintf_r+0x3c>
 8007a5c:	692b      	ldr	r3, [r5, #16]
 8007a5e:	b9eb      	cbnz	r3, 8007a9c <_vfiprintf_r+0x78>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f96e 	bl	8007d44 <__swsetup_r>
 8007a68:	b1c0      	cbz	r0, 8007a9c <_vfiprintf_r+0x78>
 8007a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a6c:	07dc      	lsls	r4, r3, #31
 8007a6e:	d50e      	bpl.n	8007a8e <_vfiprintf_r+0x6a>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	b01d      	add	sp, #116	; 0x74
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	4b7b      	ldr	r3, [pc, #492]	; (8007c68 <_vfiprintf_r+0x244>)
 8007a7c:	429d      	cmp	r5, r3
 8007a7e:	d101      	bne.n	8007a84 <_vfiprintf_r+0x60>
 8007a80:	68b5      	ldr	r5, [r6, #8]
 8007a82:	e7df      	b.n	8007a44 <_vfiprintf_r+0x20>
 8007a84:	4b79      	ldr	r3, [pc, #484]	; (8007c6c <_vfiprintf_r+0x248>)
 8007a86:	429d      	cmp	r5, r3
 8007a88:	bf08      	it	eq
 8007a8a:	68f5      	ldreq	r5, [r6, #12]
 8007a8c:	e7da      	b.n	8007a44 <_vfiprintf_r+0x20>
 8007a8e:	89ab      	ldrh	r3, [r5, #12]
 8007a90:	0598      	lsls	r0, r3, #22
 8007a92:	d4ed      	bmi.n	8007a70 <_vfiprintf_r+0x4c>
 8007a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a96:	f000 fb84 	bl	80081a2 <__retarget_lock_release_recursive>
 8007a9a:	e7e9      	b.n	8007a70 <_vfiprintf_r+0x4c>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa6:	2330      	movs	r3, #48	; 0x30
 8007aa8:	f04f 0901 	mov.w	r9, #1
 8007aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c70 <_vfiprintf_r+0x24c>
 8007ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab8:	4623      	mov	r3, r4
 8007aba:	469a      	mov	sl, r3
 8007abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac0:	b10a      	cbz	r2, 8007ac6 <_vfiprintf_r+0xa2>
 8007ac2:	2a25      	cmp	r2, #37	; 0x25
 8007ac4:	d1f9      	bne.n	8007aba <_vfiprintf_r+0x96>
 8007ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aca:	d00b      	beq.n	8007ae4 <_vfiprintf_r+0xc0>
 8007acc:	465b      	mov	r3, fp
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ff93 	bl	80079fe <__sfputs_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f000 80aa 	beq.w	8007c32 <_vfiprintf_r+0x20e>
 8007ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae0:	445a      	add	r2, fp
 8007ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80a2 	beq.w	8007c32 <_vfiprintf_r+0x20e>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af8:	f10a 0a01 	add.w	sl, sl, #1
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b04:	931a      	str	r3, [sp, #104]	; 0x68
 8007b06:	4654      	mov	r4, sl
 8007b08:	2205      	movs	r2, #5
 8007b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0e:	4858      	ldr	r0, [pc, #352]	; (8007c70 <_vfiprintf_r+0x24c>)
 8007b10:	f7ff f914 	bl	8006d3c <memchr>
 8007b14:	9a04      	ldr	r2, [sp, #16]
 8007b16:	b9d8      	cbnz	r0, 8007b50 <_vfiprintf_r+0x12c>
 8007b18:	06d1      	lsls	r1, r2, #27
 8007b1a:	bf44      	itt	mi
 8007b1c:	2320      	movmi	r3, #32
 8007b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b22:	0713      	lsls	r3, r2, #28
 8007b24:	bf44      	itt	mi
 8007b26:	232b      	movmi	r3, #43	; 0x2b
 8007b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b30:	2b2a      	cmp	r3, #42	; 0x2a
 8007b32:	d015      	beq.n	8007b60 <_vfiprintf_r+0x13c>
 8007b34:	4654      	mov	r4, sl
 8007b36:	2000      	movs	r0, #0
 8007b38:	f04f 0c0a 	mov.w	ip, #10
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	4621      	mov	r1, r4
 8007b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b44:	3b30      	subs	r3, #48	; 0x30
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d94e      	bls.n	8007be8 <_vfiprintf_r+0x1c4>
 8007b4a:	b1b0      	cbz	r0, 8007b7a <_vfiprintf_r+0x156>
 8007b4c:	9207      	str	r2, [sp, #28]
 8007b4e:	e014      	b.n	8007b7a <_vfiprintf_r+0x156>
 8007b50:	eba0 0308 	sub.w	r3, r0, r8
 8007b54:	fa09 f303 	lsl.w	r3, r9, r3
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	46a2      	mov	sl, r4
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	e7d2      	b.n	8007b06 <_vfiprintf_r+0xe2>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	1d19      	adds	r1, r3, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	9103      	str	r1, [sp, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bfbb      	ittet	lt
 8007b6c:	425b      	neglt	r3, r3
 8007b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b72:	9307      	strge	r3, [sp, #28]
 8007b74:	9307      	strlt	r3, [sp, #28]
 8007b76:	bfb8      	it	lt
 8007b78:	9204      	strlt	r2, [sp, #16]
 8007b7a:	7823      	ldrb	r3, [r4, #0]
 8007b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b7e:	d10c      	bne.n	8007b9a <_vfiprintf_r+0x176>
 8007b80:	7863      	ldrb	r3, [r4, #1]
 8007b82:	2b2a      	cmp	r3, #42	; 0x2a
 8007b84:	d135      	bne.n	8007bf2 <_vfiprintf_r+0x1ce>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	3402      	adds	r4, #2
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	9203      	str	r2, [sp, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bfb8      	it	lt
 8007b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c80 <_vfiprintf_r+0x25c>
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	7821      	ldrb	r1, [r4, #0]
 8007ba4:	f7ff f8ca 	bl	8006d3c <memchr>
 8007ba8:	b140      	cbz	r0, 8007bbc <_vfiprintf_r+0x198>
 8007baa:	2340      	movs	r3, #64	; 0x40
 8007bac:	eba0 000a 	sub.w	r0, r0, sl
 8007bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	3401      	adds	r4, #1
 8007bb8:	4303      	orrs	r3, r0
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	482c      	ldr	r0, [pc, #176]	; (8007c74 <_vfiprintf_r+0x250>)
 8007bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc8:	f7ff f8b8 	bl	8006d3c <memchr>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d03f      	beq.n	8007c50 <_vfiprintf_r+0x22c>
 8007bd0:	4b29      	ldr	r3, [pc, #164]	; (8007c78 <_vfiprintf_r+0x254>)
 8007bd2:	bb1b      	cbnz	r3, 8007c1c <_vfiprintf_r+0x1f8>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	3307      	adds	r3, #7
 8007bd8:	f023 0307 	bic.w	r3, r3, #7
 8007bdc:	3308      	adds	r3, #8
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be2:	443b      	add	r3, r7
 8007be4:	9309      	str	r3, [sp, #36]	; 0x24
 8007be6:	e767      	b.n	8007ab8 <_vfiprintf_r+0x94>
 8007be8:	460c      	mov	r4, r1
 8007bea:	2001      	movs	r0, #1
 8007bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf0:	e7a5      	b.n	8007b3e <_vfiprintf_r+0x11a>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f04f 0c0a 	mov.w	ip, #10
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	3401      	adds	r4, #1
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c04:	3a30      	subs	r2, #48	; 0x30
 8007c06:	2a09      	cmp	r2, #9
 8007c08:	d903      	bls.n	8007c12 <_vfiprintf_r+0x1ee>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0c5      	beq.n	8007b9a <_vfiprintf_r+0x176>
 8007c0e:	9105      	str	r1, [sp, #20]
 8007c10:	e7c3      	b.n	8007b9a <_vfiprintf_r+0x176>
 8007c12:	4604      	mov	r4, r0
 8007c14:	2301      	movs	r3, #1
 8007c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c1a:	e7f0      	b.n	8007bfe <_vfiprintf_r+0x1da>
 8007c1c:	ab03      	add	r3, sp, #12
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	462a      	mov	r2, r5
 8007c22:	4630      	mov	r0, r6
 8007c24:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <_vfiprintf_r+0x258>)
 8007c26:	a904      	add	r1, sp, #16
 8007c28:	f7fd fdea 	bl	8005800 <_printf_float>
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	1c78      	adds	r0, r7, #1
 8007c30:	d1d6      	bne.n	8007be0 <_vfiprintf_r+0x1bc>
 8007c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c34:	07d9      	lsls	r1, r3, #31
 8007c36:	d405      	bmi.n	8007c44 <_vfiprintf_r+0x220>
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	059a      	lsls	r2, r3, #22
 8007c3c:	d402      	bmi.n	8007c44 <_vfiprintf_r+0x220>
 8007c3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c40:	f000 faaf 	bl	80081a2 <__retarget_lock_release_recursive>
 8007c44:	89ab      	ldrh	r3, [r5, #12]
 8007c46:	065b      	lsls	r3, r3, #25
 8007c48:	f53f af12 	bmi.w	8007a70 <_vfiprintf_r+0x4c>
 8007c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c4e:	e711      	b.n	8007a74 <_vfiprintf_r+0x50>
 8007c50:	ab03      	add	r3, sp, #12
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	462a      	mov	r2, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	4b08      	ldr	r3, [pc, #32]	; (8007c7c <_vfiprintf_r+0x258>)
 8007c5a:	a904      	add	r1, sp, #16
 8007c5c:	f7fe f86c 	bl	8005d38 <_printf_i>
 8007c60:	e7e4      	b.n	8007c2c <_vfiprintf_r+0x208>
 8007c62:	bf00      	nop
 8007c64:	0800c934 	.word	0x0800c934
 8007c68:	0800c954 	.word	0x0800c954
 8007c6c:	0800c914 	.word	0x0800c914
 8007c70:	0800c7bc 	.word	0x0800c7bc
 8007c74:	0800c7c6 	.word	0x0800c7c6
 8007c78:	08005801 	.word	0x08005801
 8007c7c:	080079ff 	.word	0x080079ff
 8007c80:	0800c7c2 	.word	0x0800c7c2

08007c84 <__swbuf_r>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	460e      	mov	r6, r1
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	b118      	cbz	r0, 8007c96 <__swbuf_r+0x12>
 8007c8e:	6983      	ldr	r3, [r0, #24]
 8007c90:	b90b      	cbnz	r3, 8007c96 <__swbuf_r+0x12>
 8007c92:	f000 f9e7 	bl	8008064 <__sinit>
 8007c96:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <__swbuf_r+0x98>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	d12b      	bne.n	8007cf4 <__swbuf_r+0x70>
 8007c9c:	686c      	ldr	r4, [r5, #4]
 8007c9e:	69a3      	ldr	r3, [r4, #24]
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	071a      	lsls	r2, r3, #28
 8007ca6:	d52f      	bpl.n	8007d08 <__swbuf_r+0x84>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	b36b      	cbz	r3, 8007d08 <__swbuf_r+0x84>
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	6820      	ldr	r0, [r4, #0]
 8007cb0:	b2f6      	uxtb	r6, r6
 8007cb2:	1ac0      	subs	r0, r0, r3
 8007cb4:	6963      	ldr	r3, [r4, #20]
 8007cb6:	4637      	mov	r7, r6
 8007cb8:	4283      	cmp	r3, r0
 8007cba:	dc04      	bgt.n	8007cc6 <__swbuf_r+0x42>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f93c 	bl	8007f3c <_fflush_r>
 8007cc4:	bb30      	cbnz	r0, 8007d14 <__swbuf_r+0x90>
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	3001      	adds	r0, #1
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	6022      	str	r2, [r4, #0]
 8007cd4:	701e      	strb	r6, [r3, #0]
 8007cd6:	6963      	ldr	r3, [r4, #20]
 8007cd8:	4283      	cmp	r3, r0
 8007cda:	d004      	beq.n	8007ce6 <__swbuf_r+0x62>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	07db      	lsls	r3, r3, #31
 8007ce0:	d506      	bpl.n	8007cf0 <__swbuf_r+0x6c>
 8007ce2:	2e0a      	cmp	r6, #10
 8007ce4:	d104      	bne.n	8007cf0 <__swbuf_r+0x6c>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 f927 	bl	8007f3c <_fflush_r>
 8007cee:	b988      	cbnz	r0, 8007d14 <__swbuf_r+0x90>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <__swbuf_r+0x9c>)
 8007cf6:	429c      	cmp	r4, r3
 8007cf8:	d101      	bne.n	8007cfe <__swbuf_r+0x7a>
 8007cfa:	68ac      	ldr	r4, [r5, #8]
 8007cfc:	e7cf      	b.n	8007c9e <__swbuf_r+0x1a>
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <__swbuf_r+0xa0>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	bf08      	it	eq
 8007d04:	68ec      	ldreq	r4, [r5, #12]
 8007d06:	e7ca      	b.n	8007c9e <__swbuf_r+0x1a>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 f81a 	bl	8007d44 <__swsetup_r>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d0cb      	beq.n	8007cac <__swbuf_r+0x28>
 8007d14:	f04f 37ff 	mov.w	r7, #4294967295
 8007d18:	e7ea      	b.n	8007cf0 <__swbuf_r+0x6c>
 8007d1a:	bf00      	nop
 8007d1c:	0800c934 	.word	0x0800c934
 8007d20:	0800c954 	.word	0x0800c954
 8007d24:	0800c914 	.word	0x0800c914

08007d28 <__ascii_wctomb>:
 8007d28:	4603      	mov	r3, r0
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	b141      	cbz	r1, 8007d40 <__ascii_wctomb+0x18>
 8007d2e:	2aff      	cmp	r2, #255	; 0xff
 8007d30:	d904      	bls.n	8007d3c <__ascii_wctomb+0x14>
 8007d32:	228a      	movs	r2, #138	; 0x8a
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	4770      	bx	lr
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	700a      	strb	r2, [r1, #0]
 8007d40:	4770      	bx	lr
	...

08007d44 <__swsetup_r>:
 8007d44:	4b32      	ldr	r3, [pc, #200]	; (8007e10 <__swsetup_r+0xcc>)
 8007d46:	b570      	push	{r4, r5, r6, lr}
 8007d48:	681d      	ldr	r5, [r3, #0]
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	b125      	cbz	r5, 8007d5a <__swsetup_r+0x16>
 8007d50:	69ab      	ldr	r3, [r5, #24]
 8007d52:	b913      	cbnz	r3, 8007d5a <__swsetup_r+0x16>
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 f985 	bl	8008064 <__sinit>
 8007d5a:	4b2e      	ldr	r3, [pc, #184]	; (8007e14 <__swsetup_r+0xd0>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d10f      	bne.n	8007d80 <__swsetup_r+0x3c>
 8007d60:	686c      	ldr	r4, [r5, #4]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d68:	0719      	lsls	r1, r3, #28
 8007d6a:	d42c      	bmi.n	8007dc6 <__swsetup_r+0x82>
 8007d6c:	06dd      	lsls	r5, r3, #27
 8007d6e:	d411      	bmi.n	8007d94 <__swsetup_r+0x50>
 8007d70:	2309      	movs	r3, #9
 8007d72:	6033      	str	r3, [r6, #0]
 8007d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	e03e      	b.n	8007dfe <__swsetup_r+0xba>
 8007d80:	4b25      	ldr	r3, [pc, #148]	; (8007e18 <__swsetup_r+0xd4>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d101      	bne.n	8007d8a <__swsetup_r+0x46>
 8007d86:	68ac      	ldr	r4, [r5, #8]
 8007d88:	e7eb      	b.n	8007d62 <__swsetup_r+0x1e>
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <__swsetup_r+0xd8>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	bf08      	it	eq
 8007d90:	68ec      	ldreq	r4, [r5, #12]
 8007d92:	e7e6      	b.n	8007d62 <__swsetup_r+0x1e>
 8007d94:	0758      	lsls	r0, r3, #29
 8007d96:	d512      	bpl.n	8007dbe <__swsetup_r+0x7a>
 8007d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9a:	b141      	cbz	r1, 8007dae <__swsetup_r+0x6a>
 8007d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da0:	4299      	cmp	r1, r3
 8007da2:	d002      	beq.n	8007daa <__swsetup_r+0x66>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fb75 	bl	8007494 <_free_r>
 8007daa:	2300      	movs	r3, #0
 8007dac:	6363      	str	r3, [r4, #52]	; 0x34
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	2300      	movs	r3, #0
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f043 0308 	orr.w	r3, r3, #8
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	b94b      	cbnz	r3, 8007dde <__swsetup_r+0x9a>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd4:	d003      	beq.n	8007dde <__swsetup_r+0x9a>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 fa07 	bl	80081ec <__smakebuf_r>
 8007dde:	89a0      	ldrh	r0, [r4, #12]
 8007de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de4:	f010 0301 	ands.w	r3, r0, #1
 8007de8:	d00a      	beq.n	8007e00 <__swsetup_r+0xbc>
 8007dea:	2300      	movs	r3, #0
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6963      	ldr	r3, [r4, #20]
 8007df0:	425b      	negs	r3, r3
 8007df2:	61a3      	str	r3, [r4, #24]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	b943      	cbnz	r3, 8007e0a <__swsetup_r+0xc6>
 8007df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dfc:	d1ba      	bne.n	8007d74 <__swsetup_r+0x30>
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	0781      	lsls	r1, r0, #30
 8007e02:	bf58      	it	pl
 8007e04:	6963      	ldrpl	r3, [r4, #20]
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	e7f4      	b.n	8007df4 <__swsetup_r+0xb0>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e7f7      	b.n	8007dfe <__swsetup_r+0xba>
 8007e0e:	bf00      	nop
 8007e10:	2000004c 	.word	0x2000004c
 8007e14:	0800c934 	.word	0x0800c934
 8007e18:	0800c954 	.word	0x0800c954
 8007e1c:	0800c914 	.word	0x0800c914

08007e20 <abort>:
 8007e20:	2006      	movs	r0, #6
 8007e22:	b508      	push	{r3, lr}
 8007e24:	f000 fa52 	bl	80082cc <raise>
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f000 fbe7 	bl	80085fc <_exit>
	...

08007e30 <__sflush_r>:
 8007e30:	898a      	ldrh	r2, [r1, #12]
 8007e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	4605      	mov	r5, r0
 8007e38:	0710      	lsls	r0, r2, #28
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	d458      	bmi.n	8007ef0 <__sflush_r+0xc0>
 8007e3e:	684b      	ldr	r3, [r1, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc05      	bgt.n	8007e50 <__sflush_r+0x20>
 8007e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dc02      	bgt.n	8007e50 <__sflush_r+0x20>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	d0f9      	beq.n	8007e4a <__sflush_r+0x1a>
 8007e56:	2300      	movs	r3, #0
 8007e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e5c:	682f      	ldr	r7, [r5, #0]
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	d032      	beq.n	8007ec8 <__sflush_r+0x98>
 8007e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	075a      	lsls	r2, r3, #29
 8007e68:	d505      	bpl.n	8007e76 <__sflush_r+0x46>
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	1ac0      	subs	r0, r0, r3
 8007e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e70:	b10b      	cbz	r3, 8007e76 <__sflush_r+0x46>
 8007e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e74:	1ac0      	subs	r0, r0, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	6a21      	ldr	r1, [r4, #32]
 8007e80:	47b0      	blx	r6
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	d106      	bne.n	8007e96 <__sflush_r+0x66>
 8007e88:	6829      	ldr	r1, [r5, #0]
 8007e8a:	291d      	cmp	r1, #29
 8007e8c:	d82c      	bhi.n	8007ee8 <__sflush_r+0xb8>
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	; (8007f38 <__sflush_r+0x108>)
 8007e90:	40ca      	lsrs	r2, r1
 8007e92:	07d6      	lsls	r6, r2, #31
 8007e94:	d528      	bpl.n	8007ee8 <__sflush_r+0xb8>
 8007e96:	2200      	movs	r2, #0
 8007e98:	6062      	str	r2, [r4, #4]
 8007e9a:	6922      	ldr	r2, [r4, #16]
 8007e9c:	04d9      	lsls	r1, r3, #19
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	d504      	bpl.n	8007eac <__sflush_r+0x7c>
 8007ea2:	1c42      	adds	r2, r0, #1
 8007ea4:	d101      	bne.n	8007eaa <__sflush_r+0x7a>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b903      	cbnz	r3, 8007eac <__sflush_r+0x7c>
 8007eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8007eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eae:	602f      	str	r7, [r5, #0]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d0ca      	beq.n	8007e4a <__sflush_r+0x1a>
 8007eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	d002      	beq.n	8007ec2 <__sflush_r+0x92>
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f7ff fae9 	bl	8007494 <_free_r>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec6:	e7c1      	b.n	8007e4c <__sflush_r+0x1c>
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b0      	blx	r6
 8007ed0:	1c41      	adds	r1, r0, #1
 8007ed2:	d1c7      	bne.n	8007e64 <__sflush_r+0x34>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0c4      	beq.n	8007e64 <__sflush_r+0x34>
 8007eda:	2b1d      	cmp	r3, #29
 8007edc:	d001      	beq.n	8007ee2 <__sflush_r+0xb2>
 8007ede:	2b16      	cmp	r3, #22
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0xb6>
 8007ee2:	602f      	str	r7, [r5, #0]
 8007ee4:	e7b1      	b.n	8007e4a <__sflush_r+0x1a>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	e7ad      	b.n	8007e4c <__sflush_r+0x1c>
 8007ef0:	690f      	ldr	r7, [r1, #16]
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	d0a9      	beq.n	8007e4a <__sflush_r+0x1a>
 8007ef6:	0793      	lsls	r3, r2, #30
 8007ef8:	bf18      	it	ne
 8007efa:	2300      	movne	r3, #0
 8007efc:	680e      	ldr	r6, [r1, #0]
 8007efe:	bf08      	it	eq
 8007f00:	694b      	ldreq	r3, [r1, #20]
 8007f02:	eba6 0807 	sub.w	r8, r6, r7
 8007f06:	600f      	str	r7, [r1, #0]
 8007f08:	608b      	str	r3, [r1, #8]
 8007f0a:	f1b8 0f00 	cmp.w	r8, #0
 8007f0e:	dd9c      	ble.n	8007e4a <__sflush_r+0x1a>
 8007f10:	4643      	mov	r3, r8
 8007f12:	463a      	mov	r2, r7
 8007f14:	4628      	mov	r0, r5
 8007f16:	6a21      	ldr	r1, [r4, #32]
 8007f18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f1a:	47b0      	blx	r6
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	dc06      	bgt.n	8007f2e <__sflush_r+0xfe>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	e78e      	b.n	8007e4c <__sflush_r+0x1c>
 8007f2e:	4407      	add	r7, r0
 8007f30:	eba8 0800 	sub.w	r8, r8, r0
 8007f34:	e7e9      	b.n	8007f0a <__sflush_r+0xda>
 8007f36:	bf00      	nop
 8007f38:	20400001 	.word	0x20400001

08007f3c <_fflush_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	690b      	ldr	r3, [r1, #16]
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b913      	cbnz	r3, 8007f4c <_fflush_r+0x10>
 8007f46:	2500      	movs	r5, #0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	b118      	cbz	r0, 8007f56 <_fflush_r+0x1a>
 8007f4e:	6983      	ldr	r3, [r0, #24]
 8007f50:	b90b      	cbnz	r3, 8007f56 <_fflush_r+0x1a>
 8007f52:	f000 f887 	bl	8008064 <__sinit>
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <_fflush_r+0x6c>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d11b      	bne.n	8007f94 <_fflush_r+0x58>
 8007f5c:	686c      	ldr	r4, [r5, #4]
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0ef      	beq.n	8007f46 <_fflush_r+0xa>
 8007f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d404      	bmi.n	8007f76 <_fflush_r+0x3a>
 8007f6c:	0599      	lsls	r1, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_fflush_r+0x3a>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f000 f915 	bl	80081a0 <__retarget_lock_acquire_recursive>
 8007f76:	4628      	mov	r0, r5
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f7ff ff59 	bl	8007e30 <__sflush_r>
 8007f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f80:	4605      	mov	r5, r0
 8007f82:	07da      	lsls	r2, r3, #31
 8007f84:	d4e0      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	d4dd      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8e:	f000 f908 	bl	80081a2 <__retarget_lock_release_recursive>
 8007f92:	e7d9      	b.n	8007f48 <_fflush_r+0xc>
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <_fflush_r+0x70>)
 8007f96:	429c      	cmp	r4, r3
 8007f98:	d101      	bne.n	8007f9e <_fflush_r+0x62>
 8007f9a:	68ac      	ldr	r4, [r5, #8]
 8007f9c:	e7df      	b.n	8007f5e <_fflush_r+0x22>
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <_fflush_r+0x74>)
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	bf08      	it	eq
 8007fa4:	68ec      	ldreq	r4, [r5, #12]
 8007fa6:	e7da      	b.n	8007f5e <_fflush_r+0x22>
 8007fa8:	0800c934 	.word	0x0800c934
 8007fac:	0800c954 	.word	0x0800c954
 8007fb0:	0800c914 	.word	0x0800c914

08007fb4 <std>:
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e9c0 3300 	strd	r3, r3, [r0]
 8007fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc2:	6083      	str	r3, [r0, #8]
 8007fc4:	8181      	strh	r1, [r0, #12]
 8007fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fc8:	81c2      	strh	r2, [r0, #14]
 8007fca:	6183      	str	r3, [r0, #24]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	2208      	movs	r2, #8
 8007fd0:	305c      	adds	r0, #92	; 0x5c
 8007fd2:	f7fd fb6f 	bl	80056b4 <memset>
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <std+0x38>)
 8007fd8:	6224      	str	r4, [r4, #32]
 8007fda:	6263      	str	r3, [r4, #36]	; 0x24
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <std+0x3c>)
 8007fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fe0:	4b04      	ldr	r3, [pc, #16]	; (8007ff4 <std+0x40>)
 8007fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fe4:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <std+0x44>)
 8007fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	08008305 	.word	0x08008305
 8007ff0:	08008327 	.word	0x08008327
 8007ff4:	0800835f 	.word	0x0800835f
 8007ff8:	08008383 	.word	0x08008383

08007ffc <_cleanup_r>:
 8007ffc:	4901      	ldr	r1, [pc, #4]	; (8008004 <_cleanup_r+0x8>)
 8007ffe:	f000 b8af 	b.w	8008160 <_fwalk_reent>
 8008002:	bf00      	nop
 8008004:	08007f3d 	.word	0x08007f3d

08008008 <__sfmoreglue>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	2568      	movs	r5, #104	; 0x68
 800800c:	1e4a      	subs	r2, r1, #1
 800800e:	4355      	muls	r5, r2
 8008010:	460e      	mov	r6, r1
 8008012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008016:	f7ff fa89 	bl	800752c <_malloc_r>
 800801a:	4604      	mov	r4, r0
 800801c:	b140      	cbz	r0, 8008030 <__sfmoreglue+0x28>
 800801e:	2100      	movs	r1, #0
 8008020:	e9c0 1600 	strd	r1, r6, [r0]
 8008024:	300c      	adds	r0, #12
 8008026:	60a0      	str	r0, [r4, #8]
 8008028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800802c:	f7fd fb42 	bl	80056b4 <memset>
 8008030:	4620      	mov	r0, r4
 8008032:	bd70      	pop	{r4, r5, r6, pc}

08008034 <__sfp_lock_acquire>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sfp_lock_acquire+0x8>)
 8008036:	f000 b8b3 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	200006ec 	.word	0x200006ec

08008040 <__sfp_lock_release>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sfp_lock_release+0x8>)
 8008042:	f000 b8ae 	b.w	80081a2 <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	200006ec 	.word	0x200006ec

0800804c <__sinit_lock_acquire>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sinit_lock_acquire+0x8>)
 800804e:	f000 b8a7 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	200006e7 	.word	0x200006e7

08008058 <__sinit_lock_release>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sinit_lock_release+0x8>)
 800805a:	f000 b8a2 	b.w	80081a2 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	200006e7 	.word	0x200006e7

08008064 <__sinit>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	f7ff fff0 	bl	800804c <__sinit_lock_acquire>
 800806c:	69a3      	ldr	r3, [r4, #24]
 800806e:	b11b      	cbz	r3, 8008078 <__sinit+0x14>
 8008070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008074:	f7ff bff0 	b.w	8008058 <__sinit_lock_release>
 8008078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800807c:	6523      	str	r3, [r4, #80]	; 0x50
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <__sinit+0x68>)
 8008080:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <__sinit+0x6c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	62a2      	str	r2, [r4, #40]	; 0x28
 8008086:	42a3      	cmp	r3, r4
 8008088:	bf08      	it	eq
 800808a:	2301      	moveq	r3, #1
 800808c:	4620      	mov	r0, r4
 800808e:	bf08      	it	eq
 8008090:	61a3      	streq	r3, [r4, #24]
 8008092:	f000 f81f 	bl	80080d4 <__sfp>
 8008096:	6060      	str	r0, [r4, #4]
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f81b 	bl	80080d4 <__sfp>
 800809e:	60a0      	str	r0, [r4, #8]
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f817 	bl	80080d4 <__sfp>
 80080a6:	2200      	movs	r2, #0
 80080a8:	2104      	movs	r1, #4
 80080aa:	60e0      	str	r0, [r4, #12]
 80080ac:	6860      	ldr	r0, [r4, #4]
 80080ae:	f7ff ff81 	bl	8007fb4 <std>
 80080b2:	2201      	movs	r2, #1
 80080b4:	2109      	movs	r1, #9
 80080b6:	68a0      	ldr	r0, [r4, #8]
 80080b8:	f7ff ff7c 	bl	8007fb4 <std>
 80080bc:	2202      	movs	r2, #2
 80080be:	2112      	movs	r1, #18
 80080c0:	68e0      	ldr	r0, [r4, #12]
 80080c2:	f7ff ff77 	bl	8007fb4 <std>
 80080c6:	2301      	movs	r3, #1
 80080c8:	61a3      	str	r3, [r4, #24]
 80080ca:	e7d1      	b.n	8008070 <__sinit+0xc>
 80080cc:	0800c590 	.word	0x0800c590
 80080d0:	08007ffd 	.word	0x08007ffd

080080d4 <__sfp>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	4607      	mov	r7, r0
 80080d8:	f7ff ffac 	bl	8008034 <__sfp_lock_acquire>
 80080dc:	4b1e      	ldr	r3, [pc, #120]	; (8008158 <__sfp+0x84>)
 80080de:	681e      	ldr	r6, [r3, #0]
 80080e0:	69b3      	ldr	r3, [r6, #24]
 80080e2:	b913      	cbnz	r3, 80080ea <__sfp+0x16>
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ffbd 	bl	8008064 <__sinit>
 80080ea:	3648      	adds	r6, #72	; 0x48
 80080ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	d503      	bpl.n	80080fc <__sfp+0x28>
 80080f4:	6833      	ldr	r3, [r6, #0]
 80080f6:	b30b      	cbz	r3, 800813c <__sfp+0x68>
 80080f8:	6836      	ldr	r6, [r6, #0]
 80080fa:	e7f7      	b.n	80080ec <__sfp+0x18>
 80080fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008100:	b9d5      	cbnz	r5, 8008138 <__sfp+0x64>
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <__sfp+0x88>)
 8008104:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008108:	60e3      	str	r3, [r4, #12]
 800810a:	6665      	str	r5, [r4, #100]	; 0x64
 800810c:	f000 f847 	bl	800819e <__retarget_lock_init_recursive>
 8008110:	f7ff ff96 	bl	8008040 <__sfp_lock_release>
 8008114:	2208      	movs	r2, #8
 8008116:	4629      	mov	r1, r5
 8008118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800811c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008120:	6025      	str	r5, [r4, #0]
 8008122:	61a5      	str	r5, [r4, #24]
 8008124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008128:	f7fd fac4 	bl	80056b4 <memset>
 800812c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008134:	4620      	mov	r0, r4
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008138:	3468      	adds	r4, #104	; 0x68
 800813a:	e7d9      	b.n	80080f0 <__sfp+0x1c>
 800813c:	2104      	movs	r1, #4
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff ff62 	bl	8008008 <__sfmoreglue>
 8008144:	4604      	mov	r4, r0
 8008146:	6030      	str	r0, [r6, #0]
 8008148:	2800      	cmp	r0, #0
 800814a:	d1d5      	bne.n	80080f8 <__sfp+0x24>
 800814c:	f7ff ff78 	bl	8008040 <__sfp_lock_release>
 8008150:	230c      	movs	r3, #12
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	e7ee      	b.n	8008134 <__sfp+0x60>
 8008156:	bf00      	nop
 8008158:	0800c590 	.word	0x0800c590
 800815c:	ffff0001 	.word	0xffff0001

08008160 <_fwalk_reent>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4606      	mov	r6, r0
 8008166:	4688      	mov	r8, r1
 8008168:	2700      	movs	r7, #0
 800816a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800816e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008172:	f1b9 0901 	subs.w	r9, r9, #1
 8008176:	d505      	bpl.n	8008184 <_fwalk_reent+0x24>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	2c00      	cmp	r4, #0
 800817c:	d1f7      	bne.n	800816e <_fwalk_reent+0xe>
 800817e:	4638      	mov	r0, r7
 8008180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008184:	89ab      	ldrh	r3, [r5, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d907      	bls.n	800819a <_fwalk_reent+0x3a>
 800818a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800818e:	3301      	adds	r3, #1
 8008190:	d003      	beq.n	800819a <_fwalk_reent+0x3a>
 8008192:	4629      	mov	r1, r5
 8008194:	4630      	mov	r0, r6
 8008196:	47c0      	blx	r8
 8008198:	4307      	orrs	r7, r0
 800819a:	3568      	adds	r5, #104	; 0x68
 800819c:	e7e9      	b.n	8008172 <_fwalk_reent+0x12>

0800819e <__retarget_lock_init_recursive>:
 800819e:	4770      	bx	lr

080081a0 <__retarget_lock_acquire_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_release_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <__swhatbuf_r>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	460e      	mov	r6, r1
 80081a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ac:	4614      	mov	r4, r2
 80081ae:	2900      	cmp	r1, #0
 80081b0:	461d      	mov	r5, r3
 80081b2:	b096      	sub	sp, #88	; 0x58
 80081b4:	da07      	bge.n	80081c6 <__swhatbuf_r+0x22>
 80081b6:	2300      	movs	r3, #0
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	89b3      	ldrh	r3, [r6, #12]
 80081bc:	061a      	lsls	r2, r3, #24
 80081be:	d410      	bmi.n	80081e2 <__swhatbuf_r+0x3e>
 80081c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c4:	e00e      	b.n	80081e4 <__swhatbuf_r+0x40>
 80081c6:	466a      	mov	r2, sp
 80081c8:	f000 f902 	bl	80083d0 <_fstat_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	dbf2      	blt.n	80081b6 <__swhatbuf_r+0x12>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081da:	425a      	negs	r2, r3
 80081dc:	415a      	adcs	r2, r3
 80081de:	602a      	str	r2, [r5, #0]
 80081e0:	e7ee      	b.n	80081c0 <__swhatbuf_r+0x1c>
 80081e2:	2340      	movs	r3, #64	; 0x40
 80081e4:	2000      	movs	r0, #0
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	b016      	add	sp, #88	; 0x58
 80081ea:	bd70      	pop	{r4, r5, r6, pc}

080081ec <__smakebuf_r>:
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081f0:	079d      	lsls	r5, r3, #30
 80081f2:	4606      	mov	r6, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	d507      	bpl.n	8008208 <__smakebuf_r+0x1c>
 80081f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	2301      	movs	r3, #1
 8008202:	6163      	str	r3, [r4, #20]
 8008204:	b002      	add	sp, #8
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	466a      	mov	r2, sp
 800820a:	ab01      	add	r3, sp, #4
 800820c:	f7ff ffca 	bl	80081a4 <__swhatbuf_r>
 8008210:	9900      	ldr	r1, [sp, #0]
 8008212:	4605      	mov	r5, r0
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff f989 	bl	800752c <_malloc_r>
 800821a:	b948      	cbnz	r0, 8008230 <__smakebuf_r+0x44>
 800821c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d4ef      	bmi.n	8008204 <__smakebuf_r+0x18>
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	e7e3      	b.n	80081f8 <__smakebuf_r+0xc>
 8008230:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <__smakebuf_r+0x7c>)
 8008232:	62b3      	str	r3, [r6, #40]	; 0x28
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	6020      	str	r0, [r4, #0]
 8008238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	9b00      	ldr	r3, [sp, #0]
 8008240:	6120      	str	r0, [r4, #16]
 8008242:	6163      	str	r3, [r4, #20]
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	b15b      	cbz	r3, 8008260 <__smakebuf_r+0x74>
 8008248:	4630      	mov	r0, r6
 800824a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824e:	f000 f8d1 	bl	80083f4 <_isatty_r>
 8008252:	b128      	cbz	r0, 8008260 <__smakebuf_r+0x74>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f023 0303 	bic.w	r3, r3, #3
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	89a0      	ldrh	r0, [r4, #12]
 8008262:	4305      	orrs	r5, r0
 8008264:	81a5      	strh	r5, [r4, #12]
 8008266:	e7cd      	b.n	8008204 <__smakebuf_r+0x18>
 8008268:	08007ffd 	.word	0x08007ffd

0800826c <_malloc_usable_size_r>:
 800826c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008270:	1f18      	subs	r0, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	bfbc      	itt	lt
 8008276:	580b      	ldrlt	r3, [r1, r0]
 8008278:	18c0      	addlt	r0, r0, r3
 800827a:	4770      	bx	lr

0800827c <_raise_r>:
 800827c:	291f      	cmp	r1, #31
 800827e:	b538      	push	{r3, r4, r5, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	d904      	bls.n	8008290 <_raise_r+0x14>
 8008286:	2316      	movs	r3, #22
 8008288:	6003      	str	r3, [r0, #0]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008292:	b112      	cbz	r2, 800829a <_raise_r+0x1e>
 8008294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008298:	b94b      	cbnz	r3, 80082ae <_raise_r+0x32>
 800829a:	4620      	mov	r0, r4
 800829c:	f000 f830 	bl	8008300 <_getpid_r>
 80082a0:	462a      	mov	r2, r5
 80082a2:	4601      	mov	r1, r0
 80082a4:	4620      	mov	r0, r4
 80082a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082aa:	f000 b817 	b.w	80082dc <_kill_r>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d00a      	beq.n	80082c8 <_raise_r+0x4c>
 80082b2:	1c59      	adds	r1, r3, #1
 80082b4:	d103      	bne.n	80082be <_raise_r+0x42>
 80082b6:	2316      	movs	r3, #22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	2001      	movs	r0, #1
 80082bc:	e7e7      	b.n	800828e <_raise_r+0x12>
 80082be:	2400      	movs	r4, #0
 80082c0:	4628      	mov	r0, r5
 80082c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082c6:	4798      	blx	r3
 80082c8:	2000      	movs	r0, #0
 80082ca:	e7e0      	b.n	800828e <_raise_r+0x12>

080082cc <raise>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <raise+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f7ff bfd3 	b.w	800827c <_raise_r>
 80082d6:	bf00      	nop
 80082d8:	2000004c 	.word	0x2000004c

080082dc <_kill_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	2300      	movs	r3, #0
 80082e0:	4d06      	ldr	r5, [pc, #24]	; (80082fc <_kill_r+0x20>)
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	f000 f959 	bl	80085a0 <_kill>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d102      	bne.n	80082f8 <_kill_r+0x1c>
 80082f2:	682b      	ldr	r3, [r5, #0]
 80082f4:	b103      	cbz	r3, 80082f8 <_kill_r+0x1c>
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	200006e0 	.word	0x200006e0

08008300 <_getpid_r>:
 8008300:	f000 b93e 	b.w	8008580 <_getpid>

08008304 <__sread>:
 8008304:	b510      	push	{r4, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830c:	f000 f894 	bl	8008438 <_read_r>
 8008310:	2800      	cmp	r0, #0
 8008312:	bfab      	itete	ge
 8008314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008316:	89a3      	ldrhlt	r3, [r4, #12]
 8008318:	181b      	addge	r3, r3, r0
 800831a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800831e:	bfac      	ite	ge
 8008320:	6563      	strge	r3, [r4, #84]	; 0x54
 8008322:	81a3      	strhlt	r3, [r4, #12]
 8008324:	bd10      	pop	{r4, pc}

08008326 <__swrite>:
 8008326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	461f      	mov	r7, r3
 800832c:	898b      	ldrh	r3, [r1, #12]
 800832e:	4605      	mov	r5, r0
 8008330:	05db      	lsls	r3, r3, #23
 8008332:	460c      	mov	r4, r1
 8008334:	4616      	mov	r6, r2
 8008336:	d505      	bpl.n	8008344 <__swrite+0x1e>
 8008338:	2302      	movs	r3, #2
 800833a:	2200      	movs	r2, #0
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	f000 f868 	bl	8008414 <_lseek_r>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	4632      	mov	r2, r6
 8008348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	4628      	mov	r0, r5
 8008350:	463b      	mov	r3, r7
 8008352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	f000 b817 	b.w	800838c <_write_r>

0800835e <__sseek>:
 800835e:	b510      	push	{r4, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008366:	f000 f855 	bl	8008414 <_lseek_r>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	bf15      	itete	ne
 8008370:	6560      	strne	r0, [r4, #84]	; 0x54
 8008372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800837a:	81a3      	strheq	r3, [r4, #12]
 800837c:	bf18      	it	ne
 800837e:	81a3      	strhne	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__sclose>:
 8008382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008386:	f000 b813 	b.w	80083b0 <_close_r>
	...

0800838c <_write_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	4611      	mov	r1, r2
 8008394:	2200      	movs	r2, #0
 8008396:	4d05      	ldr	r5, [pc, #20]	; (80083ac <_write_r+0x20>)
 8008398:	602a      	str	r2, [r5, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f000 f926 	bl	80085ec <_write>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_write_r+0x1e>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_write_r+0x1e>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	200006e0 	.word	0x200006e0

080083b0 <_close_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	2300      	movs	r3, #0
 80083b4:	4d05      	ldr	r5, [pc, #20]	; (80083cc <_close_r+0x1c>)
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f000 f8d0 	bl	8008560 <_close>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_close_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_close_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200006e0 	.word	0x200006e0

080083d0 <_fstat_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	2300      	movs	r3, #0
 80083d4:	4d06      	ldr	r5, [pc, #24]	; (80083f0 <_fstat_r+0x20>)
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f000 f8c7 	bl	8008570 <_fstat>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d102      	bne.n	80083ec <_fstat_r+0x1c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b103      	cbz	r3, 80083ec <_fstat_r+0x1c>
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	200006e0 	.word	0x200006e0

080083f4 <_isatty_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	2300      	movs	r3, #0
 80083f8:	4d05      	ldr	r5, [pc, #20]	; (8008410 <_isatty_r+0x1c>)
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	f000 f8c6 	bl	8008590 <_isatty>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_isatty_r+0x1a>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_isatty_r+0x1a>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200006e0 	.word	0x200006e0

08008414 <_lseek_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	2200      	movs	r2, #0
 800841e:	4d05      	ldr	r5, [pc, #20]	; (8008434 <_lseek_r+0x20>)
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f000 f8c4 	bl	80085b0 <_lseek>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_lseek_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_lseek_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	200006e0 	.word	0x200006e0

08008438 <_read_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	4611      	mov	r1, r2
 8008440:	2200      	movs	r2, #0
 8008442:	4d05      	ldr	r5, [pc, #20]	; (8008458 <_read_r+0x20>)
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f000 f8ba 	bl	80085c0 <_read>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_read_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_read_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	200006e0 	.word	0x200006e0
 800845c:	00000000 	.word	0x00000000

08008460 <floor>:
 8008460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008464:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008468:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800846c:	2e13      	cmp	r6, #19
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4607      	mov	r7, r0
 8008474:	460c      	mov	r4, r1
 8008476:	4605      	mov	r5, r0
 8008478:	dc34      	bgt.n	80084e4 <floor+0x84>
 800847a:	2e00      	cmp	r6, #0
 800847c:	da15      	bge.n	80084aa <floor+0x4a>
 800847e:	a334      	add	r3, pc, #208	; (adr r3, 8008550 <floor+0xf0>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f7 fede 	bl	8000244 <__adddf3>
 8008488:	2200      	movs	r2, #0
 800848a:	2300      	movs	r3, #0
 800848c:	f7f8 fb20 	bl	8000ad0 <__aeabi_dcmpgt>
 8008490:	b140      	cbz	r0, 80084a4 <floor+0x44>
 8008492:	2c00      	cmp	r4, #0
 8008494:	da59      	bge.n	800854a <floor+0xea>
 8008496:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800849a:	ea57 0503 	orrs.w	r5, r7, r3
 800849e:	d001      	beq.n	80084a4 <floor+0x44>
 80084a0:	2500      	movs	r5, #0
 80084a2:	4c2d      	ldr	r4, [pc, #180]	; (8008558 <floor+0xf8>)
 80084a4:	4623      	mov	r3, r4
 80084a6:	462f      	mov	r7, r5
 80084a8:	e025      	b.n	80084f6 <floor+0x96>
 80084aa:	4a2c      	ldr	r2, [pc, #176]	; (800855c <floor+0xfc>)
 80084ac:	fa42 f806 	asr.w	r8, r2, r6
 80084b0:	ea01 0208 	and.w	r2, r1, r8
 80084b4:	4302      	orrs	r2, r0
 80084b6:	d01e      	beq.n	80084f6 <floor+0x96>
 80084b8:	a325      	add	r3, pc, #148	; (adr r3, 8008550 <floor+0xf0>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f7 fec1 	bl	8000244 <__adddf3>
 80084c2:	2200      	movs	r2, #0
 80084c4:	2300      	movs	r3, #0
 80084c6:	f7f8 fb03 	bl	8000ad0 <__aeabi_dcmpgt>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0ea      	beq.n	80084a4 <floor+0x44>
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	bfbe      	ittt	lt
 80084d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80084d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80084da:	19a4      	addlt	r4, r4, r6
 80084dc:	2500      	movs	r5, #0
 80084de:	ea24 0408 	bic.w	r4, r4, r8
 80084e2:	e7df      	b.n	80084a4 <floor+0x44>
 80084e4:	2e33      	cmp	r6, #51	; 0x33
 80084e6:	dd0a      	ble.n	80084fe <floor+0x9e>
 80084e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80084ec:	d103      	bne.n	80084f6 <floor+0x96>
 80084ee:	f7f7 fea9 	bl	8000244 <__adddf3>
 80084f2:	4607      	mov	r7, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4638      	mov	r0, r7
 80084f8:	4619      	mov	r1, r3
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008506:	fa22 f808 	lsr.w	r8, r2, r8
 800850a:	ea18 0f00 	tst.w	r8, r0
 800850e:	d0f2      	beq.n	80084f6 <floor+0x96>
 8008510:	a30f      	add	r3, pc, #60	; (adr r3, 8008550 <floor+0xf0>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f7 fe95 	bl	8000244 <__adddf3>
 800851a:	2200      	movs	r2, #0
 800851c:	2300      	movs	r3, #0
 800851e:	f7f8 fad7 	bl	8000ad0 <__aeabi_dcmpgt>
 8008522:	2800      	cmp	r0, #0
 8008524:	d0be      	beq.n	80084a4 <floor+0x44>
 8008526:	2c00      	cmp	r4, #0
 8008528:	da02      	bge.n	8008530 <floor+0xd0>
 800852a:	2e14      	cmp	r6, #20
 800852c:	d103      	bne.n	8008536 <floor+0xd6>
 800852e:	3401      	adds	r4, #1
 8008530:	ea25 0508 	bic.w	r5, r5, r8
 8008534:	e7b6      	b.n	80084a4 <floor+0x44>
 8008536:	2301      	movs	r3, #1
 8008538:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800853c:	fa03 f606 	lsl.w	r6, r3, r6
 8008540:	4435      	add	r5, r6
 8008542:	42bd      	cmp	r5, r7
 8008544:	bf38      	it	cc
 8008546:	18e4      	addcc	r4, r4, r3
 8008548:	e7f2      	b.n	8008530 <floor+0xd0>
 800854a:	2500      	movs	r5, #0
 800854c:	462c      	mov	r4, r5
 800854e:	e7a9      	b.n	80084a4 <floor+0x44>
 8008550:	8800759c 	.word	0x8800759c
 8008554:	7e37e43c 	.word	0x7e37e43c
 8008558:	bff00000 	.word	0xbff00000
 800855c:	000fffff 	.word	0x000fffff

08008560 <_close>:
 8008560:	2258      	movs	r2, #88	; 0x58
 8008562:	4b02      	ldr	r3, [pc, #8]	; (800856c <_close+0xc>)
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	4770      	bx	lr
 800856c:	200006e0 	.word	0x200006e0

08008570 <_fstat>:
 8008570:	2258      	movs	r2, #88	; 0x58
 8008572:	4b02      	ldr	r3, [pc, #8]	; (800857c <_fstat+0xc>)
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	4770      	bx	lr
 800857c:	200006e0 	.word	0x200006e0

08008580 <_getpid>:
 8008580:	2258      	movs	r2, #88	; 0x58
 8008582:	4b02      	ldr	r3, [pc, #8]	; (800858c <_getpid+0xc>)
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	4770      	bx	lr
 800858c:	200006e0 	.word	0x200006e0

08008590 <_isatty>:
 8008590:	2258      	movs	r2, #88	; 0x58
 8008592:	4b02      	ldr	r3, [pc, #8]	; (800859c <_isatty+0xc>)
 8008594:	2000      	movs	r0, #0
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	200006e0 	.word	0x200006e0

080085a0 <_kill>:
 80085a0:	2258      	movs	r2, #88	; 0x58
 80085a2:	4b02      	ldr	r3, [pc, #8]	; (80085ac <_kill+0xc>)
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	4770      	bx	lr
 80085ac:	200006e0 	.word	0x200006e0

080085b0 <_lseek>:
 80085b0:	2258      	movs	r2, #88	; 0x58
 80085b2:	4b02      	ldr	r3, [pc, #8]	; (80085bc <_lseek+0xc>)
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	4770      	bx	lr
 80085bc:	200006e0 	.word	0x200006e0

080085c0 <_read>:
 80085c0:	2258      	movs	r2, #88	; 0x58
 80085c2:	4b02      	ldr	r3, [pc, #8]	; (80085cc <_read+0xc>)
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	4770      	bx	lr
 80085cc:	200006e0 	.word	0x200006e0

080085d0 <_sbrk>:
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <_sbrk+0x14>)
 80085d2:	4602      	mov	r2, r0
 80085d4:	6819      	ldr	r1, [r3, #0]
 80085d6:	b909      	cbnz	r1, 80085dc <_sbrk+0xc>
 80085d8:	4903      	ldr	r1, [pc, #12]	; (80085e8 <_sbrk+0x18>)
 80085da:	6019      	str	r1, [r3, #0]
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	4402      	add	r2, r0
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	4770      	bx	lr
 80085e4:	200003f4 	.word	0x200003f4
 80085e8:	200006f0 	.word	0x200006f0

080085ec <_write>:
 80085ec:	2258      	movs	r2, #88	; 0x58
 80085ee:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <_write+0xc>)
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	4770      	bx	lr
 80085f8:	200006e0 	.word	0x200006e0

080085fc <_exit>:
 80085fc:	e7fe      	b.n	80085fc <_exit>
	...

08008600 <_init>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr

0800860c <_fini>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr
